   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "i2c_master.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_USIC_CH_EnableEvent,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_USIC_CH_EnableEvent:
  23              	.LFB69:
  24              	 .file 1 "C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2016-04-10
   4:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   *************************************************************************************************
   7:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  77:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
  79:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
  80:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  81:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  82:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  83:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  84:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  85:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
  86:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  87:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
  88:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
  89:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  90:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  91:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
  92:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
  94:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
  95:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  96:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  98:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  99:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 100:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 101:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 102:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 103:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 104:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 105:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 106:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 107:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 108:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 109:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 110:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 111:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 112:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 113:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 114:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 115:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 116:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 117:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 119:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 122:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 123:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 124:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 125:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 126:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 127:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 128:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 129:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 130:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 131:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 132:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 133:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 134:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 135:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 136:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 137:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 138:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 139:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 140:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 141:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 142:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 143:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 144:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 145:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 146:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 147:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 148:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 149:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 150:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 151:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 152:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 153:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 154:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 155:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 156:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 157:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 158:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 159:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 160:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 161:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 162:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 163:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 164:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 165:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 166:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 167:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 168:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 169:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 170:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 171:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 172:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 173:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 174:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 175:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 176:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 177:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 178:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 179:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 180:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 181:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 182:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 183:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 184:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 185:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 186:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 187:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 188:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 189:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 190:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 191:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 192:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 193:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 194:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 195:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 196:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 197:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 198:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 199:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 200:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 201:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 202:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 203:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 204:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 205:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 206:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 207:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 208:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 209:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 210:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 211:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 212:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 213:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 214:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 215:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 216:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 217:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 218:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 219:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 220:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 221:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 222:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 223:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 224:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 225:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 226:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 227:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 228:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 229:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 230:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 231:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 232:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 233:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 234:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 235:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 236:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 237:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 238:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 239:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 240:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 241:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 242:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 243:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 244:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 245:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 246:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 247:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 248:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 249:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 250:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 251:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 252:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 253:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 254:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 255:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 256:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 257:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 258:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 259:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 260:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 261:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 262:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 263:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 264:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 265:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 266:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 267:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 268:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 269:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 270:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 271:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 272:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 273:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 274:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 275:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 276:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 277:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 278:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 279:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 280:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 281:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 282:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 283:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 284:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 285:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 286:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 287:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 288:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 289:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 290:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 291:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 292:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 293:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 294:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 295:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 296:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 297:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 298:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 299:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 300:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 301:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 302:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 303:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 304:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 305:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 306:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 307:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 308:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 309:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 310:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 311:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 312:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 313:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 314:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 315:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 316:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 317:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 318:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 319:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 320:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 321:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 322:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 323:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 324:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 325:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 326:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 327:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 328:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 329:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 330:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 331:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 332:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 333:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 334:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 335:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 336:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 337:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 338:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 339:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 340:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 341:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 342:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 343:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 344:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 345:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 346:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 347:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 348:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 349:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 350:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 351:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 352:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 353:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 354:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 355:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 356:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 357:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 358:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 359:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 360:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 361:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 362:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 363:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 364:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 365:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 366:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 367:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 368:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 369:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 370:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 371:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 372:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 373:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 374:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 375:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 376:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 377:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 378:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 379:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 380:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 381:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 382:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 383:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 384:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 385:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 386:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 387:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 388:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 389:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 390:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 391:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 392:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 393:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 394:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 395:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 396:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 397:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 398:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 399:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 400:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 401:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 402:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 403:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 404:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 405:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 406:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 407:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 408:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 409:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 410:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 411:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 412:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 413:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 414:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 415:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 416:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 417:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 418:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 419:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 420:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 421:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 422:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 423:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 424:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 425:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 426:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 427:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 428:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 429:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 430:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 431:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 432:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 433:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 434:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 435:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
 436:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 437:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 438:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 439:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 440:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 441:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 442:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 443:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 444:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 445:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 446:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 447:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 448:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 449:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 450:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 451:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 452:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 453:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 454:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 455:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 456:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 457:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 458:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 460:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 461:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 462:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 463:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 464:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 465:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 466:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 467:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 468:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 469:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 470:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 471:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 472:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 473:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 474:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 475:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 476:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 477:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 478:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 479:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 480:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 481:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 482:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 483:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 484:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 485:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   };
 486:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 487:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 488:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 489:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 490:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 491:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 492:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 493:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 494:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 495:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   };
 496:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 497:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 498:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 499:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 500:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 501:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 502:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 503:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 504:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 505:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 506:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 507:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 508:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 509:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 510:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 511:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 512:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 513:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 514:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 515:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 516:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 517:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 518:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 519:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 520:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 521:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 522:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 523:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 524:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 525:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 526:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 527:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 528:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 529:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 530:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 531:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 532:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 533:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 534:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 535:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 536:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 537:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 538:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 539:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 540:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 541:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 542:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 543:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 544:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 545:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 546:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 547:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 548:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 549:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 550:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 551:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 552:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 553:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 554:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 555:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 556:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 557:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 558:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 559:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 560:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 562:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 563:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 564:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 566:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 567:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 568:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 569:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 570:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 571:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 572:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 573:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 574:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 575:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 576:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 577:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 578:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 579:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 580:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 581:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 582:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 583:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 584:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 585:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 586:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 587:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 588:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 589:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 590:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 591:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 592:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 593:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 594:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 595:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 596:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 597:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 598:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 599:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 600:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 601:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 602:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 603:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 604:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 605:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 606:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 607:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 608:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 609:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 610:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 611:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 612:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 613:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 614:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 615:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 616:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 617:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 619:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 620:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 621:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 622:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 624:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 625:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 626:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 627:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 628:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 629:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 630:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 631:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 632:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 633:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 634:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 635:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 636:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 637:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 638:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 639:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 640:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 641:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 642:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 643:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 644:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 645:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 646:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 647:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 648:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 649:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 650:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 651:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 652:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 653:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 654:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 655:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 656:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 657:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 658:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 659:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 660:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 661:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 662:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 663:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 664:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 665:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 666:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 667:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 668:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 669:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 670:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 674:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 675:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 676:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 677:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 678:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 679:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 680:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 681:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 683:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 684:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 685:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 686:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 687:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 688:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 689:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 690:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 691:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 692:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 693:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 694:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 695:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 696:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 697:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 698:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 699:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 700:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 701:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 703:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 704:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 705:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 706:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 707:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 708:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 709:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 710:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 711:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 712:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 713:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 714:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 715:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 716:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 717:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 718:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 719:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 720:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 721:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 722:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 723:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 724:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 725:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 726:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 727:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 728:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 729:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 730:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 731:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 732:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 733:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 734:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 735:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 736:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 737:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 738:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 739:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 740:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 741:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 742:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 744:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 745:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 746:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 747:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 748:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 749:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 750:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 751:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 752:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 753:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 754:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 755:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 756:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 757:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 758:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 759:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 760:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 761:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 762:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 763:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 764:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 765:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 766:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 767:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 768:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 769:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 770:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 771:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 772:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 773:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 774:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 775:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 776:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 777:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 778:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 780:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 781:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 782:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 783:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 784:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 785:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 786:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 787:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 788:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 789:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 790:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 791:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 792:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 793:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 794:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 795:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 796:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 797:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 798:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 799:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 800:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 801:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 802:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 803:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 804:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 805:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 806:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 807:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 808:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 809:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 810:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 811:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 812:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 816:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 817:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 818:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 819:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 820:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 821:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 822:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 823:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 824:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 825:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 834:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 835:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 838:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 840:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 842:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 852:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 853:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 854:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 856:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 857:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 858:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 859:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 860:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 861:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 862:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 863:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 864:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 865:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 866:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 867:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 868:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 869:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 870:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 871:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 872:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 875:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 877:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 879:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 886:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 887:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 888:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 890:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 893:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 895:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 896:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 897:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 898:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 899:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 900:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 901:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 902:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 903:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 904:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 905:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 906:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 907:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 908:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 909:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 910:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 911:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 912:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 913:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 914:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 915:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 916:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 917:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 918:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 919:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 920:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 921:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 922:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 923:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 924:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 925:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 926:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 927:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 928:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 929:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 930:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 931:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 932:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 933:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 934:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 935:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 936:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 937:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 938:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 939:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 940:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 941:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 942:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 943:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 944:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 945:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 946:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 947:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 950:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 951:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 952:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 953:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 954:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 955:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 956:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 957:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 958:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 959:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 960:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 961:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 962:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 963:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 964:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 965:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 966:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 967:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 968:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 969:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 970:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 971:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 972:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 973:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 974:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 975:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 976:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 977:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 978:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 979:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 980:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 981:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 982:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 983:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
 984:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
 985:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 986:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 987:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 988:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
 989:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
 990:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 991:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 992:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 993:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
 994:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 995:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
 996:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 997:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
 998:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
 999:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1000:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1001:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1002:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1003:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1004:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1005:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1006:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1007:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1008:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1009:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1010:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1011:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1012:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1013:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1014:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1015:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1016:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1017:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1018:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1019:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1020:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1021:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1022:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1023:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1024:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1025:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1026:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1027:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1028:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1029:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1030:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1031:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1032:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1033:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1034:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1035:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1036:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1037:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1038:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1039:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1040:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1041:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1042:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1043:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1044:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1045:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1046:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
  25              	 .loc 1 1046 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
1047:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
  40              	 .loc 1 1047 0
  41 000a 7B68     	 ldr r3,[r7,#4]
  42 000c 1A6C     	 ldr r2,[r3,#64]
  43 000e 3B68     	 ldr r3,[r7]
  44 0010 1A43     	 orr r2,r3
  45 0012 7B68     	 ldr r3,[r7,#4]
  46 0014 1A64     	 str r2,[r3,#64]
1048:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
  47              	 .loc 1 1048 0
  48 0016 BD46     	 mov sp,r7
  49 0018 02B0     	 add sp,sp,#8
  50              	 
  51 001a 80BD     	 pop {r7,pc}
  52              	 .cfi_endproc
  53              	.LFE69:
  55              	 .section .text.XMC_USIC_CH_DisableEvent,"ax",%progbits
  56              	 .align 2
  57              	 .code 16
  58              	 .thumb_func
  60              	XMC_USIC_CH_DisableEvent:
  61              	.LFB70:
1049:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1050:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1051:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1052:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1053:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1054:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1055:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1056:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1057:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1058:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1059:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1060:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1061:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1062:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1063:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1064:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1065:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
1066:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1067:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
  62              	 .loc 1 1067 0
  63              	 .cfi_startproc
  64 0000 80B5     	 push {r7,lr}
  65              	.LCFI3:
  66              	 .cfi_def_cfa_offset 8
  67              	 .cfi_offset 7,-8
  68              	 .cfi_offset 14,-4
  69 0002 82B0     	 sub sp,sp,#8
  70              	.LCFI4:
  71              	 .cfi_def_cfa_offset 16
  72 0004 00AF     	 add r7,sp,#0
  73              	.LCFI5:
  74              	 .cfi_def_cfa_register 7
  75 0006 7860     	 str r0,[r7,#4]
  76 0008 3960     	 str r1,[r7]
1068:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
  77              	 .loc 1 1068 0
  78 000a 7B68     	 ldr r3,[r7,#4]
  79 000c 1B6C     	 ldr r3,[r3,#64]
  80 000e 3A68     	 ldr r2,[r7]
  81 0010 D243     	 mvn r2,r2
  82 0012 1A40     	 and r2,r3
  83 0014 7B68     	 ldr r3,[r7,#4]
  84 0016 1A64     	 str r2,[r3,#64]
1069:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
  85              	 .loc 1 1069 0
  86 0018 BD46     	 mov sp,r7
  87 001a 02B0     	 add sp,sp,#8
  88              	 
  89 001c 80BD     	 pop {r7,pc}
  90              	 .cfi_endproc
  91              	.LFE70:
  93 001e C046     	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  94              	 .align 2
  95              	 .code 16
  96              	 .thumb_func
  98              	XMC_USIC_CH_GetTransmitBufferStatus:
  99              	.LFB71:
1070:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1071:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1072:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1073:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1074:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1075:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1076:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1077:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1078:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1079:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1080:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1081:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1082:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1083:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1084:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1085:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1086:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1087:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1088:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1089:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1090:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1091:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1092:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1093:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1094:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1095:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1098:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1099:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1100:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1101:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1102:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1103:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1104:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1105:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1106:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1107:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1108:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1109:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1110:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1111:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 100              	 .loc 1 1111 0
 101              	 .cfi_startproc
 102 0000 80B5     	 push {r7,lr}
 103              	.LCFI6:
 104              	 .cfi_def_cfa_offset 8
 105              	 .cfi_offset 7,-8
 106              	 .cfi_offset 14,-4
 107 0002 82B0     	 sub sp,sp,#8
 108              	.LCFI7:
 109              	 .cfi_def_cfa_offset 16
 110 0004 00AF     	 add r7,sp,#0
 111              	.LCFI8:
 112              	 .cfi_def_cfa_register 7
 113 0006 7860     	 str r0,[r7,#4]
1112:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 114              	 .loc 1 1112 0
 115 0008 7B68     	 ldr r3,[r7,#4]
 116 000a 9B6B     	 ldr r3,[r3,#56]
 117 000c DBB2     	 uxtb r3,r3
 118 000e 7F22     	 mov r2,#127
 119 0010 9343     	 bic r3,r2
 120 0012 DBB2     	 uxtb r3,r3
1113:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 121              	 .loc 1 1113 0
 122 0014 181C     	 mov r0,r3
 123 0016 BD46     	 mov sp,r7
 124 0018 02B0     	 add sp,sp,#8
 125              	 
 126 001a 80BD     	 pop {r7,pc}
 127              	 .cfi_endproc
 128              	.LFE71:
 130              	 .section .text.XMC_USIC_CH_TriggerServiceRequest,"ax",%progbits
 131              	 .align 2
 132              	 .code 16
 133              	 .thumb_func
 135              	XMC_USIC_CH_TriggerServiceRequest:
 136              	.LFB79:
1114:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1115:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1116:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1117:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1118:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1119:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1120:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1121:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1122:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1123:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1124:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1125:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1126:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1127:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1128:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1129:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1130:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1131:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1132:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1133:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1134:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1135:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1136:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1137:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1138:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1139:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1140:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1141:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1142:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1143:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1144:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1145:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1146:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1147:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1148:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1149:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1150:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1151:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1152:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1153:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1154:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1155:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1156:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1157:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1158:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1159:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1160:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1161:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1162:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1163:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1164:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1165:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1166:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1167:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1168:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1169:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1170:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1171:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1172:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1173:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1174:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1175:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1176:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1177:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1178:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1179:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1180:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1181:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1182:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1183:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1184:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1185:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1186:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1187:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1188:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1189:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1190:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1191:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1192:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1193:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1194:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1195:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1196:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1197:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1198:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1199:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1200:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1201:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1202:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1203:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1204:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1205:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1206:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1207:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1208:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1209:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1210:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1211:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1212:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1213:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1214:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1215:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1216:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1217:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1218:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1219:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1220:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1221:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1222:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1223:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1224:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1225:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1226:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1227:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1228:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1229:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1230:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1231:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1232:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1233:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1234:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1235:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1236:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1237:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1238:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1239:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1240:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1241:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1242:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1243:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1244:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1245:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1246:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1247:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1248:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1249:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1250:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1251:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1252:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1253:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1255:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1256:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1257:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1258:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1259:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1260:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1261:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1262:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1263:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1264:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1265:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1266:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1267:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1268:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1269:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1270:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1271:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1272:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1273:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1274:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1275:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1276:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1277:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 137              	 .loc 1 1277 0
 138              	 .cfi_startproc
 139 0000 80B5     	 push {r7,lr}
 140              	.LCFI9:
 141              	 .cfi_def_cfa_offset 8
 142              	 .cfi_offset 7,-8
 143              	 .cfi_offset 14,-4
 144 0002 82B0     	 sub sp,sp,#8
 145              	.LCFI10:
 146              	 .cfi_def_cfa_offset 16
 147 0004 00AF     	 add r7,sp,#0
 148              	.LCFI11:
 149              	 .cfi_def_cfa_register 7
 150 0006 7860     	 str r0,[r7,#4]
 151 0008 3960     	 str r1,[r7]
1278:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 152              	 .loc 1 1278 0
 153 000a 3B68     	 ldr r3,[r7]
 154 000c 8022     	 mov r2,#128
 155 000e 5202     	 lsl r2,r2,#9
 156 0010 9A40     	 lsl r2,r2,r3
 157 0012 7B68     	 ldr r3,[r7,#4]
 158 0014 9A66     	 str r2,[r3,#104]
1279:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 159              	 .loc 1 1279 0
 160 0016 BD46     	 mov sp,r7
 161 0018 02B0     	 add sp,sp,#8
 162              	 
 163 001a 80BD     	 pop {r7,pc}
 164              	 .cfi_endproc
 165              	.LFE79:
 167              	 .section .text.XMC_USIC_CH_TXFIFO_EnableEvent,"ax",%progbits
 168              	 .align 2
 169              	 .code 16
 170              	 .thumb_func
 172              	XMC_USIC_CH_TXFIFO_EnableEvent:
 173              	.LFB82:
1280:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1281:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1282:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1283:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1284:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1285:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1286:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1287:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1288:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1290:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1291:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1292:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1293:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1294:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1295:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1296:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1297:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1298:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1299:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1300:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1301:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1302:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1303:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1304:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1305:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1306:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1307:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1309:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1310:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1311:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1312:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1313:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1314:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1315:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1316:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1317:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1318:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1319:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1320:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1321:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1322:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1323:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1324:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1327:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1328:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1329:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1330:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1331:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1332:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1333:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1334:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1335:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1336:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1337:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1338:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1339:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1340:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1341:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1342:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1344:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1345:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1346:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1347:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1348:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1349:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1350:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1351:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1352:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1353:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1354:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1355:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1356:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1357:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1358:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1359:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1361:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1362:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1363:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1364:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1366:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1367:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1368:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1369:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1370:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1371:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1376:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1377:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1378:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1380:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1381:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1382:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1383:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1384:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1385:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1386:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1387:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1388:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1389:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1390:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1391:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 174              	 .loc 1 1391 0
 175              	 .cfi_startproc
 176 0000 80B5     	 push {r7,lr}
 177              	.LCFI12:
 178              	 .cfi_def_cfa_offset 8
 179              	 .cfi_offset 7,-8
 180              	 .cfi_offset 14,-4
 181 0002 82B0     	 sub sp,sp,#8
 182              	.LCFI13:
 183              	 .cfi_def_cfa_offset 16
 184 0004 00AF     	 add r7,sp,#0
 185              	.LCFI14:
 186              	 .cfi_def_cfa_register 7
 187 0006 7860     	 str r0,[r7,#4]
 188 0008 3960     	 str r1,[r7]
1392:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
 189              	 .loc 1 1392 0
 190 000a 7A68     	 ldr r2,[r7,#4]
 191 000c 8423     	 mov r3,#132
 192 000e 5B00     	 lsl r3,r3,#1
 193 0010 D258     	 ldr r2,[r2,r3]
 194 0012 3B68     	 ldr r3,[r7]
 195 0014 1A43     	 orr r2,r3
 196 0016 111C     	 mov r1,r2
 197 0018 7A68     	 ldr r2,[r7,#4]
 198 001a 8423     	 mov r3,#132
 199 001c 5B00     	 lsl r3,r3,#1
 200 001e D150     	 str r1,[r2,r3]
1393:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 201              	 .loc 1 1393 0
 202 0020 BD46     	 mov sp,r7
 203 0022 02B0     	 add sp,sp,#8
 204              	 
 205 0024 80BD     	 pop {r7,pc}
 206              	 .cfi_endproc
 207              	.LFE82:
 209 0026 C046     	 .section .text.XMC_USIC_CH_TXFIFO_DisableEvent,"ax",%progbits
 210              	 .align 2
 211              	 .code 16
 212              	 .thumb_func
 214              	XMC_USIC_CH_TXFIFO_DisableEvent:
 215              	.LFB83:
1394:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1395:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1396:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1397:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1398:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1399:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1400:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1401:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1402:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1403:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1404:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1405:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1406:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1407:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1408:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1409:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1410:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1411:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1412:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1413:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 216              	 .loc 1 1413 0
 217              	 .cfi_startproc
 218 0000 80B5     	 push {r7,lr}
 219              	.LCFI15:
 220              	 .cfi_def_cfa_offset 8
 221              	 .cfi_offset 7,-8
 222              	 .cfi_offset 14,-4
 223 0002 82B0     	 sub sp,sp,#8
 224              	.LCFI16:
 225              	 .cfi_def_cfa_offset 16
 226 0004 00AF     	 add r7,sp,#0
 227              	.LCFI17:
 228              	 .cfi_def_cfa_register 7
 229 0006 7860     	 str r0,[r7,#4]
 230 0008 3960     	 str r1,[r7]
1414:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
 231              	 .loc 1 1414 0
 232 000a 7A68     	 ldr r2,[r7,#4]
 233 000c 8423     	 mov r3,#132
 234 000e 5B00     	 lsl r3,r3,#1
 235 0010 D358     	 ldr r3,[r2,r3]
 236 0012 3A68     	 ldr r2,[r7]
 237 0014 D243     	 mvn r2,r2
 238 0016 1A40     	 and r2,r3
 239 0018 111C     	 mov r1,r2
 240 001a 7A68     	 ldr r2,[r7,#4]
 241 001c 8423     	 mov r3,#132
 242 001e 5B00     	 lsl r3,r3,#1
 243 0020 D150     	 str r1,[r2,r3]
1415:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 244              	 .loc 1 1415 0
 245 0022 BD46     	 mov sp,r7
 246 0024 02B0     	 add sp,sp,#8
 247              	 
 248 0026 80BD     	 pop {r7,pc}
 249              	 .cfi_endproc
 250              	.LFE83:
 252              	 .section .text.XMC_USIC_CH_TXFIFO_Flush,"ax",%progbits
 253              	 .align 2
 254              	 .code 16
 255              	 .thumb_func
 257              	XMC_USIC_CH_TXFIFO_Flush:
 258              	.LFB87:
1416:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1417:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1418:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1419:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1420:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1421:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1422:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1423:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1424:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1425:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1426:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1427:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1428:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1429:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1430:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1431:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1432:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1433:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1434:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1435:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1436:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1437:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1438:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1439:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1440:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1441:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1442:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1443:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1444:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1445:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1446:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1447:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1448:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1449:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1450:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1451:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1452:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1453:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1454:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1455:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1456:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1457:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1458:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1459:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1460:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1461:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1462:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1463:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1464:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1465:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1466:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1467:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1468:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1469:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1470:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1471:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1472:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1473:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1474:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1475:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1476:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1477:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1478:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1479:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1480:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1481:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1482:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1483:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1484:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1485:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1486:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1487:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1488:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1489:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1490:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1492:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1493:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1494:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1495:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1496:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1497:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1498:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1499:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1500:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1501:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1502:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1503:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1504:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1505:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1506:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1507:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1508:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1509:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1510:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1511:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1512:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1513:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1514:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1515:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1516:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1517:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1518:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1519:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1520:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1521:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1522:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1524:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1525:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1526:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 259              	 .loc 1 1526 0
 260              	 .cfi_startproc
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI18:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI19:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI20:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
1527:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 273              	 .loc 1 1527 0
 274 0008 7A68     	 ldr r2,[r7,#4]
 275 000a 8C23     	 mov r3,#140
 276 000c 5B00     	 lsl r3,r3,#1
 277 000e 8021     	 mov r1,#128
 278 0010 0902     	 lsl r1,r1,#8
 279 0012 D150     	 str r1,[r2,r3]
1528:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 280              	 .loc 1 1528 0
 281 0014 BD46     	 mov sp,r7
 282 0016 02B0     	 add sp,sp,#8
 283              	 
 284 0018 80BD     	 pop {r7,pc}
 285              	 .cfi_endproc
 286              	.LFE87:
 288 001a C046     	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
 289              	 .align 2
 290              	 .code 16
 291              	 .thumb_func
 293              	XMC_USIC_CH_TXFIFO_IsFull:
 294              	.LFB88:
1529:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1530:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1531:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1534:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1535:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1536:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1537:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1538:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1539:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1540:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1541:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1542:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1543:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1544:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1545:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 295              	 .loc 1 1545 0
 296              	 .cfi_startproc
 297 0000 80B5     	 push {r7,lr}
 298              	.LCFI21:
 299              	 .cfi_def_cfa_offset 8
 300              	 .cfi_offset 7,-8
 301              	 .cfi_offset 14,-4
 302 0002 82B0     	 sub sp,sp,#8
 303              	.LCFI22:
 304              	 .cfi_def_cfa_offset 16
 305 0004 00AF     	 add r7,sp,#0
 306              	.LCFI23:
 307              	 .cfi_def_cfa_register 7
 308 0006 7860     	 str r0,[r7,#4]
1546:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 309              	 .loc 1 1546 0
 310 0008 7A68     	 ldr r2,[r7,#4]
 311 000a 8A23     	 mov r3,#138
 312 000c 5B00     	 lsl r3,r3,#1
 313 000e D258     	 ldr r2,[r2,r3]
 314 0010 8023     	 mov r3,#128
 315 0012 5B01     	 lsl r3,r3,#5
 316 0014 1340     	 and r3,r2
 317 0016 5A1E     	 sub r2,r3,#1
 318 0018 9341     	 sbc r3,r3,r2
 319 001a DBB2     	 uxtb r3,r3
1547:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 320              	 .loc 1 1547 0
 321 001c 181C     	 mov r0,r3
 322 001e BD46     	 mov sp,r7
 323 0020 02B0     	 add sp,sp,#8
 324              	 
 325 0022 80BD     	 pop {r7,pc}
 326              	 .cfi_endproc
 327              	.LFE88:
 329              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
 330              	 .align 2
 331              	 .code 16
 332              	 .thumb_func
 334              	XMC_USIC_CH_TXFIFO_IsEmpty:
 335              	.LFB89:
1548:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1549:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1550:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1553:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1554:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1557:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1558:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1559:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1560:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1561:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1562:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1563:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1564:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1565:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 336              	 .loc 1 1565 0
 337              	 .cfi_startproc
 338 0000 80B5     	 push {r7,lr}
 339              	.LCFI24:
 340              	 .cfi_def_cfa_offset 8
 341              	 .cfi_offset 7,-8
 342              	 .cfi_offset 14,-4
 343 0002 82B0     	 sub sp,sp,#8
 344              	.LCFI25:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI26:
 348              	 .cfi_def_cfa_register 7
 349 0006 7860     	 str r0,[r7,#4]
1566:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 350              	 .loc 1 1566 0
 351 0008 7A68     	 ldr r2,[r7,#4]
 352 000a 8A23     	 mov r3,#138
 353 000c 5B00     	 lsl r3,r3,#1
 354 000e D258     	 ldr r2,[r2,r3]
 355 0010 8023     	 mov r3,#128
 356 0012 1B01     	 lsl r3,r3,#4
 357 0014 1340     	 and r3,r2
 358 0016 5A1E     	 sub r2,r3,#1
 359 0018 9341     	 sbc r3,r3,r2
 360 001a DBB2     	 uxtb r3,r3
1567:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 361              	 .loc 1 1567 0
 362 001c 181C     	 mov r0,r3
 363 001e BD46     	 mov sp,r7
 364 0020 02B0     	 add sp,sp,#8
 365              	 
 366 0022 80BD     	 pop {r7,pc}
 367              	 .cfi_endproc
 368              	.LFE89:
 370              	 .section .text.XMC_USIC_CH_RXFIFO_EnableEvent,"ax",%progbits
 371              	 .align 2
 372              	 .code 16
 373              	 .thumb_func
 375              	XMC_USIC_CH_RXFIFO_EnableEvent:
 376              	.LFB93:
1568:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1569:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1570:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1571:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1572:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1573:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1574:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1575:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1576:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1577:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1578:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1579:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1580:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1581:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1582:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1583:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1584:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1585:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1586:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1587:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1588:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1589:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1590:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1591:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1592:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1593:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1594:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1595:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1596:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1597:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1598:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1599:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1600:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1601:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1602:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1603:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1604:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1605:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1606:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1607:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1608:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1609:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1610:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1611:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1612:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1615:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1616:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1617:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1618:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1619:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1620:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1621:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1622:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1623:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1624:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1625:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1626:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1627:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1628:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1629:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1630:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1631:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1632:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1633:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1634:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1635:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1636:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1639:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1640:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1641:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1642:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1643:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1644:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1645:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1646:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1647:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1648:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1649:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1650:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1651:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1652:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1653:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1654:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1655:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1656:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** */
1657:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1658:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1659:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1660:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1661:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1662:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1663:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1666:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1667:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1668:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1669:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1670:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1671:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1672:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1673:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1674:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1675:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1676:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1677:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1678:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1679:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1680:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1681:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1682:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1683:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1684:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1687:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1688:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1689:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1690:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1691:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1692:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1693:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1694:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1695:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1696:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1697:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1698:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1700:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1701:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1702:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 377              	 .loc 1 1702 0
 378              	 .cfi_startproc
 379 0000 80B5     	 push {r7,lr}
 380              	.LCFI27:
 381              	 .cfi_def_cfa_offset 8
 382              	 .cfi_offset 7,-8
 383              	 .cfi_offset 14,-4
 384 0002 82B0     	 sub sp,sp,#8
 385              	.LCFI28:
 386              	 .cfi_def_cfa_offset 16
 387 0004 00AF     	 add r7,sp,#0
 388              	.LCFI29:
 389              	 .cfi_def_cfa_register 7
 390 0006 7860     	 str r0,[r7,#4]
 391 0008 3960     	 str r1,[r7]
1703:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
 392              	 .loc 1 1703 0
 393 000a 7A68     	 ldr r2,[r7,#4]
 394 000c 8623     	 mov r3,#134
 395 000e 5B00     	 lsl r3,r3,#1
 396 0010 D258     	 ldr r2,[r2,r3]
 397 0012 3B68     	 ldr r3,[r7]
 398 0014 1A43     	 orr r2,r3
 399 0016 111C     	 mov r1,r2
 400 0018 7A68     	 ldr r2,[r7,#4]
 401 001a 8623     	 mov r3,#134
 402 001c 5B00     	 lsl r3,r3,#1
 403 001e D150     	 str r1,[r2,r3]
1704:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 404              	 .loc 1 1704 0
 405 0020 BD46     	 mov sp,r7
 406 0022 02B0     	 add sp,sp,#8
 407              	 
 408 0024 80BD     	 pop {r7,pc}
 409              	 .cfi_endproc
 410              	.LFE93:
 412 0026 C046     	 .section .text.XMC_USIC_CH_RXFIFO_DisableEvent,"ax",%progbits
 413              	 .align 2
 414              	 .code 16
 415              	 .thumb_func
 417              	XMC_USIC_CH_RXFIFO_DisableEvent:
 418              	.LFB94:
1705:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1706:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1711:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1712:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1713:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1714:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1715:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1716:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1717:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1718:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1719:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1720:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1721:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1722:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1723:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1724:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1725:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1726:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 419              	 .loc 1 1726 0
 420              	 .cfi_startproc
 421 0000 80B5     	 push {r7,lr}
 422              	.LCFI30:
 423              	 .cfi_def_cfa_offset 8
 424              	 .cfi_offset 7,-8
 425              	 .cfi_offset 14,-4
 426 0002 82B0     	 sub sp,sp,#8
 427              	.LCFI31:
 428              	 .cfi_def_cfa_offset 16
 429 0004 00AF     	 add r7,sp,#0
 430              	.LCFI32:
 431              	 .cfi_def_cfa_register 7
 432 0006 7860     	 str r0,[r7,#4]
 433 0008 3960     	 str r1,[r7]
1727:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
 434              	 .loc 1 1727 0
 435 000a 7A68     	 ldr r2,[r7,#4]
 436 000c 8623     	 mov r3,#134
 437 000e 5B00     	 lsl r3,r3,#1
 438 0010 D358     	 ldr r3,[r2,r3]
 439 0012 3A68     	 ldr r2,[r7]
 440 0014 D243     	 mvn r2,r2
 441 0016 1A40     	 and r2,r3
 442 0018 111C     	 mov r1,r2
 443 001a 7A68     	 ldr r2,[r7,#4]
 444 001c 8623     	 mov r3,#134
 445 001e 5B00     	 lsl r3,r3,#1
 446 0020 D150     	 str r1,[r2,r3]
1728:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 447              	 .loc 1 1728 0
 448 0022 BD46     	 mov sp,r7
 449 0024 02B0     	 add sp,sp,#8
 450              	 
 451 0026 80BD     	 pop {r7,pc}
 452              	 .cfi_endproc
 453              	.LFE94:
 455              	 .section .text.XMC_USIC_CH_RXFIFO_Flush,"ax",%progbits
 456              	 .align 2
 457              	 .code 16
 458              	 .thumb_func
 460              	XMC_USIC_CH_RXFIFO_Flush:
 461              	.LFB96:
1729:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1730:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1731:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1732:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1733:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1734:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1735:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1736:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1737:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1738:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1739:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1740:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1741:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1742:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1743:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1744:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1745:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1746:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1747:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1748:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1749:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1750:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1751:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1752:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1753:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1754:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1755:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1756:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1757:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1758:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1759:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1760:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1761:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1762:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1763:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1764:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1766:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1767:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1768:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1769:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1770:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1771:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1773:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1774:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1775:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1776:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1777:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1778:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1779:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1780:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1783:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1784:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1785:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1786:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1787:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1788:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1789:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1790:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1791:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1792:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 462              	 .loc 1 1792 0
 463              	 .cfi_startproc
 464 0000 80B5     	 push {r7,lr}
 465              	.LCFI33:
 466              	 .cfi_def_cfa_offset 8
 467              	 .cfi_offset 7,-8
 468              	 .cfi_offset 14,-4
 469 0002 82B0     	 sub sp,sp,#8
 470              	.LCFI34:
 471              	 .cfi_def_cfa_offset 16
 472 0004 00AF     	 add r7,sp,#0
 473              	.LCFI35:
 474              	 .cfi_def_cfa_register 7
 475 0006 7860     	 str r0,[r7,#4]
1793:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 476              	 .loc 1 1793 0
 477 0008 7A68     	 ldr r2,[r7,#4]
 478 000a 8C23     	 mov r3,#140
 479 000c 5B00     	 lsl r3,r3,#1
 480 000e 8021     	 mov r1,#128
 481 0010 C901     	 lsl r1,r1,#7
 482 0012 D150     	 str r1,[r2,r3]
1794:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 483              	 .loc 1 1794 0
 484 0014 BD46     	 mov sp,r7
 485 0016 02B0     	 add sp,sp,#8
 486              	 
 487 0018 80BD     	 pop {r7,pc}
 488              	 .cfi_endproc
 489              	.LFE96:
 491 001a C046     	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 492              	 .align 2
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_USIC_CH_RXFIFO_IsEmpty:
 497              	.LFB98:
1795:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1796:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1797:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1798:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1799:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1800:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1801:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1802:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1803:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1804:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1805:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1806:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1807:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1808:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1809:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1810:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1811:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
1812:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1813:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
1814:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** 
1815:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** /**
1816:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1817:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1818:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1819:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1820:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  *
1821:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1822:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1823:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1824:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1825:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1826:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1827:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1828:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1829:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****  */
1830:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1831:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** {
 498              	 .loc 1 1831 0
 499              	 .cfi_startproc
 500 0000 80B5     	 push {r7,lr}
 501              	.LCFI36:
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 7,-8
 504              	 .cfi_offset 14,-4
 505 0002 82B0     	 sub sp,sp,#8
 506              	.LCFI37:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI38:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
1832:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 512              	 .loc 1 1832 0
 513 0008 7A68     	 ldr r2,[r7,#4]
 514 000a 8A23     	 mov r3,#138
 515 000c 5B00     	 lsl r3,r3,#1
 516 000e D358     	 ldr r3,[r2,r3]
 517 0010 0822     	 mov r2,#8
 518 0012 1340     	 and r3,r2
 519 0014 5A1E     	 sub r2,r3,#1
 520 0016 9341     	 sbc r3,r3,r2
 521 0018 DBB2     	 uxtb r3,r3
1833:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_usic.h **** }
 522              	 .loc 1 1833 0
 523 001a 181C     	 mov r0,r3
 524 001c BD46     	 mov sp,r7
 525 001e 02B0     	 add sp,sp,#8
 526              	 
 527 0020 80BD     	 pop {r7,pc}
 528              	 .cfi_endproc
 529              	.LFE98:
 531 0022 C046     	 .section .text.XMC_I2C_CH_SetInterruptNodePointer,"ax",%progbits
 532              	 .align 2
 533              	 .code 16
 534              	 .thumb_func
 536              	XMC_I2C_CH_SetInterruptNodePointer:
 537              	.LFB108:
 538              	 .file 2 "C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2016-05-20
   4:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
   7:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.                        
  11:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                             
  12:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * following conditions are met:   
  14:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  15:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer.                        
  17:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  18:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  21:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  24:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  32:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
  35:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  37:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  38:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  39:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  40:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  41:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *      
  42:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  43:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  44:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  46:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  47:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  49:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  50:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  52:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  53:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  59:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  60:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  61:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  62:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  63:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  68:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  69:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  70:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  71:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  72:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  73:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond 
  74:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  75:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  76:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
  77:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  78:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  79:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
  80:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
  81:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
  82:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
  83:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
  84:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
  85:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
  86:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  87:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  88:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
  89:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  90:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
  91:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  92:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
  93:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
  94:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  95:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
  96:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
  97:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
  98:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
  99:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 100:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 101:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 102:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 103:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 104:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 105:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 106:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 107:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 108:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 109:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 110:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 111:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 112:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 113:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 114:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 115:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 116:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 117:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 118:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 119:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 120:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 121:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 122:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 123:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 124:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 125:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 126:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 127:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 128:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 129:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 130:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 131:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 132:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 133:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 134:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 135:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 136:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 137:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 138:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 139:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 140:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 141:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 142:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 143:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 144:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 145:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 146:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 147:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 148:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 149:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 150:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 151:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 152:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 153:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 154:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 155:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 156:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 157:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 158:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 159:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 160:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 161:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 162:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 163:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 164:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 165:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 166:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 167:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 168:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 169:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 170:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 171:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 172:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 173:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 174:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 175:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 176:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 177:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 178:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 179:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 180:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 181:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 182:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 183:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 184:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 185:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 186:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 187:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 188:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 189:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 190:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 191:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 192:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 193:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 194:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 195:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 196:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 197:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 198:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 199:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 200:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 201:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 202:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 203:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 204:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 205:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 206:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 207:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 208:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 209:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 210:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 211:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 212:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 213:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 214:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 215:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 216:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 217:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 218:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 219:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 220:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 221:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 222:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 223:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 224:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 225:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 226:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 227:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 228:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 229:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 230:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 231:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 232:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 233:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 234:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 235:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 236:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 237:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 238:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 239:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 240:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 241:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 242:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 243:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 244:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 245:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 246:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 247:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 248:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 249:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 250:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 251:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 252:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 253:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 254:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 255:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address 
 256:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 257:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 258:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 259:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 260:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 261:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 262:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 263:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 264:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 265:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 266:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 267:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 268:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 269:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 270:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 271:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 272:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 273:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 274:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 275:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 276:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 277:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 278:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 279:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 280:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 281:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 282:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 283:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 284:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 285:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 286:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 287:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 288:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 289:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 290:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 291:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 292:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 293:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 294:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 295:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 296:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 297:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 298:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 299:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 300:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 301:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 302:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 303:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 304:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 305:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 306:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 307:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 308:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 309:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 310:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 311:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 312:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 313:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 314:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 315:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 316:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 317:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 318:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 319:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 320:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 321:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 322:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 323:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 324:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 325:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 326:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 327:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 328:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 329:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 330:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 331:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 332:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 333:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 334:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 335:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 336:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 337:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 338:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 339:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 340:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 341:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 342:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 343:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 344:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 345:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 346:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 347:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 348:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 349:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 350:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 351:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 352:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 353:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 354:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 355:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 356:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 357:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 358:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                         const uint8_t service_request)
 359:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 539              	 .loc 2 359 0
 540              	 .cfi_startproc
 541 0000 80B5     	 push {r7,lr}
 542              	.LCFI39:
 543              	 .cfi_def_cfa_offset 8
 544              	 .cfi_offset 7,-8
 545              	 .cfi_offset 14,-4
 546 0002 82B0     	 sub sp,sp,#8
 547              	.LCFI40:
 548              	 .cfi_def_cfa_offset 16
 549 0004 00AF     	 add r7,sp,#0
 550              	.LCFI41:
 551              	 .cfi_def_cfa_register 7
 552 0006 7860     	 str r0,[r7,#4]
 553 0008 0A1C     	 mov r2,r1
 554 000a FB1C     	 add r3,r7,#3
 555 000c 1A70     	 strb r2,[r3]
 360:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 556              	 .loc 2 360 0
 557 000e FB1C     	 add r3,r7,#3
 558 0010 1B78     	 ldrb r3,[r3]
 559 0012 7A68     	 ldr r2,[r7,#4]
 560 0014 101C     	 mov r0,r2
 561 0016 1021     	 mov r1,#16
 562 0018 1A1C     	 mov r2,r3
 563 001a FFF7FEFF 	 bl XMC_USIC_CH_SetInterruptNodePointer
 361:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 564              	 .loc 2 361 0
 565 001e BD46     	 mov sp,r7
 566 0020 02B0     	 add sp,sp,#8
 567              	 
 568 0022 80BD     	 pop {r7,pc}
 569              	 .cfi_endproc
 570              	.LFE108:
 572              	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 573              	 .align 2
 574              	 .code 16
 575              	 .thumb_func
 577              	XMC_I2C_CH_GetStatusFlag:
 578              	.LFB113:
 362:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 363:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 364:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 365:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 366:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 367:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 368:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 369:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 370:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 371:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 372:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 373:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 374:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 375:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 376:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 377:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 378:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 379:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 380:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 381:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 382:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 383:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 384:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 385:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const uint32_t service_request)
 386:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 387:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 388:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 		                                       (uint32_t)service_request);
 389:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 390:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 391:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 392:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 393:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 394:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 395:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 396:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 397:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 398:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 399:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 400:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 401:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 402:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 403:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 404:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 405:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 406:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 407:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 408:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 409:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 410:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 411:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 412:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 413:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 414:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 415:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 416:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 417:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 418:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 419:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 420:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 421:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 422:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 423:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 424:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 425:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 426:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 427:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 428:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 429:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 430:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 431:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 432:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 433:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 434:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 435:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 436:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 437:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 438:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 439:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 440:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 441:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 442:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 443:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 444:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 445:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 446:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 447:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 448:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 449:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 450:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 451:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 452:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 453:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 454:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 455:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 456:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 457:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 458:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 459:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 460:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 461:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 462:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 463:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 464:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 465:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 466:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 467:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 468:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 469:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 470:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 471:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 472:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 473:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 474:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 475:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 476:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 477:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 478:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 479:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 480:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 481:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 482:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 483:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 484:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 485:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 486:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 487:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 488:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 489:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 490:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 491:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 492:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 493:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 494:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 495:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 496:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 497:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 498:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 499:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 500:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 501:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 502:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 503:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 504:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 505:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 506:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 507:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 508:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 509:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 510:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 511:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 512:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 513:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 514:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 515:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 516:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 517:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 518:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 519:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 520:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 521:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 522:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 523:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 524:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 525:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 526:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 527:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 528:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 529:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 530:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 531:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 532:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 533:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 534:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 535:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 536:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 537:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 538:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 539:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 540:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 541:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 542:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 543:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 544:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 545:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 546:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 547:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 548:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 549:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 550:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 551:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 552:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 553:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 554:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 555:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 556:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 557:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 558:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 559:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 560:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 561:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 562:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 563:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 564:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 565:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 566:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 567:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 568:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 569:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 570:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 571:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 572:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 573:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 574:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 575:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 576:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 577:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 578:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 579:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 580:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 581:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 582:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 583:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 584:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 585:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 586:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 587:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 588:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 589:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 590:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 591:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 592:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 593:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 594:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 595:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 596:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 597:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 598:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 599:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 600:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 601:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 602:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 603:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 604:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 605:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 606:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 607:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 608:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 609:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 610:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 611:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 612:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 613:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 614:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 615:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 616:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 617:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 618:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 619:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 620:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 621:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 622:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 623:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 624:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 625:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 626:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 627:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 628:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 629:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 630:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 631:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 632:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 633:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 634:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 635:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 636:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 637:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 638:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 639:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 640:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 641:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 642:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 643:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 644:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 645:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 646:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 647:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 648:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 649:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 650:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 651:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 652:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 653:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 654:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 655:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 656:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 657:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 579              	 .loc 2 657 0
 580              	 .cfi_startproc
 581 0000 80B5     	 push {r7,lr}
 582              	.LCFI42:
 583              	 .cfi_def_cfa_offset 8
 584              	 .cfi_offset 7,-8
 585              	 .cfi_offset 14,-4
 586 0002 82B0     	 sub sp,sp,#8
 587              	.LCFI43:
 588              	 .cfi_def_cfa_offset 16
 589 0004 00AF     	 add r7,sp,#0
 590              	.LCFI44:
 591              	 .cfi_def_cfa_register 7
 592 0006 7860     	 str r0,[r7,#4]
 658:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 593              	 .loc 2 658 0
 594 0008 7B68     	 ldr r3,[r7,#4]
 595 000a 9B6C     	 ldr r3,[r3,#72]
 659:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 596              	 .loc 2 659 0
 597 000c 181C     	 mov r0,r3
 598 000e BD46     	 mov sp,r7
 599 0010 02B0     	 add sp,sp,#8
 600              	 
 601 0012 80BD     	 pop {r7,pc}
 602              	 .cfi_endproc
 603              	.LFE113:
 605              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 606              	 .align 2
 607              	 .code 16
 608              	 .thumb_func
 610              	XMC_I2C_CH_ClearStatusFlag:
 611              	.LFB114:
 660:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** 
 661:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 662:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 663:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 664:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 665:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 666:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 667:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 668:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 669:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 670:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 671:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 672:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 673:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** {
 612              	 .loc 2 673 0
 613              	 .cfi_startproc
 614 0000 80B5     	 push {r7,lr}
 615              	.LCFI45:
 616              	 .cfi_def_cfa_offset 8
 617              	 .cfi_offset 7,-8
 618              	 .cfi_offset 14,-4
 619 0002 82B0     	 sub sp,sp,#8
 620              	.LCFI46:
 621              	 .cfi_def_cfa_offset 16
 622 0004 00AF     	 add r7,sp,#0
 623              	.LCFI47:
 624              	 .cfi_def_cfa_register 7
 625 0006 7860     	 str r0,[r7,#4]
 626 0008 3960     	 str r1,[r7]
 674:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 627              	 .loc 2 674 0
 628 000a 7B68     	 ldr r3,[r7,#4]
 629 000c DA6C     	 ldr r2,[r3,#76]
 630 000e 3B68     	 ldr r3,[r7]
 631 0010 1A43     	 orr r2,r3
 632 0012 7B68     	 ldr r3,[r7,#4]
 633 0014 DA64     	 str r2,[r3,#76]
 675:C:/c_root/electronics/DAVE_work_2019/pocket-nim/Libraries/XMCLib/inc\xmc_i2c.h **** }
 634              	 .loc 2 675 0
 635 0016 BD46     	 mov sp,r7
 636 0018 02B0     	 add sp,sp,#8
 637              	 
 638 001a 80BD     	 pop {r7,pc}
 639              	 .cfi_endproc
 640              	.LFE114:
 642              	 .section .text.I2C_MASTER_SetRXFIFOTriggerLimit,"ax",%progbits
 643              	 .align 2
 644              	 .code 16
 645              	 .thumb_func
 647              	I2C_MASTER_SetRXFIFOTriggerLimit:
 648              	.LFB122:
 649              	 .file 3 "../Dave/Generated/I2C_MASTER/i2c_master.h"
   1:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @file i2c_master.h
   3:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @date 2015-10-20
   4:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * regenerated.
   8:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
   9:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
  10:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @cond
  11:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  12:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER v4.1.18 Configures USIC channel to transmit & receive data using I2C protocol.
  13:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  14:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  15:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * All rights reserved.
  16:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  17:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following conditions are met:
  19:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  20:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * disclaimer.
  22:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  23:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  26:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  29:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  37:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  40:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  41:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Change History
  42:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * --------------
  43:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  44:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-02-16:
  45:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Initial version<br>
  46:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  47:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-06-10:
  48:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  50:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-08-31:
  51:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - DMA support APIs added
  52:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-10-20:
  53:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Code snippets updated
  54:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2016-08-18:
  55:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcond
  57:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  58:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
  59:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  60:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_H
  61:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_H
  62:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  63:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  64:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  65:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  66:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * HEADER FILES
  67:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  68:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <xmc_gpio.h>
  69:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <xmc_i2c.h>
  70:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "i2c_master_conf.h"
  71:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  72:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if(UC_FAMILY == XMC4)
  73:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  74:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  75:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  76:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  77:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  78:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <DAVE_Common.h>
  79:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  80:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  81:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  82:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  83:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  84:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * MACROS
  85:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  86:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  87:../Dave/Generated/I2C_MASTER/i2c_master.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  88:../Dave/Generated/I2C_MASTER/i2c_master.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  89:../Dave/Generated/I2C_MASTER/i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
  90:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  91:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  92:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  93:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * ENUMS
  94:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  95:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
  96:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
  97:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
  98:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
  99:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 100:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Initialization status.
 101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 102:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_STATUS
 103:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 104:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 105:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 106:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 107:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U   /*!< I2C_MASTER UNSUPPORTED MODE */
 108:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_STATUS_t;
 109:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 110:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 111:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Direction
 112:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 113:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 114:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 115:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 116:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 117:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 118:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 119:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 122:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 123:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 124:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 125:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 126:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 127:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 128:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 129:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 130:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 131:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 132:../Dave/Generated/I2C_MASTER/i2c_master.h **** * DATA STRUCTURES
 133:../Dave/Generated/I2C_MASTER/i2c_master.h **** ***************************************************************************************************
 134:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 135:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 136:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 137:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 138:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 139:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 140:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure for DMA configuration.
 141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 142:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 143:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 144:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 145:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 146:../Dave/Generated/I2C_MASTER/i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 147:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 148:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 149:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 150:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 151:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 152:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 153:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 154:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 155:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 156:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 157:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 158:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data transmission.*/
 159:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 160:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 161:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 162:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data reception.*/
 163:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 164:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 165:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 166:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the transmission is complete
 167:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 168:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the reception is complete*/
 169:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 170:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when nack is received*/
 171:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 172:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when arbitration lost is occured*
 173:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 174:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when error is detected.*/
 175:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 176:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 177:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 178:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 179:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 180:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 181:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 182:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 183:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_CONFIG_t;
 184:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 185:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 186:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 187:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 188:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 189:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 190:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 191:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 192:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 193:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 194:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 195:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 196:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 197:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 198:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 199:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 200:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 201:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 202:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 203:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 204:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 205:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 206:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 207:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 208:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 209:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 210:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 211:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 212:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 213:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 214:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER
 215:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 216:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 217:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 218:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 219:../Dave/Generated/I2C_MASTER/i2c_master.h ****    	                                               that can change at runtime*/
 220:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_t;
 221:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 222:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 224:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 225:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 226:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifdef __cplusplus
 227:../Dave/Generated/I2C_MASTER/i2c_master.h **** extern "C" {
 228:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 229:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 230:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 231:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 232:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 235:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 236:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 237:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * API PROTOTYPES
 238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 239:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 240:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 241:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function can be used to check application software compatibility with a
 245:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * specific version of the APP.
 246:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 247:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 248:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 251:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_Init();
 254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 255:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(version.major != 4U)
 256:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 257:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 261:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 264:../Dave/Generated/I2C_MASTER/i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 265:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
 269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * FIFO configuration etc are done in this API.
 273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 274:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function.
 275:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   // Initializing the modules and the multiplexer
 283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {}
 286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 291:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 292:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 293:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 294:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 295:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer to receive data.
 301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).\n
 311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 317:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_READ 10
 318:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 319:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 320:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 326:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t data = 0x55;
 329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_data;
 330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 336:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 344:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Read data from IO EXPANDER
 346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   { }
 354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  return 0;
 355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 360:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 361:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 362:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 363:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits data to I2C slave device.
 365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer containing the data to transmit.
 370:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write). \n
 380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
 382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 412:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 419:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 420:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 421:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 422:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get the I2C flag status.
 424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t Flag status.
 431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 438:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 446:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 447:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 448:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 460:../Dave/Generated/I2C_MASTER/i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 461:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 462:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Clear the I2C flag status.
 464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None <BR>
 471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 499:../Dave/Generated/I2C_MASTER/i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 500:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 501:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * user can start a new transmission without delay.
 509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 519:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
 533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 542:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 543:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 544:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 545:../Dave/Generated/I2C_MASTER/i2c_master.h **** * @brief Stops the active data reception request.
 546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * a new receive request.
 554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t rx_buf[25];
 565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t tx_buf[2];
 566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;
 567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 568:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address from which data to be transfered
 571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     tx_buf[0] = 0;
 572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
 583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
 587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 592:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 593:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 594:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 595:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U)
 596:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  block_size size of the block
 601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr    address\n
 602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure to store the status of transmission.
 615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens through DMA channel.
 617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the completion of data transmission.
 622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * calls to this API.
 624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // trigger the DMA
 659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 674:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 675:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 676:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 677:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U)
 678:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param block_size  size of the block
 684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr  address \n
 685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed.
 694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * are received.
 699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Pre condition:
 714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t ReadData[256];
 717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  
 744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  @endcode
 757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 759:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 760:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 761:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 762:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 763:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size    number of bytes
 771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 785:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 786:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 787:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * in progress.
 788:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 789:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 826:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 833:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 834:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 835:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 836:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 837:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 838:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count    number of bytes
 847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 859:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 860:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 861:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 862:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_buffer[64];
 877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 894:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 901:../Dave/Generated/I2C_MASTER/i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 902:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 903:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 904:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 905:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 906:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 912:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      their bit positions.\n
 913:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 914:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 915:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 916:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * buffer error flag before providing the value.
 918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 921:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 922:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 923:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 924:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 925:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 926:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 927:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 928:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 929:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 930:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 931:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 932:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 933:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 934:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 935:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 936:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 937:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 938:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 939:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 940:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 941:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 942:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 943:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 944:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 945:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 946:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 947:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 948:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 949:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 950:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 951:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 952:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 953:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 954:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 955:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 956:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 957:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 958:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL))
 959:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 960:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 961:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 962:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 963:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 964:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 965:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 966:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
 967:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 968:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 969:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 970:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 971:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 972:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
 973:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 974:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 975:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
 976:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
 977:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * below the trigger limit.
 978:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 979:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 980:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 981:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 982:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 983:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 984:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 985:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 986:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 987:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 988:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 989:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 990:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 991:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 992:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 993:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
 994:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 995:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
 996:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
 997:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 998:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 999:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1000:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1001:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1002:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1003:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1004:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1005:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1006:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1007:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1008:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1009:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1010:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1011:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1012:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1013:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1014:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL))
1015:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1016:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1017:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1018:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1019:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1020:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1021:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
1022:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1023:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1024:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1025:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1026:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1027:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1028:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1029:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1030:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1031:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1032:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * above the trigger limit.
1033:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1034:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1035:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1036:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1037:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1038:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1039:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1040:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1041:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Rx_Data[256];
1042:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1043:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1044:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1045:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1046:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1047:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1048:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1049:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1050:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1051:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1052:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1053:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1054:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1055:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1056:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1057:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1058:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1059:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1060:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1061:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1062:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1063:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1064:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1065:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1066:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1067:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1068:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1069:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 650              	 .loc 3 1069 0
 651              	 .cfi_startproc
 652 0000 80B5     	 push {r7,lr}
 653              	.LCFI48:
 654              	 .cfi_def_cfa_offset 8
 655              	 .cfi_offset 7,-8
 656              	 .cfi_offset 14,-4
 657 0002 84B0     	 sub sp,sp,#16
 658              	.LCFI49:
 659              	 .cfi_def_cfa_offset 24
 660 0004 00AF     	 add r7,sp,#0
 661              	.LCFI50:
 662              	 .cfi_def_cfa_register 7
 663 0006 F860     	 str r0,[r7,#12]
 664 0008 B960     	 str r1,[r7,#8]
 665 000a 7A60     	 str r2,[r7,#4]
1070:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
1071:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 666              	 .loc 3 1071 0
 667 000c FB68     	 ldr r3,[r7,#12]
 668 000e 1968     	 ldr r1,[r3]
 669 0010 BB68     	 ldr r3,[r7,#8]
 670 0012 DAB2     	 uxtb r2,r3
 671 0014 7B68     	 ldr r3,[r7,#4]
 672 0016 081C     	 mov r0,r1
 673 0018 111C     	 mov r1,r2
 674 001a 1A1C     	 mov r2,r3
 675 001c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
1072:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 676              	 .loc 3 1072 0
 677 0020 BD46     	 mov sp,r7
 678 0022 04B0     	 add sp,sp,#16
 679              	 
 680 0024 80BD     	 pop {r7,pc}
 681              	 .cfi_endproc
 682              	.LFE122:
 684 0026 C046     	 .section .text.I2C_MASTER_IsTXFIFOFull,"ax",%progbits
 685              	 .align 2
 686              	 .code 16
 687              	 .thumb_func
 689              	I2C_MASTER_IsTXFIFOFull:
 690              	.LFB123:
1073:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1074:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1075:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1076:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1077:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1078:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1079:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1080:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1081:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1082:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1083:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1084:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * data to the transmit FIFO.
1085:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1086:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1087:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1088:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1089:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1090:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1091:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1092:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1093:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1094:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1095:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1096:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1097:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1098:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1099:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1100:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1102:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1103:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1104:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1105:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1106:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1107:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1108:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1109:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Wait when Tx FIFO is full
1110:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1111:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1112:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(1U)
1115:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
1118:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1119:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1120:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1121:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 691              	 .loc 3 1121 0
 692              	 .cfi_startproc
 693 0000 80B5     	 push {r7,lr}
 694              	.LCFI51:
 695              	 .cfi_def_cfa_offset 8
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 82B0     	 sub sp,sp,#8
 699              	.LCFI52:
 700              	 .cfi_def_cfa_offset 16
 701 0004 00AF     	 add r7,sp,#0
 702              	.LCFI53:
 703              	 .cfi_def_cfa_register 7
 704 0006 7860     	 str r0,[r7,#4]
1122:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
1123:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 705              	 .loc 3 1123 0
 706 0008 7B68     	 ldr r3,[r7,#4]
 707 000a 1B68     	 ldr r3,[r3]
 708 000c 181C     	 mov r0,r3
 709 000e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 710 0012 031C     	 mov r3,r0
1124:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 711              	 .loc 3 1124 0
 712 0014 181C     	 mov r0,r3
 713 0016 BD46     	 mov sp,r7
 714 0018 02B0     	 add sp,sp,#8
 715              	 
 716 001a 80BD     	 pop {r7,pc}
 717              	 .cfi_endproc
 718              	.LFE123:
 720              	 .section .text.I2C_MASTER_IsRXFIFOEmpty,"ax",%progbits
 721              	 .align 2
 722              	 .code 16
 723              	 .thumb_func
 725              	I2C_MASTER_IsRXFIFOEmpty:
 726              	.LFB124:
1125:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1126:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1127:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1128:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1129:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1130:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1131:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1132:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1133:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1134:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1135:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1136:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1137:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1138:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1139:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1140:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1143:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1144:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1145:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1146:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1147:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1148:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1149:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1150:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1151:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1152:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1153:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1154:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1155:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1156:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1160:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1163:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1164:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1165:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1166:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1167:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1168:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1169:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1170:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1171:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1174:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1175:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1176:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1177:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1178:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1179:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1180:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
1181:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1182:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1183:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1184:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1185:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1186:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1187:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 727              	 .loc 3 1187 0
 728              	 .cfi_startproc
 729 0000 80B5     	 push {r7,lr}
 730              	.LCFI54:
 731              	 .cfi_def_cfa_offset 8
 732              	 .cfi_offset 7,-8
 733              	 .cfi_offset 14,-4
 734 0002 82B0     	 sub sp,sp,#8
 735              	.LCFI55:
 736              	 .cfi_def_cfa_offset 16
 737 0004 00AF     	 add r7,sp,#0
 738              	.LCFI56:
 739              	 .cfi_def_cfa_register 7
 740 0006 7860     	 str r0,[r7,#4]
1188:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
1189:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 741              	 .loc 3 1189 0
 742 0008 7B68     	 ldr r3,[r7,#4]
 743 000a 1B68     	 ldr r3,[r3]
 744 000c 181C     	 mov r0,r3
 745 000e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 746 0012 031C     	 mov r3,r0
1190:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 747              	 .loc 3 1190 0
 748 0014 181C     	 mov r0,r3
 749 0016 BD46     	 mov sp,r7
 750 0018 02B0     	 add sp,sp,#8
 751              	 
 752 001a 80BD     	 pop {r7,pc}
 753              	 .cfi_endproc
 754              	.LFE124:
 756              	 .section .text.I2C_MASTER_GetReceivedByte,"ax",%progbits
 757              	 .align 2
 758              	 .code 16
 759              	 .thumb_func
 761              	I2C_MASTER_GetReceivedByte:
 762              	.LFB128:
1191:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1192:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1193:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1194:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1195:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1196:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1197:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1198:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1199:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1200:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1201:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * comparison using \a OR operation.
1202:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1203:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1204:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1205:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * event.
1206:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1207:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interest before checking the status.
1208:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1209:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1210:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1211:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1212:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1213:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1214:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t mem_address[2];
1215:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   int main(void)
1216:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1217:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     DAVE_STATUS_t init_status;
1218:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1219:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     init_status = DAVE_Init();
1220:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1221:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1222:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1224:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1225:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1226:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1227:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1228:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1229:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1230:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1231:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1232:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     else
1234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1235:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1236:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1237:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1240:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      return 1U;
1241:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1245:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1246:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1247:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL))
1248:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1249:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1250:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1251:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * transmit FIFO.
1254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1255:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1256:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1257:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \a OR operation.
1260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1261:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1265:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * appropriately masked.
1267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1274:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1275:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1291:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1304:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1305:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1306:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL))
1307:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1308:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1309:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1310:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1317:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1318:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1319:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1320:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the function.
1327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1336:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1364:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1365:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1366:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL))
1367:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1368:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1369:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1370:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Provides the received data from receive buffer.
1372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[10];
1389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        // wait for ACK
1411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         index++;
1417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1436:../Dave/Generated/I2C_MASTER/i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1437:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1438:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 763              	 .loc 3 1438 0
 764              	 .cfi_startproc
 765 0000 80B5     	 push {r7,lr}
 766              	.LCFI57:
 767              	 .cfi_def_cfa_offset 8
 768              	 .cfi_offset 7,-8
 769              	 .cfi_offset 14,-4
 770 0002 82B0     	 sub sp,sp,#8
 771              	.LCFI58:
 772              	 .cfi_def_cfa_offset 16
 773 0004 00AF     	 add r7,sp,#0
 774              	.LCFI59:
 775              	 .cfi_def_cfa_register 7
 776 0006 7860     	 str r0,[r7,#4]
1439:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
1440:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 777              	 .loc 3 1440 0
 778 0008 7B68     	 ldr r3,[r7,#4]
 779 000a 1B68     	 ldr r3,[r3]
 780 000c 181C     	 mov r0,r3
 781 000e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 782 0012 031C     	 mov r3,r0
1441:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 783              	 .loc 3 1441 0
 784 0014 181C     	 mov r0,r3
 785 0016 BD46     	 mov sp,r7
 786 0018 02B0     	 add sp,sp,#8
 787              	 
 788 001a 80BD     	 pop {r7,pc}
 789              	 .cfi_endproc
 790              	.LFE128:
 792              	 .section .text.I2C_MASTER_TransmitByte,"ax",%progbits
 793              	 .align 2
 794              	 .code 16
 795              	 .thumb_func
 797              	I2C_MASTER_TransmitByte:
 798              	.LFB129:
1442:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1443:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1446:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1447:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  byte data byte to transmit. \n
1448:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
1450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1462:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1490:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1491:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 799              	 .loc 3 1491 0
 800              	 .cfi_startproc
 801 0000 80B5     	 push {r7,lr}
 802              	.LCFI60:
 803              	 .cfi_def_cfa_offset 8
 804              	 .cfi_offset 7,-8
 805              	 .cfi_offset 14,-4
 806 0002 82B0     	 sub sp,sp,#8
 807              	.LCFI61:
 808              	 .cfi_def_cfa_offset 16
 809 0004 00AF     	 add r7,sp,#0
 810              	.LCFI62:
 811              	 .cfi_def_cfa_register 7
 812 0006 7860     	 str r0,[r7,#4]
 813 0008 0A1C     	 mov r2,r1
 814 000a FB1C     	 add r3,r7,#3
 815 000c 1A70     	 strb r2,[r3]
1492:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
1493:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 816              	 .loc 3 1493 0
 817 000e 7B68     	 ldr r3,[r7,#4]
 818 0010 1A68     	 ldr r2,[r3]
 819 0012 FB1C     	 add r3,r7,#3
 820 0014 1B78     	 ldrb r3,[r3]
 821 0016 101C     	 mov r0,r2
 822 0018 191C     	 mov r1,r3
 823 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
1494:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 824              	 .loc 3 1494 0
 825 001e BD46     	 mov sp,r7
 826 0020 02B0     	 add sp,sp,#8
 827              	 
 828 0022 80BD     	 pop {r7,pc}
 829              	 .cfi_endproc
 830              	.LFE129:
 832              	 .section .text.I2C_MASTER_EnableEvent,"ax",%progbits
 833              	 .align 2
 834              	 .code 16
 835              	 .thumb_func
 837              	I2C_MASTER_EnableEvent:
 838              	.LFB130:
1495:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * may not yield expected result.
1509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1519:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1537:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1538:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 839              	 .loc 3 1538 0
 840              	 .cfi_startproc
 841 0000 80B5     	 push {r7,lr}
 842              	.LCFI63:
 843              	 .cfi_def_cfa_offset 8
 844              	 .cfi_offset 7,-8
 845              	 .cfi_offset 14,-4
 846 0002 82B0     	 sub sp,sp,#8
 847              	.LCFI64:
 848              	 .cfi_def_cfa_offset 16
 849 0004 00AF     	 add r7,sp,#0
 850              	.LCFI65:
 851              	 .cfi_def_cfa_register 7
 852 0006 7860     	 str r0,[r7,#4]
 853 0008 3960     	 str r1,[r7]
1539:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
1540:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
 854              	 .loc 3 1540 0
 855 000a 7B68     	 ldr r3,[r7,#4]
 856 000c 1A68     	 ldr r2,[r3]
 857 000e 3B68     	 ldr r3,[r7]
 858 0010 101C     	 mov r0,r2
 859 0012 191C     	 mov r1,r3
 860 0014 FFF7FEFF 	 bl XMC_I2C_CH_EnableEvent
1541:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 861              	 .loc 3 1541 0
 862 0018 BD46     	 mov sp,r7
 863 001a 02B0     	 add sp,sp,#8
 864              	 
 865 001c 80BD     	 pop {r7,pc}
 866              	 .cfi_endproc
 867              	.LFE130:
 869 001e C046     	 .section .text.I2C_MASTER_DisableEvent,"ax",%progbits
 870              	 .align 2
 871              	 .code 16
 872              	 .thumb_func
 874              	I2C_MASTER_DisableEvent:
 875              	.LFB131:
1542:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1545:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1552:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1568:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1582:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1583:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 876              	 .loc 3 1583 0
 877              	 .cfi_startproc
 878 0000 80B5     	 push {r7,lr}
 879              	.LCFI66:
 880              	 .cfi_def_cfa_offset 8
 881              	 .cfi_offset 7,-8
 882              	 .cfi_offset 14,-4
 883 0002 82B0     	 sub sp,sp,#8
 884              	.LCFI67:
 885              	 .cfi_def_cfa_offset 16
 886 0004 00AF     	 add r7,sp,#0
 887              	.LCFI68:
 888              	 .cfi_def_cfa_register 7
 889 0006 7860     	 str r0,[r7,#4]
 890 0008 3960     	 str r1,[r7]
1584:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
1585:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
 891              	 .loc 3 1585 0
 892 000a 7B68     	 ldr r3,[r7,#4]
 893 000c 1A68     	 ldr r2,[r3]
 894 000e 3B68     	 ldr r3,[r7]
 895 0010 101C     	 mov r0,r2
 896 0012 191C     	 mov r1,r3
 897 0014 FFF7FEFF 	 bl XMC_I2C_CH_DisableEvent
1586:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 898              	 .loc 3 1586 0
 899 0018 BD46     	 mov sp,r7
 900 001a 02B0     	 add sp,sp,#8
 901              	 
 902 001c 80BD     	 pop {r7,pc}
 903              	 .cfi_endproc
 904              	.LFE131:
 906 001e C046     	 .section .text.I2C_MASTER_ReceiveACK,"ax",%progbits
 907              	 .align 2
 908              	 .code 16
 909              	 .thumb_func
 911              	I2C_MASTER_ReceiveACK:
 912              	.LFB132:
1587:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1588:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the ACK from slave
1590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1651:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1652:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1653:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 913              	 .loc 3 1653 0
 914              	 .cfi_startproc
 915 0000 80B5     	 push {r7,lr}
 916              	.LCFI69:
 917              	 .cfi_def_cfa_offset 8
 918              	 .cfi_offset 7,-8
 919              	 .cfi_offset 14,-4
 920 0002 82B0     	 sub sp,sp,#8
 921              	.LCFI70:
 922              	 .cfi_def_cfa_offset 16
 923 0004 00AF     	 add r7,sp,#0
 924              	.LCFI71:
 925              	 .cfi_def_cfa_register 7
 926 0006 7860     	 str r0,[r7,#4]
1654:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
1655:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
 927              	 .loc 3 1655 0
 928 0008 7B68     	 ldr r3,[r7,#4]
 929 000a 1B68     	 ldr r3,[r3]
 930 000c 181C     	 mov r0,r3
 931 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
1656:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 932              	 .loc 3 1656 0
 933 0012 BD46     	 mov sp,r7
 934 0014 02B0     	 add sp,sp,#8
 935              	 
 936 0016 80BD     	 pop {r7,pc}
 937              	 .cfi_endproc
 938              	.LFE132:
 940              	 .section .text.I2C_MASTER_ReceiveNACK,"ax",%progbits
 941              	 .align 2
 942              	 .code 16
 943              	 .thumb_func
 945              	I2C_MASTER_ReceiveNACK:
 946              	.LFB133:
1657:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the NACK from slave
1659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1677:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1678:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // only for the last byte
1704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1721:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1722:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1723:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 947              	 .loc 3 1723 0
 948              	 .cfi_startproc
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI72:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 82B0     	 sub sp,sp,#8
 955              	.LCFI73:
 956              	 .cfi_def_cfa_offset 16
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI74:
 959              	 .cfi_def_cfa_register 7
 960 0006 7860     	 str r0,[r7,#4]
1724:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
1725:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
 961              	 .loc 3 1725 0
 962 0008 7B68     	 ldr r3,[r7,#4]
 963 000a 1B68     	 ldr r3,[r3]
 964 000c 181C     	 mov r0,r3
 965 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
1726:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 966              	 .loc 3 1726 0
 967 0012 BD46     	 mov sp,r7
 968 0014 02B0     	 add sp,sp,#8
 969              	 
 970 0016 80BD     	 pop {r7,pc}
 971              	 .cfi_endproc
 972              	.LFE133:
 974              	 .section .text.I2C_MASTER_SendStop,"ax",%progbits
 975              	 .align 2
 976              	 .code 16
 977              	 .thumb_func
 979              	I2C_MASTER_SendStop:
 980              	.LFB134:
1727:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends stop command to slave
1729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1759:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1769:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1772:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1773:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1774:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 981              	 .loc 3 1774 0
 982              	 .cfi_startproc
 983 0000 80B5     	 push {r7,lr}
 984              	.LCFI75:
 985              	 .cfi_def_cfa_offset 8
 986              	 .cfi_offset 7,-8
 987              	 .cfi_offset 14,-4
 988 0002 82B0     	 sub sp,sp,#8
 989              	.LCFI76:
 990              	 .cfi_def_cfa_offset 16
 991 0004 00AF     	 add r7,sp,#0
 992              	.LCFI77:
 993              	 .cfi_def_cfa_register 7
 994 0006 7860     	 str r0,[r7,#4]
1775:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
1776:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
 995              	 .loc 3 1776 0
 996 0008 7B68     	 ldr r3,[r7,#4]
 997 000a 1B68     	 ldr r3,[r3]
 998 000c 181C     	 mov r0,r3
 999 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
1777:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1000              	 .loc 3 1777 0
 1001 0012 BD46     	 mov sp,r7
 1002 0014 02B0     	 add sp,sp,#8
 1003              	 
 1004 0016 80BD     	 pop {r7,pc}
 1005              	 .cfi_endproc
 1006              	.LFE134:
 1008              	 .section .text.I2C_MASTER_SendStart,"ax",%progbits
 1009              	 .align 2
 1010              	 .code 16
 1011              	 .thumb_func
 1013              	I2C_MASTER_SendStart:
 1014              	.LFB135:
1778:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends start command to slave
1780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1785:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1786:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1787:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1788:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1789:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
1796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1809:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(1U)
1821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       {
1822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       }
1823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1827:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1828:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1829:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1830:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1015              	 .loc 3 1830 0
 1016              	 .cfi_startproc
 1017 0000 80B5     	 push {r7,lr}
 1018              	.LCFI78:
 1019              	 .cfi_def_cfa_offset 8
 1020              	 .cfi_offset 7,-8
 1021              	 .cfi_offset 14,-4
 1022 0002 84B0     	 sub sp,sp,#16
 1023              	.LCFI79:
 1024              	 .cfi_def_cfa_offset 24
 1025 0004 00AF     	 add r7,sp,#0
 1026              	.LCFI80:
 1027              	 .cfi_def_cfa_register 7
 1028 0006 F860     	 str r0,[r7,#12]
 1029 0008 B960     	 str r1,[r7,#8]
 1030 000a FB1D     	 add r3,r7,#7
 1031 000c 1A70     	 strb r2,[r3]
1831:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
1832:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 1032              	 .loc 3 1832 0
 1033 000e FB68     	 ldr r3,[r7,#12]
 1034 0010 1968     	 ldr r1,[r3]
 1035 0012 BB68     	 ldr r3,[r7,#8]
 1036 0014 9AB2     	 uxth r2,r3
 1037 0016 FB1D     	 add r3,r7,#7
 1038 0018 1B78     	 ldrb r3,[r3]
 1039 001a 081C     	 mov r0,r1
 1040 001c 111C     	 mov r1,r2
 1041 001e 1A1C     	 mov r2,r3
 1042 0020 FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
1833:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1043              	 .loc 3 1833 0
 1044 0024 BD46     	 mov sp,r7
 1045 0026 04B0     	 add sp,sp,#16
 1046              	 
 1047 0028 80BD     	 pop {r7,pc}
 1048              	 .cfi_endproc
 1049              	.LFE135:
 1051 002a C046     	 .section .text.I2C_MASTER_SendRepeatedStart,"ax",%progbits
 1052              	 .align 2
 1053              	 .code 16
 1054              	 .thumb_func
 1056              	I2C_MASTER_SendRepeatedStart:
 1057              	.LFB136:
1834:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends repeated start command to slave
1836:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1843:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1844:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1845:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1846:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rx_buf[256];
1857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1859:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1860:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1861:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1862:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1866:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address to which data to be transfered
1868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1873:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 	   memset(rx_buf,0,16);
1881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
1891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1893:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1894:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1895:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1896:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 1058              	 .loc 3 1896 0
 1059              	 .cfi_startproc
 1060 0000 80B5     	 push {r7,lr}
 1061              	.LCFI81:
 1062              	 .cfi_def_cfa_offset 8
 1063              	 .cfi_offset 7,-8
 1064              	 .cfi_offset 14,-4
 1065 0002 84B0     	 sub sp,sp,#16
 1066              	.LCFI82:
 1067              	 .cfi_def_cfa_offset 24
 1068 0004 00AF     	 add r7,sp,#0
 1069              	.LCFI83:
 1070              	 .cfi_def_cfa_register 7
 1071 0006 F860     	 str r0,[r7,#12]
 1072 0008 B960     	 str r1,[r7,#8]
 1073 000a FB1D     	 add r3,r7,#7
 1074 000c 1A70     	 strb r2,[r3]
1897:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
1898:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 1075              	 .loc 3 1898 0
 1076 000e FB68     	 ldr r3,[r7,#12]
 1077 0010 1968     	 ldr r1,[r3]
 1078 0012 BB68     	 ldr r3,[r7,#8]
 1079 0014 9AB2     	 uxth r2,r3
 1080 0016 FB1D     	 add r3,r7,#7
 1081 0018 1B78     	 ldrb r3,[r3]
 1082 001a 081C     	 mov r0,r1
 1083 001c 111C     	 mov r1,r2
 1084 001e 1A1C     	 mov r2,r3
 1085 0020 FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
1899:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 1086              	 .loc 3 1899 0
 1087 0024 BD46     	 mov sp,r7
 1088 0026 04B0     	 add sp,sp,#16
 1089              	 
 1090 0028 80BD     	 pop {r7,pc}
 1091              	 .cfi_endproc
 1092              	.LFE136:
 1094 002a C046     	 .section .text.calculate_minfifosize,"ax",%progbits
 1095              	 .align 2
 1096              	 .code 16
 1097              	 .thumb_func
 1099              	calculate_minfifosize:
 1100              	.LFB139:
 1101              	 .file 4 "../Dave/Generated/I2C_MASTER/i2c_master.c"
   1:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @file i2c_master.c
   3:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @date 2015-07-31
   4:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
   8:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   9:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @cond
  10:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  11:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER v4.1.18 Configures USIC channel to transmit & receive data using I2C protocol.
  12:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  13:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * All rights reserved.
  15:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  16:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * following conditions are met:
  18:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  19:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   disclaimer.
  21:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  22:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  25:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  28:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  36:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  39:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  40:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Change History
  41:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * --------------
  42:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  43:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-02-16:
  44:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Initial version<br>
  45:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  46:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-06-10:
  47:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  48:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  49:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-07-31:
  50:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - DMA support APIs added
  51:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @endcond
  52:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  53:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  54:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  55:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * HEADER FILES
  56:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  57:../Dave/Generated/I2C_MASTER/i2c_master.c **** #include "i2c_master.h"
  58:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  59:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  60:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * MACROS
  61:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  62:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_ACK             (0x0200U)
  63:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_NACK				(3U << 8U)
  64:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MASK   (0x7EU)
  65:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_MASK       (0x600U)
  66:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_POS        (9U)
  67:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_POS  (4U)
  68:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_DST_TRANSFER_WIDTH_POS  (1U)
  69:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  70:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_DMA_MAX_BLOCK_SIZE (4095U)
  71:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  72:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  73:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL DATA
  74:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  75:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  76:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  77:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL ROUTINES
  78:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  79:../Dave/Generated/I2C_MASTER/i2c_master.c ****  /*
  80:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function monitors the configured protocol interrupt flags. It is called from the protocol interr
  81:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * service handler.
  82:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function reads the status of the USIC channel and checks for configured flags in the app UI.
  83:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If any callback function is provided in the app UI, it will be called when the selected flag is 
  84:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  85:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER_t * pointer to the I2C_MASTER APP instance handle
  86:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  87:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  88:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);
  89:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  90:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
  91:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
  92:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1102              	 .loc 4 92 0
 1103              	 .cfi_startproc
 1104 0000 80B5     	 push {r7,lr}
 1105              	.LCFI84:
 1106              	 .cfi_def_cfa_offset 8
 1107              	 .cfi_offset 7,-8
 1108              	 .cfi_offset 14,-4
 1109 0002 84B0     	 sub sp,sp,#16
 1110              	.LCFI85:
 1111              	 .cfi_def_cfa_offset 24
 1112 0004 00AF     	 add r7,sp,#0
 1113              	.LCFI86:
 1114              	 .cfi_def_cfa_register 7
 1115 0006 7860     	 str r0,[r7,#4]
 1116 0008 3960     	 str r1,[r7]
  93:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t result;
  94:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  95:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (a < b)
 1117              	 .loc 4 95 0
 1118 000a 7A68     	 ldr r2,[r7,#4]
 1119 000c 3B68     	 ldr r3,[r7]
 1120 000e 9A42     	 cmp r2,r3
 1121 0010 02D2     	 bcs .L38
  96:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
  97:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = a;
 1122              	 .loc 4 97 0
 1123 0012 7B68     	 ldr r3,[r7,#4]
 1124 0014 FB60     	 str r3,[r7,#12]
 1125 0016 01E0     	 b .L39
 1126              	.L38:
  98:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
  99:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 100:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 101:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = b;
 1127              	 .loc 4 101 0
 1128 0018 3B68     	 ldr r3,[r7]
 1129 001a FB60     	 str r3,[r7,#12]
 1130              	.L39:
 102:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 103:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (result);
 1131              	 .loc 4 103 0
 1132 001c FB68     	 ldr r3,[r7,#12]
 104:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1133              	 .loc 4 104 0
 1134 001e 181C     	 mov r0,r3
 1135 0020 BD46     	 mov sp,r7
 1136 0022 04B0     	 add sp,sp,#16
 1137              	 
 1138 0024 80BD     	 pop {r7,pc}
 1139              	 .cfi_endproc
 1140              	.LFE139:
 1142 0026 C046     	 .section .text.I2C_MASTER_GetAppVersion,"ax",%progbits
 1143              	 .align 2
 1144              	 .global I2C_MASTER_GetAppVersion
 1145              	 .code 16
 1146              	 .thumb_func
 1148              	I2C_MASTER_GetAppVersion:
 1149              	.LFB140:
 105:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 106:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 107:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 108:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		(I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 109:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle, const uint32_t address,
 110:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                                           const XMC_I2C_CH_CMD_t cmd);
 111:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 112:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 113:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 114:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle);
 115:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 116:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 117:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if(I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 118:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle);
 119:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 120:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 121:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 122:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle);
 123:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size);
 124:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 125:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 126:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                          const uint32_t count);
 127:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 128:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 129:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle);
 130:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 131:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 132:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 133:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 134:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
 135:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                                                    const uint32_t slave_address, uint8_t *data,u
 136:../Dave/Generated/I2C_MASTER/i2c_master.c **** 															bool send_stop);
 137:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 138:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if I2C_MASTER_DIRECT_RX_ENABLED
 139:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
 140:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                                                   uint8_t *data, uint32_t count, bool send_stop,
 141:../Dave/Generated/I2C_MASTER/i2c_master.c **** 														   bool send_nack);
 142:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 143:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 144:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle);
 145:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 146:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 147:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle);
 148:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 149:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 150:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1) && (I2C_MASTER_DMA_RX_ENABLED == 1)
 151:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* DMA buffer to send the ACK */
 152:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t ack_buf[1];
 153:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t nack_buf[1];
 154:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 155:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 156:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 157:../Dave/Generated/I2C_MASTER/i2c_master.c **** * API IMPLEMENTATION
 158:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 159:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 160:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 161:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief API to retrieve the version of the I2C_MASTER APP.
 162:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 163:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 164:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *         and patch version.
 165:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 166:../Dave/Generated/I2C_MASTER/i2c_master.c **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void)
 167:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1150              	 .loc 4 167 0
 1151              	 .cfi_startproc
 1152 0000 80B5     	 push {r7,lr}
 1153              	.LCFI87:
 1154              	 .cfi_def_cfa_offset 8
 1155              	 .cfi_offset 7,-8
 1156              	 .cfi_offset 14,-4
 1157 0002 82B0     	 sub sp,sp,#8
 1158              	.LCFI88:
 1159              	 .cfi_def_cfa_offset 16
 1160 0004 00AF     	 add r7,sp,#0
 1161              	.LCFI89:
 1162              	 .cfi_def_cfa_register 7
 168:../Dave/Generated/I2C_MASTER/i2c_master.c ****   DAVE_APP_VERSION_t version;
 169:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 170:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.major = I2C_MASTER_MAJOR_VERSION;
 1163              	 .loc 4 170 0
 1164 0006 3B1C     	 mov r3,r7
 1165 0008 0422     	 mov r2,#4
 1166 000a 1A70     	 strb r2,[r3]
 171:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.minor = I2C_MASTER_MINOR_VERSION;
 1167              	 .loc 4 171 0
 1168 000c 3B1C     	 mov r3,r7
 1169 000e 0122     	 mov r2,#1
 1170 0010 5A70     	 strb r2,[r3,#1]
 172:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.patch = I2C_MASTER_PATCH_VERSION;
 1171              	 .loc 4 172 0
 1172 0012 3B1C     	 mov r3,r7
 1173 0014 1222     	 mov r2,#18
 1174 0016 9A70     	 strb r2,[r3,#2]
 173:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 174:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (version);
 1175              	 .loc 4 174 0
 1176 0018 3B1D     	 add r3,r7,#4
 1177 001a 3A1C     	 mov r2,r7
 1178 001c 1188     	 ldrh r1,[r2]
 1179 001e 1980     	 strh r1,[r3]
 1180 0020 9278     	 ldrb r2,[r2,#2]
 1181 0022 9A70     	 strb r2,[r3,#2]
 1182 0024 3A1D     	 add r2,r7,#4
 1183 0026 0023     	 mov r3,#0
 1184 0028 1178     	 ldrb r1,[r2]
 1185 002a FF20     	 mov r0,#255
 1186 002c 0140     	 and r1,r0
 1187 002e FF20     	 mov r0,#255
 1188 0030 8343     	 bic r3,r0
 1189 0032 0B43     	 orr r3,r1
 1190 0034 5178     	 ldrb r1,[r2,#1]
 1191 0036 FF20     	 mov r0,#255
 1192 0038 0140     	 and r1,r0
 1193 003a 0902     	 lsl r1,r1,#8
 1194 003c 0648     	 ldr r0,.L43
 1195 003e 0340     	 and r3,r0
 1196 0040 0B43     	 orr r3,r1
 1197 0042 9278     	 ldrb r2,[r2,#2]
 1198 0044 FF21     	 mov r1,#255
 1199 0046 0A40     	 and r2,r1
 1200 0048 1204     	 lsl r2,r2,#16
 1201 004a 0449     	 ldr r1,.L43+4
 1202 004c 0B40     	 and r3,r1
 1203 004e 1343     	 orr r3,r2
 175:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1204              	 .loc 4 175 0
 1205 0050 181C     	 mov r0,r3
 1206 0052 BD46     	 mov sp,r7
 1207 0054 02B0     	 add sp,sp,#8
 1208              	 
 1209 0056 80BD     	 pop {r7,pc}
 1210              	.L44:
 1211              	 .align 2
 1212              	.L43:
 1213 0058 FF00FFFF 	 .word -65281
 1214 005c FFFF00FF 	 .word -16711681
 1215              	 .cfi_endproc
 1216              	.LFE140:
 1218              	 .section .text.I2C_MASTER_Init,"ax",%progbits
 1219              	 .align 2
 1220              	 .global I2C_MASTER_Init
 1221              	 .code 16
 1222              	 .thumb_func
 1224              	I2C_MASTER_Init:
 1225              	.LFB141:
 176:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 177:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to initialize the USIC Channel with GUI configured values.*/
 178:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
 179:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1226              	 .loc 4 179 0
 1227              	 .cfi_startproc
 1228 0000 80B5     	 push {r7,lr}
 1229              	.LCFI90:
 1230              	 .cfi_def_cfa_offset 8
 1231              	 .cfi_offset 7,-8
 1232              	 .cfi_offset 14,-4
 1233 0002 84B0     	 sub sp,sp,#16
 1234              	.LCFI91:
 1235              	 .cfi_def_cfa_offset 24
 1236 0004 00AF     	 add r7,sp,#0
 1237              	.LCFI92:
 1238              	 .cfi_def_cfa_register 7
 1239 0006 7860     	 str r0,[r7,#4]
 180:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 181:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 182:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle != NULL)
 1240              	 .loc 4 182 0
 1241 0008 7B68     	 ldr r3,[r7,#4]
 1242 000a 002B     	 cmp r3,#0
 1243 000c 08D0     	 beq .L46
 183:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 184:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Initialize the multiplexers required for I2C_MASTER configuration*/
 185:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->fptr_i2c_config();
 1244              	 .loc 4 185 0
 1245 000e 7B68     	 ldr r3,[r7,#4]
 1246 0010 5B68     	 ldr r3,[r3,#4]
 1247 0012 5B68     	 ldr r3,[r3,#4]
 1248 0014 9847     	 blx r3
 186:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 187:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 1249              	 .loc 4 187 0
 1250 0016 0F23     	 mov r3,#15
 1251 0018 FB18     	 add r3,r7,r3
 1252 001a 0022     	 mov r2,#0
 1253 001c 1A70     	 strb r2,[r3]
 1254 001e 03E0     	 b .L47
 1255              	.L46:
 188:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 189:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 190:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 191:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1256              	 .loc 4 191 0
 1257 0020 0F23     	 mov r3,#15
 1258 0022 FB18     	 add r3,r7,r3
 1259 0024 0122     	 mov r2,#1
 1260 0026 1A70     	 strb r2,[r3]
 1261              	.L47:
 192:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1262              	 .loc 4 193 0
 1263 0028 0F23     	 mov r3,#15
 1264 002a FB18     	 add r3,r7,r3
 1265 002c 1B78     	 ldrb r3,[r3]
 194:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1266              	 .loc 4 194 0
 1267 002e 181C     	 mov r0,r3
 1268 0030 BD46     	 mov sp,r7
 1269 0032 04B0     	 add sp,sp,#16
 1270              	 
 1271 0034 80BD     	 pop {r7,pc}
 1272              	 .cfi_endproc
 1273              	.LFE141:
 1275 0036 C046     	 .section .text.I2C_MASTER_GetFlagStatus,"ax",%progbits
 1276              	 .align 2
 1277              	 .global I2C_MASTER_GetFlagStatus
 1278              	 .code 16
 1279              	 .thumb_func
 1281              	I2C_MASTER_GetFlagStatus:
 1282              	.LFB142:
 195:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 196:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to get flag status of the requested parameter */
 197:../Dave/Generated/I2C_MASTER/i2c_master.c **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
 198:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1283              	 .loc 4 198 0
 1284              	 .cfi_startproc
 1285 0000 80B5     	 push {r7,lr}
 1286              	.LCFI93:
 1287              	 .cfi_def_cfa_offset 8
 1288              	 .cfi_offset 7,-8
 1289              	 .cfi_offset 14,-4
 1290 0002 84B0     	 sub sp,sp,#16
 1291              	.LCFI94:
 1292              	 .cfi_def_cfa_offset 24
 1293 0004 00AF     	 add r7,sp,#0
 1294              	.LCFI95:
 1295              	 .cfi_def_cfa_register 7
 1296 0006 7860     	 str r0,[r7,#4]
 1297 0008 3960     	 str r1,[r7]
 199:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t status;
 200:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 201:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 1298              	 .loc 4 201 0
 1299 000a 7B68     	 ldr r3,[r7,#4]
 1300 000c 1B68     	 ldr r3,[r3]
 1301 000e 181C     	 mov r0,r3
 1302 0010 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 1303 0014 031C     	 mov r3,r0
 1304 0016 FB60     	 str r3,[r7,#12]
 202:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 203:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status & flagtype);
 1305              	 .loc 4 203 0
 1306 0018 FB68     	 ldr r3,[r7,#12]
 1307 001a 3A68     	 ldr r2,[r7]
 1308 001c 1340     	 and r3,r2
 204:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1309              	 .loc 4 204 0
 1310 001e 181C     	 mov r0,r3
 1311 0020 BD46     	 mov sp,r7
 1312 0022 04B0     	 add sp,sp,#16
 1313              	 
 1314 0024 80BD     	 pop {r7,pc}
 1315              	 .cfi_endproc
 1316              	.LFE142:
 1318 0026 C046     	 .section .text.I2C_MASTER_ClearFlag,"ax",%progbits
 1319              	 .align 2
 1320              	 .global I2C_MASTER_ClearFlag
 1321              	 .code 16
 1322              	 .thumb_func
 1324              	I2C_MASTER_ClearFlag:
 1325              	.LFB143:
 205:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 206:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to clear flag status of the requested parameter */
 207:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
 208:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1326              	 .loc 4 208 0
 1327              	 .cfi_startproc
 1328 0000 80B5     	 push {r7,lr}
 1329              	.LCFI96:
 1330              	 .cfi_def_cfa_offset 8
 1331              	 .cfi_offset 7,-8
 1332              	 .cfi_offset 14,-4
 1333 0002 82B0     	 sub sp,sp,#8
 1334              	.LCFI97:
 1335              	 .cfi_def_cfa_offset 16
 1336 0004 00AF     	 add r7,sp,#0
 1337              	.LCFI98:
 1338              	 .cfi_def_cfa_register 7
 1339 0006 7860     	 str r0,[r7,#4]
 1340 0008 3960     	 str r1,[r7]
 209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 1341              	 .loc 4 209 0
 1342 000a 7B68     	 ldr r3,[r7,#4]
 1343 000c 1A68     	 ldr r2,[r3]
 1344 000e 3B68     	 ldr r3,[r7]
 1345 0010 101C     	 mov r0,r2
 1346 0012 191C     	 mov r1,r3
 1347 0014 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 210:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1348              	 .loc 4 210 0
 1349 0018 BD46     	 mov sp,r7
 1350 001a 02B0     	 add sp,sp,#8
 1351              	 
 1352 001c 80BD     	 pop {r7,pc}
 1353              	 .cfi_endproc
 1354              	.LFE143:
 1356 001e C046     	 .section .text.I2C_MASTER_Transmit,"ax",%progbits
 1357              	 .align 2
 1358              	 .global I2C_MASTER_Transmit
 1359              	 .code 16
 1360              	 .thumb_func
 1362              	I2C_MASTER_Transmit:
 1363              	.LFB144:
 211:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 212:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to transmit the data to slave device */
 213:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 214:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         uint8_t *data, const uint32_t size, bool send_stop)
 215:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1364              	 .loc 4 215 0
 1365              	 .cfi_startproc
 1366 0000 B0B5     	 push {r4,r5,r7,lr}
 1367              	.LCFI99:
 1368              	 .cfi_def_cfa_offset 16
 1369              	 .cfi_offset 4,-16
 1370              	 .cfi_offset 5,-12
 1371              	 .cfi_offset 7,-8
 1372              	 .cfi_offset 14,-4
 1373 0002 88B0     	 sub sp,sp,#32
 1374              	.LCFI100:
 1375              	 .cfi_def_cfa_offset 48
 1376 0004 02AF     	 add r7,sp,#8
 1377              	.LCFI101:
 1378              	 .cfi_def_cfa 7,40
 1379 0006 F860     	 str r0,[r7,#12]
 1380 0008 7A60     	 str r2,[r7,#4]
 1381 000a 3B60     	 str r3,[r7]
 1382 000c 0B23     	 mov r3,#11
 1383 000e FB18     	 add r3,r7,r3
 1384 0010 0A1C     	 add r2,r1,#0
 1385 0012 1A70     	 strb r2,[r3]
 216:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 217:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 218:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1386              	 .loc 4 218 0
 1387 0014 1723     	 mov r3,#23
 1388 0016 FB18     	 add r3,r7,r3
 1389 0018 0222     	 mov r2,#2
 1390 001a 1A70     	 strb r2,[r3]
 219:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 220:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1391              	 .loc 4 220 0
 1392 001c FB68     	 ldr r3,[r7,#12]
 1393 001e 5B68     	 ldr r3,[r3,#4]
 1394 0020 1B7F     	 ldrb r3,[r3,#28]
 1395 0022 002B     	 cmp r3,#0
 1396 0024 12D1     	 bne .L54
 221:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 222:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 223:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 1397              	 .loc 4 223 0
 1398 0026 1723     	 mov r3,#23
 1399 0028 FC18     	 add r4,r7,r3
 1400 002a F868     	 ldr r0,[r7,#12]
 1401 002c 0B23     	 mov r3,#11
 1402 002e FB18     	 add r3,r7,r3
 1403 0030 1978     	 ldrb r1,[r3]
 1404 0032 7A68     	 ldr r2,[r7,#4]
 1405 0034 3D68     	 ldr r5,[r7]
 1406 0036 BB6A     	 ldr r3,[r7,#40]
 1407 0038 0093     	 str r3,[sp]
 1408 003a 2C23     	 mov r3,#44
 1409 003c FB18     	 add r3,r7,r3
 1410 003e 1B78     	 ldrb r3,[r3]
 1411 0040 0193     	 str r3,[sp,#4]
 1412 0042 2B1C     	 mov r3,r5
 1413 0044 FFF7FEFF 	 bl I2C_MASTER_StartTransmitIRQ
 1414 0048 031C     	 mov r3,r0
 1415 004a 2370     	 strb r3,[r4]
 1416              	.L54:
 224:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 225:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 226:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 227:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 228:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 229:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 230:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 231:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 232:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 233:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 234:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 235:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 236:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 238:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 239:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1417              	 .loc 4 239 0
 1418 004c 1723     	 mov r3,#23
 1419 004e FB18     	 add r3,r7,r3
 1420 0050 1B78     	 ldrb r3,[r3]
 240:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 1421              	 .loc 4 240 0
 1422 0052 181C     	 mov r0,r3
 1423 0054 BD46     	 mov sp,r7
 1424 0056 06B0     	 add sp,sp,#24
 1425              	 
 1426 0058 B0BD     	 pop {r4,r5,r7,pc}
 1427              	 .cfi_endproc
 1428              	.LFE144:
 1430 005a C046     	 .section .text.I2C_MASTER_TransmitHandler,"ax",%progbits
 1431              	 .align 2
 1432              	 .global I2C_MASTER_TransmitHandler
 1433              	 .code 16
 1434              	 .thumb_func
 1436              	I2C_MASTER_TransmitHandler:
 1437              	.LFB145:
 241:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 242:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 243:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 244:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Transmit interrupt handler for the APP.
 245:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function called for different instances of the APP.
 246:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 247:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 248:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 249:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @return void
 250:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 251:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
 252:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1438              	 .loc 4 252 0
 1439              	 .cfi_startproc
 1440 0000 80B5     	 push {r7,lr}
 1441              	.LCFI102:
 1442              	 .cfi_def_cfa_offset 8
 1443              	 .cfi_offset 7,-8
 1444              	 .cfi_offset 14,-4
 1445 0002 84B0     	 sub sp,sp,#16
 1446              	.LCFI103:
 1447              	 .cfi_def_cfa_offset 24
 1448 0004 00AF     	 add r7,sp,#0
 1449              	.LCFI104:
 1450              	 .cfi_def_cfa_register 7
 1451 0006 7860     	 str r0,[r7,#4]
 253:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 254:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 255:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 256:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 1452              	 .loc 4 256 0
 1453 0008 7B68     	 ldr r3,[r7,#4]
 1454 000a 9B68     	 ldr r3,[r3,#8]
 1455 000c BB60     	 str r3,[r7,#8]
 257:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_min = 0U;
 1456              	 .loc 4 257 0
 1457 000e 0F23     	 mov r3,#15
 1458 0010 FB18     	 add r3,r7,r3
 1459 0012 0022     	 mov r2,#0
 1460 0014 1A70     	 strb r2,[r3]
 258:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 259:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* check if any error flag is set */
 260:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 1461              	 .loc 4 260 0
 1462 0016 7A68     	 ldr r2,[r7,#4]
 1463 0018 B123     	 mov r3,#177
 1464 001a 5B00     	 lsl r3,r3,#1
 1465 001c 101C     	 mov r0,r2
 1466 001e 191C     	 mov r1,r3
 1467 0020 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1468 0024 031E     	 sub r3,r0,#0
 1469 0026 14D0     	 beq .L57
 261:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
 262:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
 263:../Dave/Generated/I2C_MASTER/i2c_master.c **** 										(uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 264:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 265:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Disable the transmit events */
 266:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 1470              	 .loc 4 266 0
 1471 0028 7B68     	 ldr r3,[r7,#4]
 1472 002a 1A68     	 ldr r2,[r3]
 1473 002c 8023     	 mov r3,#128
 1474 002e DB05     	 lsl r3,r3,#23
 1475 0030 101C     	 mov r0,r2
 1476 0032 191C     	 mov r1,r3
 1477 0034 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 267:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 1478              	 .loc 4 267 0
 1479 0038 7B68     	 ldr r3,[r7,#4]
 1480 003a 1A68     	 ldr r2,[r3]
 1481 003c 8023     	 mov r3,#128
 1482 003e 9B01     	 lsl r3,r3,#6
 1483 0040 101C     	 mov r0,r2
 1484 0042 191C     	 mov r1,r3
 1485 0044 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 268:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 269:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ProtocolHandler(handle);
 1486              	 .loc 4 269 0
 1487 0048 7B68     	 ldr r3,[r7,#4]
 1488 004a 181C     	 mov r0,r3
 1489 004c FFF7FEFF 	 bl I2C_MASTER_ProtocolHandler
 1490 0050 12E1     	 b .L56
 1491              	.L57:
 270:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 271:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 272:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 273:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 274:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Transmit, Tx FIFO enabled
 275:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 276:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 1492              	 .loc 4 276 0
 1493 0052 BB68     	 ldr r3,[r7,#8]
 1494 0054 9B69     	 ldr r3,[r3,#24]
 1495 0056 002B     	 cmp r3,#0
 1496 0058 00D0     	 beq .LCB1314
 1497 005a 83E0     	 b .L59
 1498              	.LCB1314:
 277:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 278:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 1499              	 .loc 4 278 0
 1500 005c 7B68     	 ldr r3,[r7,#4]
 1501 005e 5B68     	 ldr r3,[r3,#4]
 1502 0060 9B7F     	 ldrb r3,[r3,#30]
 1503 0062 002B     	 cmp r3,#0
 1504 0064 5BD0     	 beq .L60
 279:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 280:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1505              	 .loc 4 280 0
 1506 0066 BB68     	 ldr r3,[r7,#8]
 1507 0068 DA68     	 ldr r2,[r3,#12]
 1508 006a BB68     	 ldr r3,[r7,#8]
 1509 006c 9B68     	 ldr r3,[r3,#8]
 1510 006e 9A42     	 cmp r2,r3
 1511 0070 34D2     	 bcs .L61
 281:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 282:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 1512              	 .loc 4 282 0
 1513 0072 7A68     	 ldr r2,[r7,#4]
 1514 0074 8023     	 mov r3,#128
 1515 0076 DB05     	 lsl r3,r3,#23
 1516 0078 101C     	 mov r0,r2
 1517 007a 191C     	 mov r1,r3
 1518 007c FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 283:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDA
 1519              	 .loc 4 283 0
 1520 0080 7B68     	 ldr r3,[r7,#4]
 1521 0082 1A68     	 ldr r2,[r3]
 1522 0084 8023     	 mov r3,#128
 1523 0086 DB05     	 lsl r3,r3,#23
 1524 0088 101C     	 mov r0,r2
 1525 008a 191C     	 mov r1,r3
 1526 008c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_EnableEvent
 284:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Fill the transmit FIFO */
 285:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1527              	 .loc 4 285 0
 1528 0090 18E0     	 b .L62
 1529              	.L65:
 286:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 287:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
 288:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1530              	 .loc 4 288 0
 1531 0092 BB68     	 ldr r3,[r7,#8]
 1532 0094 DA68     	 ldr r2,[r3,#12]
 1533 0096 BB68     	 ldr r3,[r7,#8]
 1534 0098 9B68     	 ldr r3,[r3,#8]
 1535 009a 9A42     	 cmp r2,r3
 1536 009c 10D2     	 bcs .L63
 289:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 290:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
 291:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_inde
 1537              	 .loc 4 291 0
 1538 009e BB68     	 ldr r3,[r7,#8]
 1539 00a0 1A68     	 ldr r2,[r3]
 1540 00a2 BB68     	 ldr r3,[r7,#8]
 1541 00a4 DB68     	 ldr r3,[r3,#12]
 1542 00a6 D318     	 add r3,r2,r3
 1543 00a8 1B78     	 ldrb r3,[r3]
 1544 00aa 7A68     	 ldr r2,[r7,#4]
 1545 00ac 101C     	 mov r0,r2
 1546 00ae 191C     	 mov r1,r3
 1547 00b0 FFF7FEFF 	 bl I2C_MASTER_TransmitByte
 292:../Dave/Generated/I2C_MASTER/i2c_master.c ****             ptr_runtime->tx_data_index++;
 1548              	 .loc 4 292 0
 1549 00b4 BB68     	 ldr r3,[r7,#8]
 1550 00b6 DB68     	 ldr r3,[r3,#12]
 1551 00b8 5A1C     	 add r2,r3,#1
 1552 00ba BB68     	 ldr r3,[r7,#8]
 1553 00bc DA60     	 str r2,[r3,#12]
 1554 00be 01E0     	 b .L62
 1555              	.L63:
 293:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 294:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 295:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 296:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1556              	 .loc 4 296 0
 1557 00c0 C046     	 mov r8,r8
 1558 00c2 D9E0     	 b .L56
 1559              	.L62:
 285:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 1560              	 .loc 4 285 0
 1561 00c4 7B68     	 ldr r3,[r7,#4]
 1562 00c6 181C     	 mov r0,r3
 1563 00c8 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1564 00cc 031C     	 mov r3,r0
 1565 00ce 1A1C     	 mov r2,r3
 1566 00d0 0123     	 mov r3,#1
 1567 00d2 5340     	 eor r3,r2
 1568 00d4 DBB2     	 uxtb r3,r3
 1569 00d6 002B     	 cmp r3,#0
 1570 00d8 DBD1     	 bne .L65
 1571 00da CDE0     	 b .L56
 1572              	.L61:
 297:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 298:../Dave/Generated/I2C_MASTER/i2c_master.c ****         } /* end of while */
 299:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 300:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 301:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 302:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send
 303:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	  XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STA
 1573              	 .loc 4 303 0
 1574 00dc 7B68     	 ldr r3,[r7,#4]
 1575 00de 1A68     	 ldr r2,[r3]
 1576 00e0 8023     	 mov r3,#128
 1577 00e2 DB05     	 lsl r3,r3,#23
 1578 00e4 101C     	 mov r0,r2
 1579 00e6 191C     	 mov r1,r3
 1580 00e8 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 304:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	  /*make sure data is transmitted in FIFO*/
 305:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	  while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 1581              	 .loc 4 305 0
 1582 00ec C046     	 mov r8,r8
 1583              	.L67:
 1584              	 .loc 4 305 0 is_stmt 0 discriminator 1
 1585 00ee 7B68     	 ldr r3,[r7,#4]
 1586 00f0 1B68     	 ldr r3,[r3]
 1587 00f2 181C     	 mov r0,r3
 1588 00f4 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1589 00f8 031C     	 mov r3,r0
 1590 00fa 1A1C     	 mov r2,r3
 1591 00fc 0123     	 mov r3,#1
 1592 00fe 5340     	 eor r3,r2
 1593 0100 DBB2     	 uxtb r3,r3
 1594 0102 002B     	 cmp r3,#0
 1595 0104 F3D1     	 bne .L67
 306:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 307:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->bus_acquired == true)
 1596              	 .loc 4 307 0 is_stmt 1
 1597 0106 BB68     	 ldr r3,[r7,#8]
 1598 0108 2822     	 mov r2,#40
 1599 010a 9B5C     	 ldrb r3,[r3,r2]
 1600 010c DBB2     	 uxtb r3,r3
 1601 010e 002B     	 cmp r3,#0
 1602 0110 00D1     	 bne .LCB1413
 1603 0112 B1E0     	 b .L56
 1604              	.LCB1413:
 308:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 309:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 1605              	 .loc 4 309 0
 1606 0114 7B68     	 ldr r3,[r7,#4]
 1607 0116 181C     	 mov r0,r3
 1608 0118 FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_TxCallback
 1609 011c ACE0     	 b .L56
 1610              	.L60:
 310:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 311:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 312:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of  if(handle->config->txFIFO_size > 0) */
 313:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 314:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Direction = transmit and Tx FIFO disabled
 315:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 316:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 317:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 318:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till the last byte */
 319:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1611              	 .loc 4 319 0
 1612 011e BB68     	 ldr r3,[r7,#8]
 1613 0120 DA68     	 ldr r2,[r3,#12]
 1614 0122 BB68     	 ldr r3,[r7,#8]
 1615 0124 9B68     	 ldr r3,[r3,#8]
 1616 0126 9A42     	 cmp r2,r3
 1617 0128 10D2     	 bcs .L69
 320:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 321:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 1618              	 .loc 4 321 0
 1619 012a BB68     	 ldr r3,[r7,#8]
 1620 012c 1A68     	 ldr r2,[r3]
 1621 012e BB68     	 ldr r3,[r7,#8]
 1622 0130 DB68     	 ldr r3,[r3,#12]
 1623 0132 D318     	 add r3,r2,r3
 1624 0134 1B78     	 ldrb r3,[r3]
 1625 0136 7A68     	 ldr r2,[r7,#4]
 1626 0138 101C     	 mov r0,r2
 1627 013a 191C     	 mov r1,r3
 1628 013c FFF7FEFF 	 bl I2C_MASTER_TransmitByte
 322:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 1629              	 .loc 4 322 0
 1630 0140 BB68     	 ldr r3,[r7,#8]
 1631 0142 DB68     	 ldr r3,[r3,#12]
 1632 0144 5A1C     	 add r2,r3,#1
 1633 0146 BB68     	 ldr r3,[r7,#8]
 1634 0148 DA60     	 str r2,[r3,#12]
 1635 014a 95E0     	 b .L56
 1636              	.L69:
 323:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 324:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 325:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 326:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
 327:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 1637              	 .loc 4 327 0
 1638 014c BB68     	 ldr r3,[r7,#8]
 1639 014e 2822     	 mov r2,#40
 1640 0150 9B5C     	 ldrb r3,[r3,r2]
 1641 0152 DBB2     	 uxtb r3,r3
 1642 0154 002B     	 cmp r3,#0
 1643 0156 00D1     	 bne .LCB1451
 1644 0158 8EE0     	 b .L56
 1645              	.LCB1451:
 328:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 329:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 1646              	 .loc 4 329 0
 1647 015a 7B68     	 ldr r3,[r7,#4]
 1648 015c 181C     	 mov r0,r3
 1649 015e FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_TxCallback
 1650 0162 89E0     	 b .L56
 1651              	.L59:
 330:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 331:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 332:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 333:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if(ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT) */
 334:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 335:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 336:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 337:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Receive, Tx, Rx FIFO enabled.
 338:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
 339:../Dave/Generated/I2C_MASTER/i2c_master.c ****   If Rx FIFO is not enabled, default size of 2 is considered.
 340:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 341:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 1652              	 .loc 4 341 0
 1653 0164 7B68     	 ldr r3,[r7,#4]
 1654 0166 5B68     	 ldr r3,[r3,#4]
 1655 0168 9B7F     	 ldrb r3,[r3,#30]
 1656 016a 002B     	 cmp r3,#0
 1657 016c 5CD0     	 beq .L70
 342:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 343:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if ((handle->config->rxFIFO_size > 0))
 1658              	 .loc 4 343 0
 1659 016e 7B68     	 ldr r3,[r7,#4]
 1660 0170 5B68     	 ldr r3,[r3,#4]
 1661 0172 DB7F     	 ldrb r3,[r3,#31]
 1662 0174 002B     	 cmp r3,#0
 1663 0176 15D0     	 beq .L71
 344:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 345:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_
 1664              	 .loc 4 345 0
 1665 0178 7B68     	 ldr r3,[r7,#4]
 1666 017a 5B68     	 ldr r3,[r3,#4]
 1667 017c 9B7F     	 ldrb r3,[r3,#30]
 1668 017e 1A1C     	 mov r2,r3
 1669 0180 0123     	 mov r3,#1
 1670 0182 9340     	 lsl r3,r3,r2
 1671 0184 1A1C     	 mov r2,r3
 346:../Dave/Generated/I2C_MASTER/i2c_master.c ****         		                                  ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size))
 1672              	 .loc 4 346 0
 1673 0186 7B68     	 ldr r3,[r7,#4]
 1674 0188 5B68     	 ldr r3,[r3,#4]
 1675 018a DB7F     	 ldrb r3,[r3,#31]
 345:../Dave/Generated/I2C_MASTER/i2c_master.c ****         		                                  ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size))
 1676              	 .loc 4 345 0
 1677 018c 191C     	 mov r1,r3
 1678 018e 0123     	 mov r3,#1
 1679 0190 8B40     	 lsl r3,r3,r1
 1680 0192 101C     	 mov r0,r2
 1681 0194 191C     	 mov r1,r3
 1682 0196 FFF7FEFF 	 bl calculate_minfifosize
 1683 019a 021C     	 mov r2,r0
 1684 019c 0F23     	 mov r3,#15
 1685 019e FB18     	 add r3,r7,r3
 1686 01a0 1A70     	 strb r2,[r3]
 1687 01a2 03E0     	 b .L72
 1688              	.L71:
 347:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 348:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 349:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 350:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
 351:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = 2U;
 1689              	 .loc 4 351 0
 1690 01a4 0F23     	 mov r3,#15
 1691 01a6 FB18     	 add r3,r7,r3
 1692 01a8 0222     	 mov r2,#2
 1693 01aa 1A70     	 strb r2,[r3]
 1694              	.L72:
 352:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 353:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 354:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 1695              	 .loc 4 354 0
 1696 01ac 7B68     	 ldr r3,[r7,#4]
 1697 01ae 1A68     	 ldr r2,[r3]
 1698 01b0 8023     	 mov r3,#128
 1699 01b2 DB05     	 lsl r3,r3,#23
 1700 01b4 101C     	 mov r0,r2
 1701 01b6 191C     	 mov r1,r3
 1702 01b8 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 355:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 356:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* fill the FIFO */
 357:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1703              	 .loc 4 357 0
 1704 01bc 27E0     	 b .L73
 1705              	.L78:
 358:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 359:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1706              	 .loc 4 359 0
 1707 01be BB68     	 ldr r3,[r7,#8]
 1708 01c0 DA68     	 ldr r2,[r3,#12]
 1709 01c2 BB68     	 ldr r3,[r7,#8]
 1710 01c4 9B68     	 ldr r3,[r3,#8]
 1711 01c6 9A42     	 cmp r2,r3
 1712 01c8 20D2     	 bcs .L74
 360:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 361:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* check for last byte and send_nack is set to true */
 362:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 1713              	 .loc 4 362 0
 1714 01ca BB68     	 ldr r3,[r7,#8]
 1715 01cc DB68     	 ldr r3,[r3,#12]
 1716 01ce 5A1C     	 add r2,r3,#1
 1717 01d0 BB68     	 ldr r3,[r7,#8]
 1718 01d2 9B68     	 ldr r3,[r3,#8]
 1719 01d4 9A42     	 cmp r2,r3
 1720 01d6 08D1     	 bne .L75
 1721              	 .loc 4 362 0 is_stmt 0 discriminator 1
 1722 01d8 BB68     	 ldr r3,[r7,#8]
 1723 01da 1B6A     	 ldr r3,[r3,#32]
 1724 01dc 012B     	 cmp r3,#1
 1725 01de 04D1     	 bne .L75
 363:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 364:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 1726              	 .loc 4 364 0 is_stmt 1
 1727 01e0 7B68     	 ldr r3,[r7,#4]
 1728 01e2 181C     	 mov r0,r3
 1729 01e4 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1730 01e8 03E0     	 b .L76
 1731              	.L75:
 365:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 366:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 367:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 368:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 1732              	 .loc 4 368 0
 1733 01ea 7B68     	 ldr r3,[r7,#4]
 1734 01ec 181C     	 mov r0,r3
 1735 01ee FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1736              	.L76:
 369:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 370:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 1737              	 .loc 4 370 0
 1738 01f2 BB68     	 ldr r3,[r7,#8]
 1739 01f4 DB68     	 ldr r3,[r3,#12]
 1740 01f6 5A1C     	 add r2,r3,#1
 1741 01f8 BB68     	 ldr r3,[r7,#8]
 1742 01fa DA60     	 str r2,[r3,#12]
 371:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 372:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*if index reaches fifo size - break*/
 373:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if ((ptr_runtime->tx_data_index) >= fifo_min)
 1743              	 .loc 4 373 0
 1744 01fc BB68     	 ldr r3,[r7,#8]
 1745 01fe DA68     	 ldr r2,[r3,#12]
 1746 0200 0F23     	 mov r3,#15
 1747 0202 FB18     	 add r3,r7,r3
 1748 0204 1B78     	 ldrb r3,[r3]
 1749 0206 9A42     	 cmp r2,r3
 1750 0208 01D3     	 bcc .L73
 374:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 375:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 1751              	 .loc 4 375 0
 1752 020a 0CE0     	 b .L77
 1753              	.L74:
 376:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 377:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 378:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 379:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 380:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 1754              	 .loc 4 380 0 discriminator 5
 1755 020c 0BE0     	 b .L77
 1756              	.L73:
 357:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 1757              	 .loc 4 357 0
 1758 020e 7B68     	 ldr r3,[r7,#4]
 1759 0210 181C     	 mov r0,r3
 1760 0212 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1761 0216 031C     	 mov r3,r0
 1762 0218 1A1C     	 mov r2,r3
 1763 021a 0123     	 mov r3,#1
 1764 021c 5340     	 eor r3,r2
 1765 021e DBB2     	 uxtb r3,r3
 1766 0220 002B     	 cmp r3,#0
 1767 0222 CCD1     	 bne .L78
 1768 0224 19E0     	 b .L79
 1769              	.L77:
 1770 0226 18E0     	 b .L79
 1771              	.L70:
 381:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 382:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 383:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->config->txFIFO_size > 0) */
 384:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 385:../Dave/Generated/I2C_MASTER/i2c_master.c ****    Direction = Receive, Tx FIFO disabled
 386:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 387:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 388:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 389:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* check for last byte and send_nack is set to true */
 390:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 1772              	 .loc 4 390 0
 1773 0228 BB68     	 ldr r3,[r7,#8]
 1774 022a DB68     	 ldr r3,[r3,#12]
 1775 022c 5A1C     	 add r2,r3,#1
 1776 022e BB68     	 ldr r3,[r7,#8]
 1777 0230 9B68     	 ldr r3,[r3,#8]
 1778 0232 9A42     	 cmp r2,r3
 1779 0234 08D1     	 bne .L80
 1780              	 .loc 4 390 0 is_stmt 0 discriminator 1
 1781 0236 BB68     	 ldr r3,[r7,#8]
 1782 0238 1B6A     	 ldr r3,[r3,#32]
 1783 023a 012B     	 cmp r3,#1
 1784 023c 04D1     	 bne .L80
 391:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 392:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 1785              	 .loc 4 392 0 is_stmt 1
 1786 023e 7B68     	 ldr r3,[r7,#4]
 1787 0240 181C     	 mov r0,r3
 1788 0242 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1789 0246 03E0     	 b .L81
 1790              	.L80:
 393:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 394:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 395:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 396:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 1791              	 .loc 4 396 0
 1792 0248 7B68     	 ldr r3,[r7,#4]
 1793 024a 181C     	 mov r0,r3
 1794 024c FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1795              	.L81:
 397:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 398:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 1796              	 .loc 4 398 0
 1797 0250 BB68     	 ldr r3,[r7,#8]
 1798 0252 DB68     	 ldr r3,[r3,#12]
 1799 0254 5A1C     	 add r2,r3,#1
 1800 0256 BB68     	 ldr r3,[r7,#8]
 1801 0258 DA60     	 str r2,[r3,#12]
 1802              	.L79:
 399:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 400:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 401:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 402:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If last byte, then disable ACK event
 403:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 404:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 1803              	 .loc 4 404 0
 1804 025a 7B68     	 ldr r3,[r7,#4]
 1805 025c 9B68     	 ldr r3,[r3,#8]
 1806 025e DA68     	 ldr r2,[r3,#12]
 1807 0260 7B68     	 ldr r3,[r7,#4]
 1808 0262 9B68     	 ldr r3,[r3,#8]
 1809 0264 9B68     	 ldr r3,[r3,#8]
 1810 0266 9A42     	 cmp r2,r3
 1811 0268 06D1     	 bne .L56
 405:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 406:../Dave/Generated/I2C_MASTER/i2c_master.c ****        I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 1812              	 .loc 4 406 0
 1813 026a 7A68     	 ldr r2,[r7,#4]
 1814 026c 8023     	 mov r3,#128
 1815 026e DB05     	 lsl r3,r3,#23
 1816 0270 101C     	 mov r0,r2
 1817 0272 191C     	 mov r1,r3
 1818 0274 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 1819              	.L56:
 407:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 408:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 409:../Dave/Generated/I2C_MASTER/i2c_master.c ****  } /* end of else */
 410:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1820              	 .loc 4 410 0
 1821 0278 BD46     	 mov sp,r7
 1822 027a 04B0     	 add sp,sp,#16
 1823              	 
 1824 027c 80BD     	 pop {r7,pc}
 1825              	 .cfi_endproc
 1826              	.LFE145:
 1828 027e C046     	 .section .text.I2C_MASTER_lSendStop_JumpTo_TxCallback,"ax",%progbits
 1829              	 .align 2
 1830              	 .code 16
 1831              	 .thumb_func
 1833              	I2C_MASTER_lSendStop_JumpTo_TxCallback:
 1834              	.LFB146:
 411:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 412:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to callback routine */
 413:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
 414:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1835              	 .loc 4 414 0
 1836              	 .cfi_startproc
 1837 0000 80B5     	 push {r7,lr}
 1838              	.LCFI105:
 1839              	 .cfi_def_cfa_offset 8
 1840              	 .cfi_offset 7,-8
 1841              	 .cfi_offset 14,-4
 1842 0002 84B0     	 sub sp,sp,#16
 1843              	.LCFI106:
 1844              	 .cfi_def_cfa_offset 24
 1845 0004 00AF     	 add r7,sp,#0
 1846              	.LCFI107:
 1847              	 .cfi_def_cfa_register 7
 1848 0006 7860     	 str r0,[r7,#4]
 415:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 416:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 417:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 1849              	 .loc 4 417 0
 1850 0008 7B68     	 ldr r3,[r7,#4]
 1851 000a 9B68     	 ldr r3,[r3,#8]
 1852 000c FB60     	 str r3,[r7,#12]
 418:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 419:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 1853              	 .loc 4 419 0
 1854 000e 7A68     	 ldr r2,[r7,#4]
 1855 0010 8023     	 mov r3,#128
 1856 0012 DB05     	 lsl r3,r3,#23
 1857 0014 101C     	 mov r0,r2
 1858 0016 191C     	 mov r1,r3
 1859 0018 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 420:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 421:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 1860              	 .loc 4 421 0
 1861 001c FB68     	 ldr r3,[r7,#12]
 1862 001e DB69     	 ldr r3,[r3,#28]
 1863 0020 012B     	 cmp r3,#1
 1864 0022 07D1     	 bne .L83
 422:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 423:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 1865              	 .loc 4 423 0
 1866 0024 FB68     	 ldr r3,[r7,#12]
 1867 0026 2822     	 mov r2,#40
 1868 0028 0021     	 mov r1,#0
 1869 002a 9954     	 strb r1,[r3,r2]
 424:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 1870              	 .loc 4 424 0
 1871 002c 7B68     	 ldr r3,[r7,#4]
 1872 002e 181C     	 mov r0,r3
 1873 0030 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1874              	.L83:
 425:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 426:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 427:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 1875              	 .loc 4 427 0
 1876 0034 C046     	 mov r8,r8
 1877              	.L84:
 1878              	 .loc 4 427 0 is_stmt 0 discriminator 1
 1879 0036 7B68     	 ldr r3,[r7,#4]
 1880 0038 1B68     	 ldr r3,[r3]
 1881 003a 181C     	 mov r0,r3
 1882 003c FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1883 0040 031E     	 sub r3,r0,#0
 1884 0042 802B     	 cmp r3,#128
 1885 0044 F7D0     	 beq .L84
 428:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 429:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*All data is transmitted*/
 430:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 1886              	 .loc 4 430 0 is_stmt 1
 1887 0046 FB68     	 ldr r3,[r7,#12]
 1888 0048 2622     	 mov r2,#38
 1889 004a 0021     	 mov r1,#0
 1890 004c 9954     	 strb r1,[r3,r2]
 431:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 432:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->tx_cbhandler != NULL)
 1891              	 .loc 4 432 0
 1892 004e 7B68     	 ldr r3,[r7,#4]
 1893 0050 5B68     	 ldr r3,[r3,#4]
 1894 0052 9B68     	 ldr r3,[r3,#8]
 1895 0054 002B     	 cmp r3,#0
 1896 0056 03D0     	 beq .L82
 433:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 434:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of transmission' callback function*/
 435:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->tx_cbhandler();
 1897              	 .loc 4 435 0
 1898 0058 7B68     	 ldr r3,[r7,#4]
 1899 005a 5B68     	 ldr r3,[r3,#4]
 1900 005c 9B68     	 ldr r3,[r3,#8]
 1901 005e 9847     	 blx r3
 1902              	.L82:
 436:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 437:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1903              	 .loc 4 437 0
 1904 0060 BD46     	 mov sp,r7
 1905 0062 04B0     	 add sp,sp,#16
 1906              	 
 1907 0064 80BD     	 pop {r7,pc}
 1908              	 .cfi_endproc
 1909              	.LFE146:
 1911 0066 C046     	 .section .text.I2C_MASTER_Receive,"ax",%progbits
 1912              	 .align 2
 1913              	 .global I2C_MASTER_Receive
 1914              	 .code 16
 1915              	 .thumb_func
 1917              	I2C_MASTER_Receive:
 1918              	.LFB147:
 438:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 439:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 440:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 441:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief This function registers the receive request by configuring the I2C_MASTER
 442:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * receive FIFO/Standard buffer (depending on the user configuration). The data
 443:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is received asynchronously. When the requested number of data bytes are received,
 444:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * optionally, the user configured callback function will be executed. If a callback
 445:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * function is not configured on the APP UI, the user has to poll for the status of
 446:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * rx_busy variable of the APP handle structure.
 447:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 448:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Note: In FIFO mode, FIFO trigger limit should be adjusted manually to
 449:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * read required amount of data from FIFO buffer.
 450:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 451:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 452:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
 453:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_start
 454:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  slave address
 455:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint8_t*  Pointer to data array
 456:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  Total no of bytes to be read.
 457:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_stop
 458:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_nack
 459:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 460:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return  I2C_MASTER_STATUS_t I2C_MASTER_STATUS_SUCCESS if the request is accepted.
 461:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *                              I2C_MASTER_STATUS_BUSY if a reception is in progress.
 462:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 463:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 464:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * request is registered.
 465:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 466:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 468:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 469:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                               const uint32_t count, bool send_stop, bool send_nack)
 470:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1919              	 .loc 4 470 0
 1920              	 .cfi_startproc
 1921 0000 B0B5     	 push {r4,r5,r7,lr}
 1922              	.LCFI108:
 1923              	 .cfi_def_cfa_offset 16
 1924              	 .cfi_offset 4,-16
 1925              	 .cfi_offset 5,-12
 1926              	 .cfi_offset 7,-8
 1927              	 .cfi_offset 14,-4
 1928 0002 8AB0     	 sub sp,sp,#40
 1929              	.LCFI109:
 1930              	 .cfi_def_cfa_offset 56
 1931 0004 04AF     	 add r7,sp,#16
 1932              	.LCFI110:
 1933              	 .cfi_def_cfa 7,40
 1934 0006 F860     	 str r0,[r7,#12]
 1935 0008 7A60     	 str r2,[r7,#4]
 1936 000a 3B60     	 str r3,[r7]
 1937 000c 0B23     	 mov r3,#11
 1938 000e FB18     	 add r3,r7,r3
 1939 0010 0A1C     	 add r2,r1,#0
 1940 0012 1A70     	 strb r2,[r3]
 471:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 472:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 473:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1941              	 .loc 4 473 0
 1942 0014 1723     	 mov r3,#23
 1943 0016 FB18     	 add r3,r7,r3
 1944 0018 0222     	 mov r2,#2
 1945 001a 1A70     	 strb r2,[r3]
 474:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 475:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1946              	 .loc 4 475 0
 1947 001c FB68     	 ldr r3,[r7,#12]
 1948 001e 5B68     	 ldr r3,[r3,#4]
 1949 0020 5B7F     	 ldrb r3,[r3,#29]
 1950 0022 002B     	 cmp r3,#0
 1951 0024 16D1     	 bne .L88
 476:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 477:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 478:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack
 1952              	 .loc 4 478 0
 1953 0026 1723     	 mov r3,#23
 1954 0028 FC18     	 add r4,r7,r3
 1955 002a F868     	 ldr r0,[r7,#12]
 1956 002c 0B23     	 mov r3,#11
 1957 002e FB18     	 add r3,r7,r3
 1958 0030 1978     	 ldrb r1,[r3]
 1959 0032 7A68     	 ldr r2,[r7,#4]
 1960 0034 3D68     	 ldr r5,[r7]
 1961 0036 BB6A     	 ldr r3,[r7,#40]
 1962 0038 0093     	 str r3,[sp]
 1963 003a 2C23     	 mov r3,#44
 1964 003c FB18     	 add r3,r7,r3
 1965 003e 1B78     	 ldrb r3,[r3]
 1966 0040 0193     	 str r3,[sp,#4]
 1967 0042 3023     	 mov r3,#48
 1968 0044 FB18     	 add r3,r7,r3
 1969 0046 1B78     	 ldrb r3,[r3]
 1970 0048 0293     	 str r3,[sp,#8]
 1971 004a 2B1C     	 mov r3,r5
 1972 004c FFF7FEFF 	 bl I2C_MASTER_StartReceiveIRQ
 1973 0050 031C     	 mov r3,r0
 1974 0052 2370     	 strb r3,[r4]
 1975              	.L88:
 479:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 480:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 481:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 482:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 483:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 484:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 485:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 486:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 487:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 488:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 489:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
 490:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, s
 491:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 492:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 493:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 494:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1976              	 .loc 4 494 0
 1977 0054 1723     	 mov r3,#23
 1978 0056 FB18     	 add r3,r7,r3
 1979 0058 1B78     	 ldrb r3,[r3]
 495:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1980              	 .loc 4 495 0
 1981 005a 181C     	 mov r0,r3
 1982 005c BD46     	 mov sp,r7
 1983 005e 06B0     	 add sp,sp,#24
 1984              	 
 1985 0060 B0BD     	 pop {r4,r5,r7,pc}
 1986              	 .cfi_endproc
 1987              	.LFE147:
 1989 0062 C046     	 .section .text.I2C_MASTER_lReceive_FIFOData,"ax",%progbits
 1990              	 .align 2
 1991              	 .code 16
 1992              	 .thumb_func
 1994              	I2C_MASTER_lReceive_FIFOData:
 1995              	.LFB148:
 496:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 497:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 498:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 499:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO data
 500:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 501:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 502:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                                 const uint32_t count)
 503:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1996              	 .loc 4 503 0
 1997              	 .cfi_startproc
 1998 0000 80B5     	 push {r7,lr}
 1999              	.LCFI111:
 2000              	 .cfi_def_cfa_offset 8
 2001              	 .cfi_offset 7,-8
 2002              	 .cfi_offset 14,-4
 2003 0002 86B0     	 sub sp,sp,#24
 2004              	.LCFI112:
 2005              	 .cfi_def_cfa_offset 32
 2006 0004 00AF     	 add r7,sp,#0
 2007              	.LCFI113:
 2008              	 .cfi_def_cfa_register 7
 2009 0006 F860     	 str r0,[r7,#12]
 2010 0008 7A60     	 str r2,[r7,#4]
 2011 000a 3B60     	 str r3,[r7]
 2012 000c 0B23     	 mov r3,#11
 2013 000e FB18     	 add r3,r7,r3
 2014 0010 0A1C     	 add r2,r1,#0
 2015 0012 1A70     	 strb r2,[r3]
 504:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 505:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 506:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2016              	 .loc 4 506 0
 2017 0014 FB68     	 ldr r3,[r7,#12]
 2018 0016 9B68     	 ldr r3,[r3,#8]
 2019 0018 7B61     	 str r3,[r7,#20]
 507:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 508:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Clear the receive FIFO, configure the trigger lime
 509:../Dave/Generated/I2C_MASTER/i2c_master.c ****    * and enable the receive events*/
 510:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 2020              	 .loc 4 510 0
 2021 001a FB68     	 ldr r3,[r7,#12]
 2022 001c 1B68     	 ldr r3,[r3]
 2023 001e 181C     	 mov r0,r3
 2024 0020 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Flush
 511:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 512:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Configure the FIFO trigger limit based on the required data size*/
 513:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_lReconfigureRxFIFO(handle, count);
 2025              	 .loc 4 513 0
 2026 0024 FA68     	 ldr r2,[r7,#12]
 2027 0026 3B68     	 ldr r3,[r7]
 2028 0028 101C     	 mov r0,r2
 2029 002a 191C     	 mov r1,r3
 2030 002c FFF7FEFF 	 bl I2C_MASTER_lReconfigureRxFIFO
 514:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 515:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 2031              	 .loc 4 515 0
 2032 0030 FB68     	 ldr r3,[r7,#12]
 2033 0032 1A68     	 ldr r2,[r3]
 2034 0034 C023     	 mov r3,#192
 2035 0036 DB05     	 lsl r3,r3,#23
 2036 0038 101C     	 mov r0,r2
 2037 003a 191C     	 mov r1,r3
 2038 003c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_EnableEvent
 516:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                 (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 517:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 518:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 2039              	 .loc 4 518 0
 2040 0040 0B23     	 mov r3,#11
 2041 0042 FB18     	 add r3,r7,r3
 2042 0044 1B78     	 ldrb r3,[r3]
 2043 0046 002B     	 cmp r3,#0
 2044 0048 00D1     	 bne .LCB1822
 2045 004a 74E0     	 b .L91
 2046              	.LCB1822:
 519:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 520:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2047              	 .loc 4 520 0
 2048 004c FB68     	 ldr r3,[r7,#12]
 2049 004e 5B68     	 ldr r3,[r3,#4]
 2050 0050 1B7F     	 ldrb r3,[r3,#28]
 2051 0052 012B     	 cmp r3,#1
 2052 0054 14D0     	 beq .L92
 521:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		 (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2053              	 .loc 4 521 0 discriminator 1
 2054 0056 FB68     	 ldr r3,[r7,#12]
 2055 0058 5B68     	 ldr r3,[r3,#4]
 2056 005a 1B7F     	 ldrb r3,[r3,#28]
 520:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		 (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2057              	 .loc 4 520 0 discriminator 1
 2058 005c 022B     	 cmp r3,#2
 2059 005e 0FD0     	 beq .L92
 522:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	{
 523:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2060              	 .loc 4 523 0
 2061 0060 FA68     	 ldr r2,[r7,#12]
 2062 0062 8023     	 mov r3,#128
 2063 0064 DB05     	 lsl r3,r3,#23
 2064 0066 101C     	 mov r0,r2
 2065 0068 191C     	 mov r1,r3
 2066 006a FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 524:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2067              	 .loc 4 524 0
 2068 006e FB68     	 ldr r3,[r7,#12]
 2069 0070 1968     	 ldr r1,[r3]
 2070 0072 7B69     	 ldr r3,[r7,#20]
 2071 0074 2422     	 mov r2,#36
 2072 0076 9B5C     	 ldrb r3,[r3,r2]
 2073 0078 081C     	 mov r0,r1
 2074 007a 191C     	 mov r1,r3
 2075 007c FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 2076              	.L92:
 525:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	}
 526:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 2077              	 .loc 4 526 0
 2078 0080 FA68     	 ldr r2,[r7,#12]
 2079 0082 7B68     	 ldr r3,[r7,#4]
 2080 0084 101C     	 mov r0,r2
 2081 0086 191C     	 mov r1,r3
 2082 0088 0122     	 mov r2,#1
 2083 008a FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 527:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 528:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED)
 529:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 530:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 531:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack
 532:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 533:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		I2C_MASTER_ReceiveNACK(handle);
 534:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 535:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  else
 536:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 537:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		I2C_MASTER_ReceiveACK(handle);
 538:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 539:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_index++;
 540:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 541:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 542:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 2084              	 .loc 4 542 0
 2085 008e FB68     	 ldr r3,[r7,#12]
 2086 0090 5B68     	 ldr r3,[r3,#4]
 2087 0092 1B7F     	 ldrb r3,[r3,#28]
 2088 0094 022B     	 cmp r3,#2
 2089 0096 00D0     	 beq .LCB1859
 2090 0098 B0E0     	 b .L90
 2091              	.LCB1859:
 543:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 544:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 2092              	 .loc 4 544 0
 2093 009a FB68     	 ldr r3,[r7,#12]
 2094 009c 5B68     	 ldr r3,[r3,#4]
 2095 009e 9B7F     	 ldrb r3,[r3,#30]
 2096 00a0 002B     	 cmp r3,#0
 2097 00a2 2ED0     	 beq .L94
 545:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 546:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		/*Fill the transmit FIFO */
 547:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2098              	 .loc 4 547 0
 2099 00a4 21E0     	 b .L95
 2100              	.L100:
 548:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    {
 549:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2101              	 .loc 4 549 0
 2102 00a6 7B69     	 ldr r3,[r7,#20]
 2103 00a8 DA68     	 ldr r2,[r3,#12]
 2104 00aa 7B69     	 ldr r3,[r7,#20]
 2105 00ac 9B68     	 ldr r3,[r3,#8]
 2106 00ae 9A42     	 cmp r2,r3
 2107 00b0 19D2     	 bcs .L96
 550:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  {
 551:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 2108              	 .loc 4 551 0
 2109 00b2 7B69     	 ldr r3,[r7,#20]
 2110 00b4 DB68     	 ldr r3,[r3,#12]
 2111 00b6 5A1C     	 add r2,r3,#1
 2112 00b8 7B69     	 ldr r3,[r7,#20]
 2113 00ba 9B68     	 ldr r3,[r3,#8]
 2114 00bc 9A42     	 cmp r2,r3
 2115 00be 08D1     	 bne .L97
 2116              	 .loc 4 551 0 is_stmt 0 discriminator 1
 2117 00c0 7B69     	 ldr r3,[r7,#20]
 2118 00c2 1B6A     	 ldr r3,[r3,#32]
 2119 00c4 012B     	 cmp r3,#1
 2120 00c6 04D1     	 bne .L97
 552:../Dave/Generated/I2C_MASTER/i2c_master.c **** 			{
 553:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		      I2C_MASTER_ReceiveNACK(handle);
 2121              	 .loc 4 553 0 is_stmt 1
 2122 00c8 FB68     	 ldr r3,[r7,#12]
 2123 00ca 181C     	 mov r0,r3
 2124 00cc FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2125 00d0 03E0     	 b .L98
 2126              	.L97:
 554:../Dave/Generated/I2C_MASTER/i2c_master.c **** 			}
 555:../Dave/Generated/I2C_MASTER/i2c_master.c **** 			else
 556:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		    {
 557:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		      I2C_MASTER_ReceiveACK(handle);
 2127              	 .loc 4 557 0
 2128 00d2 FB68     	 ldr r3,[r7,#12]
 2129 00d4 181C     	 mov r0,r3
 2130 00d6 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2131              	.L98:
 558:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		    }
 559:../Dave/Generated/I2C_MASTER/i2c_master.c **** 			ptr_runtime->tx_data_index++;
 2132              	 .loc 4 559 0
 2133 00da 7B69     	 ldr r3,[r7,#20]
 2134 00dc DB68     	 ldr r3,[r3,#12]
 2135 00de 5A1C     	 add r2,r3,#1
 2136 00e0 7B69     	 ldr r3,[r7,#20]
 2137 00e2 DA60     	 str r2,[r3,#12]
 2138 00e4 01E0     	 b .L95
 2139              	.L96:
 560:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  }
 561:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  else
 562:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  {
 563:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		    break;
 2140              	 .loc 4 563 0
 2141 00e6 C046     	 mov r8,r8
 2142 00e8 88E0     	 b .L90
 2143              	.L95:
 547:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    {
 2144              	 .loc 4 547 0
 2145 00ea FB68     	 ldr r3,[r7,#12]
 2146 00ec 181C     	 mov r0,r3
 2147 00ee FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2148 00f2 031C     	 mov r3,r0
 2149 00f4 1A1C     	 mov r2,r3
 2150 00f6 0123     	 mov r3,#1
 2151 00f8 5340     	 eor r3,r2
 2152 00fa DBB2     	 uxtb r3,r3
 2153 00fc 002B     	 cmp r3,#0
 2154 00fe D2D1     	 bne .L100
 2155 0100 7CE0     	 b .L90
 2156              	.L94:
 564:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  }
 565:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		} /* end of while */
 566:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 567:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 568:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 569:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if it is last byte and send_nack true */
 570:../Dave/Generated/I2C_MASTER/i2c_master.c ****     	if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_na
 2157              	 .loc 4 570 0
 2158 0102 7B69     	 ldr r3,[r7,#20]
 2159 0104 DB68     	 ldr r3,[r3,#12]
 2160 0106 5A1C     	 add r2,r3,#1
 2161 0108 7B69     	 ldr r3,[r7,#20]
 2162 010a 9B68     	 ldr r3,[r3,#8]
 2163 010c 9A42     	 cmp r2,r3
 2164 010e 08D1     	 bne .L101
 2165              	 .loc 4 570 0 is_stmt 0 discriminator 1
 2166 0110 7B69     	 ldr r3,[r7,#20]
 2167 0112 1B6A     	 ldr r3,[r3,#32]
 2168 0114 012B     	 cmp r3,#1
 2169 0116 04D1     	 bne .L101
 571:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		{
 572:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  I2C_MASTER_ReceiveNACK(handle);
 2170              	 .loc 4 572 0 is_stmt 1
 2171 0118 FB68     	 ldr r3,[r7,#12]
 2172 011a 181C     	 mov r0,r3
 2173 011c FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2174 0120 03E0     	 b .L102
 2175              	.L101:
 573:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		}
 574:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		else
 575:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		{
 576:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		  I2C_MASTER_ReceiveACK(handle);
 2176              	 .loc 4 576 0
 2177 0122 FB68     	 ldr r3,[r7,#12]
 2178 0124 181C     	 mov r0,r3
 2179 0126 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2180              	.L102:
 577:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		}
 578:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		ptr_runtime->tx_data_index++;
 2181              	 .loc 4 578 0
 2182 012a 7B69     	 ldr r3,[r7,#20]
 2183 012c DB68     	 ldr r3,[r3,#12]
 2184 012e 5A1C     	 add r2,r3,#1
 2185 0130 7B69     	 ldr r3,[r7,#20]
 2186 0132 DA60     	 str r2,[r3,#12]
 2187 0134 62E0     	 b .L90
 2188              	.L91:
 579:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 580:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
 581:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if (send_start == true) */
 582:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 583:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 584:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* if Tx FIFO enabled */
 585:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 2189              	 .loc 4 585 0
 2190 0136 FB68     	 ldr r3,[r7,#12]
 2191 0138 5B68     	 ldr r3,[r3,#4]
 2192 013a 9B7F     	 ldrb r3,[r3,#30]
 2193 013c 002B     	 cmp r3,#0
 2194 013e 36D0     	 beq .L104
 586:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 587:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 2195              	 .loc 4 587 0
 2196 0140 FB68     	 ldr r3,[r7,#12]
 2197 0142 1A68     	 ldr r2,[r3]
 2198 0144 8023     	 mov r3,#128
 2199 0146 DB05     	 lsl r3,r3,#23
 2200 0148 101C     	 mov r0,r2
 2201 014a 191C     	 mov r1,r3
 2202 014c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 588:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 589:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 590:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2203              	 .loc 4 590 0
 2204 0150 21E0     	 b .L105
 2205              	.L110:
 591:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 592:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2206              	 .loc 4 592 0
 2207 0152 7B69     	 ldr r3,[r7,#20]
 2208 0154 DA68     	 ldr r2,[r3,#12]
 2209 0156 7B69     	 ldr r3,[r7,#20]
 2210 0158 9B68     	 ldr r3,[r3,#8]
 2211 015a 9A42     	 cmp r2,r3
 2212 015c 19D2     	 bcs .L106
 593:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 594:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 2213              	 .loc 4 594 0
 2214 015e 7B69     	 ldr r3,[r7,#20]
 2215 0160 DB68     	 ldr r3,[r3,#12]
 2216 0162 5A1C     	 add r2,r3,#1
 2217 0164 7B69     	 ldr r3,[r7,#20]
 2218 0166 9B68     	 ldr r3,[r3,#8]
 2219 0168 9A42     	 cmp r2,r3
 2220 016a 08D1     	 bne .L107
 595:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 2221              	 .loc 4 595 0 discriminator 1
 2222 016c 7B69     	 ldr r3,[r7,#20]
 2223 016e 1B6A     	 ldr r3,[r3,#32]
 594:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 2224              	 .loc 4 594 0 discriminator 1
 2225 0170 012B     	 cmp r3,#1
 2226 0172 04D1     	 bne .L107
 596:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 597:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 2227              	 .loc 4 597 0
 2228 0174 FB68     	 ldr r3,[r7,#12]
 2229 0176 181C     	 mov r0,r3
 2230 0178 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2231 017c 03E0     	 b .L108
 2232              	.L107:
 598:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 599:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 600:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 601:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 2233              	 .loc 4 601 0
 2234 017e FB68     	 ldr r3,[r7,#12]
 2235 0180 181C     	 mov r0,r3
 2236 0182 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2237              	.L108:
 602:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 603:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 2238              	 .loc 4 603 0
 2239 0186 7B69     	 ldr r3,[r7,#20]
 2240 0188 DB68     	 ldr r3,[r3,#12]
 2241 018a 5A1C     	 add r2,r3,#1
 2242 018c 7B69     	 ldr r3,[r7,#20]
 2243 018e DA60     	 str r2,[r3,#12]
 2244 0190 01E0     	 b .L105
 2245              	.L106:
 604:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 605:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 606:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 607:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 2246              	 .loc 4 607 0
 2247 0192 C046     	 mov r8,r8
 2248 0194 32E0     	 b .L90
 2249              	.L105:
 590:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 2250              	 .loc 4 590 0
 2251 0196 FB68     	 ldr r3,[r7,#12]
 2252 0198 181C     	 mov r0,r3
 2253 019a FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2254 019e 031C     	 mov r3,r0
 2255 01a0 1A1C     	 mov r2,r3
 2256 01a2 0123     	 mov r3,#1
 2257 01a4 5340     	 eor r3,r2
 2258 01a6 DBB2     	 uxtb r3,r3
 2259 01a8 002B     	 cmp r3,#0
 2260 01aa D2D1     	 bne .L110
 2261 01ac 26E0     	 b .L90
 2262              	.L104:
 608:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 609:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 610:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 611:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else  /* Tx FIFO disabled and Rx FIFO enabled */
 612:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 613:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2263              	 .loc 4 613 0
 2264 01ae 7B69     	 ldr r3,[r7,#20]
 2265 01b0 DA68     	 ldr r2,[r3,#12]
 2266 01b2 7B69     	 ldr r3,[r7,#20]
 2267 01b4 9B68     	 ldr r3,[r3,#8]
 2268 01b6 9A42     	 cmp r2,r3
 2269 01b8 20D2     	 bcs .L90
 614:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 2270              	 .loc 4 615 0
 2271 01ba 7B69     	 ldr r3,[r7,#20]
 2272 01bc DB68     	 ldr r3,[r3,#12]
 2273 01be 5A1C     	 add r2,r3,#1
 2274 01c0 7B69     	 ldr r3,[r7,#20]
 2275 01c2 9B68     	 ldr r3,[r3,#8]
 2276 01c4 9A42     	 cmp r2,r3
 2277 01c6 08D1     	 bne .L111
 616:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 2278              	 .loc 4 616 0 discriminator 1
 2279 01c8 7B69     	 ldr r3,[r7,#20]
 2280 01ca 1B6A     	 ldr r3,[r3,#32]
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 2281              	 .loc 4 615 0 discriminator 1
 2282 01cc 012B     	 cmp r3,#1
 2283 01ce 04D1     	 bne .L111
 617:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 618:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 2284              	 .loc 4 618 0
 2285 01d0 FB68     	 ldr r3,[r7,#12]
 2286 01d2 181C     	 mov r0,r3
 2287 01d4 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2288 01d8 0BE0     	 b .L112
 2289              	.L111:
 619:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 620:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 621:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 622:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVE
 2290              	 .loc 4 622 0
 2291 01da FB68     	 ldr r3,[r7,#12]
 2292 01dc 1A68     	 ldr r2,[r3]
 2293 01de F223     	 mov r3,#242
 2294 01e0 1B02     	 lsl r3,r3,#8
 2295 01e2 101C     	 mov r0,r2
 2296 01e4 191C     	 mov r1,r3
 2297 01e6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 623:../Dave/Generated/I2C_MASTER/i2c_master.c ****         			                                (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICAT
 624:../Dave/Generated/I2C_MASTER/i2c_master.c **** 													(uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
 625:../Dave/Generated/I2C_MASTER/i2c_master.c ****         			                                (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 626:../Dave/Generated/I2C_MASTER/i2c_master.c **** 													(uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
 627:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 2298              	 .loc 4 627 0
 2299 01ea FB68     	 ldr r3,[r7,#12]
 2300 01ec 181C     	 mov r0,r3
 2301 01ee FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2302              	.L112:
 628:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 629:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 2303              	 .loc 4 629 0
 2304 01f2 7B69     	 ldr r3,[r7,#20]
 2305 01f4 DB68     	 ldr r3,[r3,#12]
 2306 01f6 5A1C     	 add r2,r3,#1
 2307 01f8 7B69     	 ldr r3,[r7,#20]
 2308 01fa DA60     	 str r2,[r3,#12]
 2309              	.L90:
 630:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 631:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 632:../Dave/Generated/I2C_MASTER/i2c_master.c ****    } /* end of  if(send_start == false) */
 633:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2310              	 .loc 4 633 0
 2311 01fc BD46     	 mov sp,r7
 2312 01fe 06B0     	 add sp,sp,#24
 2313              	 
 2314 0200 80BD     	 pop {r7,pc}
 2315              	 .cfi_endproc
 2316              	.LFE148:
 2318 0202 C046     	 .section .text.I2C_MASTER_lReceive_StdData,"ax",%progbits
 2319              	 .align 2
 2320              	 .code 16
 2321              	 .thumb_func
 2323              	I2C_MASTER_lReceive_StdData:
 2324              	.LFB149:
 634:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 635:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Standard receive mode
 636:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 637:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 638:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2325              	 .loc 4 638 0
 2326              	 .cfi_startproc
 2327 0000 80B5     	 push {r7,lr}
 2328              	.LCFI114:
 2329              	 .cfi_def_cfa_offset 8
 2330              	 .cfi_offset 7,-8
 2331              	 .cfi_offset 14,-4
 2332 0002 86B0     	 sub sp,sp,#24
 2333              	.LCFI115:
 2334              	 .cfi_def_cfa_offset 32
 2335 0004 00AF     	 add r7,sp,#0
 2336              	.LCFI116:
 2337              	 .cfi_def_cfa_register 7
 2338 0006 F860     	 str r0,[r7,#12]
 2339 0008 7A60     	 str r2,[r7,#4]
 2340 000a 0B23     	 mov r3,#11
 2341 000c FB18     	 add r3,r7,r3
 2342 000e 0A1C     	 add r2,r1,#0
 2343 0010 1A70     	 strb r2,[r3]
 639:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 640:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 641:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2344              	 .loc 4 641 0
 2345 0012 FB68     	 ldr r3,[r7,#12]
 2346 0014 9B68     	 ldr r3,[r3,#8]
 2347 0016 7B61     	 str r3,[r7,#20]
 642:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 643:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE 
 2348              	 .loc 4 643 0
 2349 0018 FB68     	 ldr r3,[r7,#12]
 2350 001a 1A68     	 ldr r2,[r3]
 2351 001c C023     	 mov r3,#192
 2352 001e 1B02     	 lsl r3,r3,#8
 2353 0020 101C     	 mov r0,r2
 2354 0022 191C     	 mov r1,r3
 2355 0024 FFF7FEFF 	 bl XMC_USIC_CH_EnableEvent
 644:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEI
 645:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 646:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 2356              	 .loc 4 646 0
 2357 0028 0B23     	 mov r3,#11
 2358 002a FB18     	 add r3,r7,r3
 2359 002c 1B78     	 ldrb r3,[r3]
 2360 002e 002B     	 cmp r3,#0
 2361 0030 45D0     	 beq .L114
 647:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 648:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2362              	 .loc 4 648 0
 2363 0032 FB68     	 ldr r3,[r7,#12]
 2364 0034 5B68     	 ldr r3,[r3,#4]
 2365 0036 1B7F     	 ldrb r3,[r3,#28]
 2366 0038 012B     	 cmp r3,#1
 2367 003a 14D0     	 beq .L115
 649:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		 (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2368              	 .loc 4 649 0 discriminator 1
 2369 003c FB68     	 ldr r3,[r7,#12]
 2370 003e 5B68     	 ldr r3,[r3,#4]
 2371 0040 1B7F     	 ldrb r3,[r3,#28]
 648:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		 (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 2372              	 .loc 4 648 0 discriminator 1
 2373 0042 022B     	 cmp r3,#2
 2374 0044 0FD0     	 beq .L115
 650:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	{
 651:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2375              	 .loc 4 651 0
 2376 0046 FA68     	 ldr r2,[r7,#12]
 2377 0048 8023     	 mov r3,#128
 2378 004a DB05     	 lsl r3,r3,#23
 2379 004c 101C     	 mov r0,r2
 2380 004e 191C     	 mov r1,r3
 2381 0050 FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 652:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2382              	 .loc 4 652 0
 2383 0054 FB68     	 ldr r3,[r7,#12]
 2384 0056 1968     	 ldr r1,[r3]
 2385 0058 7B69     	 ldr r3,[r7,#20]
 2386 005a 2422     	 mov r2,#36
 2387 005c 9B5C     	 ldrb r3,[r3,r2]
 2388 005e 081C     	 mov r0,r1
 2389 0060 191C     	 mov r1,r3
 2390 0062 FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 2391              	.L115:
 653:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	}
 654:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 2392              	 .loc 4 654 0
 2393 0066 FA68     	 ldr r2,[r7,#12]
 2394 0068 7B68     	 ldr r3,[r7,#4]
 2395 006a 101C     	 mov r0,r2
 2396 006c 191C     	 mov r1,r3
 2397 006e 0122     	 mov r2,#1
 2398 0070 FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 655:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 656:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 2399              	 .loc 4 656 0
 2400 0074 FB68     	 ldr r3,[r7,#12]
 2401 0076 5B68     	 ldr r3,[r3,#4]
 2402 0078 1B7F     	 ldrb r3,[r3,#28]
 2403 007a 012B     	 cmp r3,#1
 2404 007c 05D0     	 beq .L116
 657:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 2405              	 .loc 4 657 0 discriminator 1
 2406 007e FB68     	 ldr r3,[r7,#12]
 2407 0080 5B68     	 ldr r3,[r3,#4]
 2408 0082 1B7F     	 ldrb r3,[r3,#28]
 656:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 2409              	 .loc 4 656 0 discriminator 1
 2410 0084 022B     	 cmp r3,#2
 2411 0086 00D0     	 beq .LCB2160
 2412 0088 6DE0     	 b .L113
 2413              	.LCB2160:
 2414              	.L116:
 658:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	{
 659:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack
 2415              	 .loc 4 659 0
 2416 008a 7B69     	 ldr r3,[r7,#20]
 2417 008c DB68     	 ldr r3,[r3,#12]
 2418 008e 5A1C     	 add r2,r3,#1
 2419 0090 7B69     	 ldr r3,[r7,#20]
 2420 0092 9B68     	 ldr r3,[r3,#8]
 2421 0094 9A42     	 cmp r2,r3
 2422 0096 08D1     	 bne .L118
 2423              	 .loc 4 659 0 is_stmt 0 discriminator 1
 2424 0098 7B69     	 ldr r3,[r7,#20]
 2425 009a 1B6A     	 ldr r3,[r3,#32]
 2426 009c 012B     	 cmp r3,#1
 2427 009e 04D1     	 bne .L118
 660:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 661:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 2428              	 .loc 4 661 0 is_stmt 1
 2429 00a0 FB68     	 ldr r3,[r7,#12]
 2430 00a2 181C     	 mov r0,r3
 2431 00a4 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2432 00a8 03E0     	 b .L119
 2433              	.L118:
 662:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 663:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  else
 664:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 665:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		I2C_MASTER_ReceiveACK(handle);
 2434              	 .loc 4 665 0
 2435 00aa FB68     	 ldr r3,[r7,#12]
 2436 00ac 181C     	 mov r0,r3
 2437 00ae FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2438              	.L119:
 666:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 667:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_index++;
 2439              	 .loc 4 667 0
 2440 00b2 7B69     	 ldr r3,[r7,#20]
 2441 00b4 DB68     	 ldr r3,[r3,#12]
 2442 00b6 5A1C     	 add r2,r3,#1
 2443 00b8 7B69     	 ldr r3,[r7,#20]
 2444 00ba DA60     	 str r2,[r3,#12]
 2445 00bc 53E0     	 b .L113
 2446              	.L114:
 668:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	}
 669:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 670:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 671:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 672:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 673:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is disabled
 674:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 675:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == 0)
 2447              	 .loc 4 675 0
 2448 00be FB68     	 ldr r3,[r7,#12]
 2449 00c0 5B68     	 ldr r3,[r3,#4]
 2450 00c2 9B7F     	 ldrb r3,[r3,#30]
 2451 00c4 002B     	 cmp r3,#0
 2452 00c6 19D1     	 bne .L121
 676:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 677:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 2453              	 .loc 4 677 0
 2454 00c8 7B69     	 ldr r3,[r7,#20]
 2455 00ca DB68     	 ldr r3,[r3,#12]
 2456 00cc 5A1C     	 add r2,r3,#1
 2457 00ce 7B69     	 ldr r3,[r7,#20]
 2458 00d0 9B68     	 ldr r3,[r3,#8]
 2459 00d2 9A42     	 cmp r2,r3
 2460 00d4 08D1     	 bne .L122
 2461              	 .loc 4 677 0 is_stmt 0 discriminator 1
 2462 00d6 7B69     	 ldr r3,[r7,#20]
 2463 00d8 1B6A     	 ldr r3,[r3,#32]
 2464 00da 012B     	 cmp r3,#1
 2465 00dc 04D1     	 bne .L122
 678:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 679:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 2466              	 .loc 4 679 0 is_stmt 1
 2467 00de FB68     	 ldr r3,[r7,#12]
 2468 00e0 181C     	 mov r0,r3
 2469 00e2 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2470 00e6 03E0     	 b .L123
 2471              	.L122:
 680:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 681:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 682:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 683:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 2472              	 .loc 4 683 0
 2473 00e8 FB68     	 ldr r3,[r7,#12]
 2474 00ea 181C     	 mov r0,r3
 2475 00ec FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2476              	.L123:
 684:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 685:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 686:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 2477              	 .loc 4 686 0
 2478 00f0 7B69     	 ldr r3,[r7,#20]
 2479 00f2 DB68     	 ldr r3,[r3,#12]
 2480 00f4 5A1C     	 add r2,r3,#1
 2481 00f6 7B69     	 ldr r3,[r7,#20]
 2482 00f8 DA60     	 str r2,[r3,#12]
 2483 00fa 34E0     	 b .L113
 2484              	.L121:
 687:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 688:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 689:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is enabled
 690:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 691:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 692:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 693:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 2485              	 .loc 4 693 0
 2486 00fc FB68     	 ldr r3,[r7,#12]
 2487 00fe 1A68     	 ldr r2,[r3]
 2488 0100 8023     	 mov r3,#128
 2489 0102 DB05     	 lsl r3,r3,#23
 2490 0104 101C     	 mov r0,r2
 2491 0106 191C     	 mov r1,r3
 2492 0108 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 694:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 695:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 696:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 2493              	 .loc 4 696 0
 2494 010c 20E0     	 b .L124
 2495              	.L128:
 697:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 698:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 2496              	 .loc 4 698 0
 2497 010e 7B69     	 ldr r3,[r7,#20]
 2498 0110 DA68     	 ldr r2,[r3,#12]
 2499 0112 7B69     	 ldr r3,[r7,#20]
 2500 0114 9B68     	 ldr r3,[r3,#8]
 2501 0116 9A42     	 cmp r2,r3
 2502 0118 19D2     	 bcs .L125
 699:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 700:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 2503              	 .loc 4 700 0
 2504 011a 7B69     	 ldr r3,[r7,#20]
 2505 011c DB68     	 ldr r3,[r3,#12]
 2506 011e 5A1C     	 add r2,r3,#1
 2507 0120 7B69     	 ldr r3,[r7,#20]
 2508 0122 9B68     	 ldr r3,[r3,#8]
 2509 0124 9A42     	 cmp r2,r3
 2510 0126 08D1     	 bne .L126
 2511              	 .loc 4 700 0 is_stmt 0 discriminator 1
 2512 0128 7B69     	 ldr r3,[r7,#20]
 2513 012a 1B6A     	 ldr r3,[r3,#32]
 2514 012c 012B     	 cmp r3,#1
 2515 012e 04D1     	 bne .L126
 701:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 702:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 2516              	 .loc 4 702 0 is_stmt 1
 2517 0130 FB68     	 ldr r3,[r7,#12]
 2518 0132 181C     	 mov r0,r3
 2519 0134 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 2520 0138 03E0     	 b .L127
 2521              	.L126:
 703:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 704:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 705:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 706:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 2522              	 .loc 4 706 0
 2523 013a FB68     	 ldr r3,[r7,#12]
 2524 013c 181C     	 mov r0,r3
 2525 013e FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 2526              	.L127:
 707:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 708:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 2527              	 .loc 4 708 0
 2528 0142 7B69     	 ldr r3,[r7,#20]
 2529 0144 DB68     	 ldr r3,[r3,#12]
 2530 0146 5A1C     	 add r2,r3,#1
 2531 0148 7B69     	 ldr r3,[r7,#20]
 2532 014a DA60     	 str r2,[r3,#12]
 2533 014c 00E0     	 b .L124
 2534              	.L125:
 709:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 710:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 711:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 712:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 2535              	 .loc 4 712 0
 2536 014e 0AE0     	 b .L113
 2537              	.L124:
 696:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 2538              	 .loc 4 696 0
 2539 0150 FB68     	 ldr r3,[r7,#12]
 2540 0152 181C     	 mov r0,r3
 2541 0154 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 2542 0158 031C     	 mov r3,r0
 2543 015a 1A1C     	 mov r2,r3
 2544 015c 0123     	 mov r3,#1
 2545 015e 5340     	 eor r3,r2
 2546 0160 DBB2     	 uxtb r3,r3
 2547 0162 002B     	 cmp r3,#0
 2548 0164 D3D1     	 bne .L128
 2549              	.L113:
 713:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 714:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 715:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 716:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 717:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 2550              	 .loc 4 717 0
 2551 0166 BD46     	 mov sp,r7
 2552 0168 06B0     	 add sp,sp,#24
 2553              	 
 2554 016a 80BD     	 pop {r7,pc}
 2555              	 .cfi_endproc
 2556              	.LFE149:
 2558              	 .section .text.I2C_MASTER_lSendStart_Or_RepeatedStart,"ax",%progbits
 2559              	 .align 2
 2560              	 .code 16
 2561              	 .thumb_func
 2563              	I2C_MASTER_lSendStart_Or_RepeatedStart:
 2564              	.LFB150:
 718:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 719:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 720:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 721:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		(I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 722:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Start/Repeated Start command */
 723:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
 724:../Dave/Generated/I2C_MASTER/i2c_master.c **** 		                                           const XMC_I2C_CH_CMD_t cmd)
 725:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2565              	 .loc 4 725 0
 2566              	 .cfi_startproc
 2567 0000 80B5     	 push {r7,lr}
 2568              	.LCFI117:
 2569              	 .cfi_def_cfa_offset 8
 2570              	 .cfi_offset 7,-8
 2571              	 .cfi_offset 14,-4
 2572 0002 84B0     	 sub sp,sp,#16
 2573              	.LCFI118:
 2574              	 .cfi_def_cfa_offset 24
 2575 0004 00AF     	 add r7,sp,#0
 2576              	.LCFI119:
 2577              	 .cfi_def_cfa_register 7
 2578 0006 F860     	 str r0,[r7,#12]
 2579 0008 B960     	 str r1,[r7,#8]
 2580 000a FB1D     	 add r3,r7,#7
 2581 000c 1A70     	 strb r2,[r3]
 726:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->runtime->bus_acquired == true)
 2582              	 .loc 4 726 0
 2583 000e FB68     	 ldr r3,[r7,#12]
 2584 0010 9B68     	 ldr r3,[r3,#8]
 2585 0012 2822     	 mov r2,#40
 2586 0014 9B5C     	 ldrb r3,[r3,r2]
 2587 0016 DBB2     	 uxtb r3,r3
 2588 0018 002B     	 cmp r3,#0
 2589 001a 0AD0     	 beq .L130
 727:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 728:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 2590              	 .loc 4 728 0
 2591 001c BB68     	 ldr r3,[r7,#8]
 2592 001e 9BB2     	 uxth r3,r3
 2593 0020 191C     	 mov r1,r3
 2594 0022 FA68     	 ldr r2,[r7,#12]
 2595 0024 FB1D     	 add r3,r7,#7
 2596 0026 1B78     	 ldrb r3,[r3]
 2597 0028 101C     	 mov r0,r2
 2598 002a 1A1C     	 mov r2,r3
 2599 002c FFF7FEFF 	 bl I2C_MASTER_SendRepeatedStart
 2600 0030 0EE0     	 b .L129
 2601              	.L130:
 729:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 730:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 731:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 732:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->bus_acquired = true;
 2602              	 .loc 4 732 0
 2603 0032 FB68     	 ldr r3,[r7,#12]
 2604 0034 9B68     	 ldr r3,[r3,#8]
 2605 0036 2822     	 mov r2,#40
 2606 0038 0121     	 mov r1,#1
 2607 003a 9954     	 strb r1,[r3,r2]
 733:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 2608              	 .loc 4 733 0
 2609 003c BB68     	 ldr r3,[r7,#8]
 2610 003e 9BB2     	 uxth r3,r3
 2611 0040 191C     	 mov r1,r3
 2612 0042 FA68     	 ldr r2,[r7,#12]
 2613 0044 FB1D     	 add r3,r7,#7
 2614 0046 1B78     	 ldrb r3,[r3]
 2615 0048 101C     	 mov r0,r2
 2616 004a 1A1C     	 mov r2,r3
 2617 004c FFF7FEFF 	 bl I2C_MASTER_SendStart
 2618              	.L129:
 734:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 735:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2619              	 .loc 4 735 0
 2620 0050 BD46     	 mov sp,r7
 2621 0052 04B0     	 add sp,sp,#16
 2622              	 
 2623 0054 80BD     	 pop {r7,pc}
 2624              	 .cfi_endproc
 2625              	.LFE150:
 2627 0056 C046     	 .section .text.I2C_MASTER_StartTransmitIRQ,"ax",%progbits
 2628              	 .align 2
 2629              	 .global I2C_MASTER_StartTransmitIRQ
 2630              	 .code 16
 2631              	 .thumb_func
 2633              	I2C_MASTER_StartTransmitIRQ:
 2634              	.LFB151:
 736:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 737:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 738:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 739:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 740:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 741:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2635              	 .loc 4 741 0
 2636              	 .cfi_startproc
 2637 0000 80B5     	 push {r7,lr}
 2638              	.LCFI120:
 2639              	 .cfi_def_cfa_offset 8
 2640              	 .cfi_offset 7,-8
 2641              	 .cfi_offset 14,-4
 2642 0002 86B0     	 sub sp,sp,#24
 2643              	.LCFI121:
 2644              	 .cfi_def_cfa_offset 32
 2645 0004 00AF     	 add r7,sp,#0
 2646              	.LCFI122:
 2647              	 .cfi_def_cfa_register 7
 2648 0006 F860     	 str r0,[r7,#12]
 2649 0008 7A60     	 str r2,[r7,#4]
 2650 000a 3B60     	 str r3,[r7]
 2651 000c 0B23     	 mov r3,#11
 2652 000e FB18     	 add r3,r7,r3
 2653 0010 0A1C     	 add r2,r1,#0
 2654 0012 1A70     	 strb r2,[r3]
 742:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 743:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 744:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 745:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 2655              	 .loc 4 745 0
 2656 0014 1723     	 mov r3,#23
 2657 0016 FB18     	 add r3,r7,r3
 2658 0018 0222     	 mov r2,#2
 2659 001a 1A70     	 strb r2,[r3]
 746:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2660              	 .loc 4 746 0
 2661 001c FB68     	 ldr r3,[r7,#12]
 2662 001e 9B68     	 ldr r3,[r3,#8]
 2663 0020 3B61     	 str r3,[r7,#16]
 747:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 748:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
 749:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	 If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
 750:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (siz
 2664              	 .loc 4 750 0
 2665 0022 0B23     	 mov r3,#11
 2666 0024 FB18     	 add r3,r7,r3
 2667 0026 1B78     	 ldrb r3,[r3]
 2668 0028 0122     	 mov r2,#1
 2669 002a 5340     	 eor r3,r2
 2670 002c DBB2     	 uxtb r3,r3
 2671 002e 002B     	 cmp r3,#0
 2672 0030 09D0     	 beq .L133
 2673              	 .loc 4 750 0 is_stmt 0 discriminator 1
 2674 0032 FB68     	 ldr r3,[r7,#12]
 2675 0034 9B68     	 ldr r3,[r3,#8]
 2676 0036 2822     	 mov r2,#40
 2677 0038 9B5C     	 ldrb r3,[r3,r2]
 2678 003a DBB2     	 uxtb r3,r3
 2679 003c 0122     	 mov r2,#1
 2680 003e 5340     	 eor r3,r2
 2681 0040 DBB2     	 uxtb r3,r3
 2682 0042 002B     	 cmp r3,#0
 2683 0044 05D1     	 bne .L134
 2684              	.L133:
 2685              	 .loc 4 750 0 discriminator 3
 2686 0046 3B68     	 ldr r3,[r7]
 2687 0048 002B     	 cmp r3,#0
 2688 004a 02D0     	 beq .L134
 2689              	 .loc 4 750 0 discriminator 4
 2690 004c 3B6A     	 ldr r3,[r7,#32]
 2691 004e 002B     	 cmp r3,#0
 2692 0050 04D1     	 bne .L135
 2693              	.L134:
 751:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 752:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	status = I2C_MASTER_STATUS_FAILURE;
 2694              	 .loc 4 752 0 is_stmt 1
 2695 0052 1723     	 mov r3,#23
 2696 0054 FB18     	 add r3,r7,r3
 2697 0056 0122     	 mov r2,#1
 2698 0058 1A70     	 strb r2,[r3]
 2699 005a 47E0     	 b .L136
 2700              	.L135:
 753:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 754:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 755:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 756:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 2701              	 .loc 4 756 0
 2702 005c 3B69     	 ldr r3,[r7,#16]
 2703 005e 0022     	 mov r2,#0
 2704 0060 9A61     	 str r2,[r3,#24]
 757:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 758:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->tx_busy == false)
 2705              	 .loc 4 758 0
 2706 0062 3B69     	 ldr r3,[r7,#16]
 2707 0064 2622     	 mov r2,#38
 2708 0066 9B5C     	 ldrb r3,[r3,r2]
 2709 0068 DBB2     	 uxtb r3,r3
 2710 006a 0122     	 mov r2,#1
 2711 006c 5340     	 eor r3,r2
 2712 006e DBB2     	 uxtb r3,r3
 2713 0070 002B     	 cmp r3,#0
 2714 0072 3BD0     	 beq .L136
 759:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 760:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  /*If there is no transmission in progress, obtain the address of data, size of data*/
 761:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data = data;
 2715              	 .loc 4 761 0
 2716 0074 3B69     	 ldr r3,[r7,#16]
 2717 0076 3A68     	 ldr r2,[r7]
 2718 0078 1A60     	 str r2,[r3]
 762:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_count = size;
 2719              	 .loc 4 762 0
 2720 007a 3B69     	 ldr r3,[r7,#16]
 2721 007c 3A6A     	 ldr r2,[r7,#32]
 2722 007e 9A60     	 str r2,[r3,#8]
 763:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 764:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  /*Initialize to first index and set the busy flag*/
 765:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_index = 0U;
 2723              	 .loc 4 765 0
 2724 0080 3B69     	 ldr r3,[r7,#16]
 2725 0082 0022     	 mov r2,#0
 2726 0084 DA60     	 str r2,[r3,#12]
 766:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_busy = true;
 2727              	 .loc 4 766 0
 2728 0086 3B69     	 ldr r3,[r7,#16]
 2729 0088 2622     	 mov r2,#38
 2730 008a 0121     	 mov r1,#1
 2731 008c 9954     	 strb r1,[r3,r2]
 767:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->send_stop = send_stop;
 2732              	 .loc 4 767 0
 2733 008e 2423     	 mov r3,#36
 2734 0090 FB18     	 add r3,r7,r3
 2735 0092 1A78     	 ldrb r2,[r3]
 2736 0094 3B69     	 ldr r3,[r7,#16]
 2737 0096 DA61     	 str r2,[r3,#28]
 768:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 769:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  /* Enable ACK event */
 770:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 2738              	 .loc 4 770 0
 2739 0098 FA68     	 ldr r2,[r7,#12]
 2740 009a 8023     	 mov r3,#128
 2741 009c DB05     	 lsl r3,r3,#23
 2742 009e 101C     	 mov r0,r2
 2743 00a0 191C     	 mov r1,r3
 2744 00a2 FFF7FEFF 	 bl I2C_MASTER_EnableEvent
 771:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 2745              	 .loc 4 771 0
 2746 00a6 FB68     	 ldr r3,[r7,#12]
 2747 00a8 1968     	 ldr r1,[r3]
 2748 00aa 3B69     	 ldr r3,[r7,#16]
 2749 00ac 2422     	 mov r2,#36
 2750 00ae 9B5C     	 ldrb r3,[r3,r2]
 2751 00b0 081C     	 mov r0,r1
 2752 00b2 191C     	 mov r1,r3
 2753 00b4 FFF7FEFF 	 bl XMC_I2C_CH_SetInterruptNodePointer
 772:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 773:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  if (send_start == true)
 2754              	 .loc 4 773 0
 2755 00b8 0B23     	 mov r3,#11
 2756 00ba FB18     	 add r3,r7,r3
 2757 00bc 1B78     	 ldrb r3,[r3]
 2758 00be 002B     	 cmp r3,#0
 2759 00c0 07D0     	 beq .L137
 774:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 775:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE
 2760              	 .loc 4 775 0
 2761 00c2 FA68     	 ldr r2,[r7,#12]
 2762 00c4 7B68     	 ldr r3,[r7,#4]
 2763 00c6 101C     	 mov r0,r2
 2764 00c8 191C     	 mov r1,r3
 2765 00ca 0022     	 mov r2,#0
 2766 00cc FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
 2767 00d0 08E0     	 b .L138
 2768              	.L137:
 776:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 777:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  else
 778:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 779:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    /*Trigger the Ack interrupt*/
 780:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 2769              	 .loc 4 780 0
 2770 00d2 FB68     	 ldr r3,[r7,#12]
 2771 00d4 1968     	 ldr r1,[r3]
 2772 00d6 3B69     	 ldr r3,[r7,#16]
 2773 00d8 2422     	 mov r2,#36
 2774 00da 9B5C     	 ldrb r3,[r3,r2]
 2775 00dc 081C     	 mov r0,r1
 2776 00de 191C     	 mov r1,r3
 2777 00e0 FFF7FEFF 	 bl XMC_USIC_CH_TriggerServiceRequest
 2778              	.L138:
 781:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 782:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 783:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  status = I2C_MASTER_STATUS_SUCCESS;
 2779              	 .loc 4 783 0
 2780 00e4 1723     	 mov r3,#23
 2781 00e6 FB18     	 add r3,r7,r3
 2782 00e8 0022     	 mov r2,#0
 2783 00ea 1A70     	 strb r2,[r3]
 2784              	.L136:
 784:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	}
 785:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 786:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 2785              	 .loc 4 786 0
 2786 00ec 1723     	 mov r3,#23
 2787 00ee FB18     	 add r3,r7,r3
 2788 00f0 1B78     	 ldrb r3,[r3]
 787:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2789              	 .loc 4 787 0
 2790 00f2 181C     	 mov r0,r3
 2791 00f4 BD46     	 mov sp,r7
 2792 00f6 06B0     	 add sp,sp,#24
 2793              	 
 2794 00f8 80BD     	 pop {r7,pc}
 2795              	 .cfi_endproc
 2796              	.LFE151:
 2798 00fa C046     	 .section .text.I2C_MASTER_AbortTransmitIRQ,"ax",%progbits
 2799              	 .align 2
 2800              	 .code 16
 2801              	 .thumb_func
 2803              	I2C_MASTER_AbortTransmitIRQ:
 2804              	.LFB152:
 788:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 789:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
 790:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2805              	 .loc 4 790 0
 2806              	 .cfi_startproc
 2807 0000 80B5     	 push {r7,lr}
 2808              	.LCFI123:
 2809              	 .cfi_def_cfa_offset 8
 2810              	 .cfi_offset 7,-8
 2811              	 .cfi_offset 14,-4
 2812 0002 82B0     	 sub sp,sp,#8
 2813              	.LCFI124:
 2814              	 .cfi_def_cfa_offset 16
 2815 0004 00AF     	 add r7,sp,#0
 2816              	.LCFI125:
 2817              	 .cfi_def_cfa_register 7
 2818 0006 7860     	 str r0,[r7,#4]
 791:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 2819              	 .loc 4 791 0
 2820 0008 7B68     	 ldr r3,[r7,#4]
 2821 000a 9B68     	 ldr r3,[r3,#8]
 2822 000c 2622     	 mov r2,#38
 2823 000e 0021     	 mov r1,#0
 2824 0010 9954     	 strb r1,[r3,r2]
 792:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_data = NULL;
 2825              	 .loc 4 792 0
 2826 0012 7B68     	 ldr r3,[r7,#4]
 2827 0014 9B68     	 ldr r3,[r3,#8]
 2828 0016 0022     	 mov r2,#0
 2829 0018 1A60     	 str r2,[r3]
 793:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 2830              	 .loc 4 793 0
 2831 001a 7B68     	 ldr r3,[r7,#4]
 2832 001c 9B68     	 ldr r3,[r3,#8]
 2833 001e 2822     	 mov r2,#40
 2834 0020 0021     	 mov r1,#0
 2835 0022 9954     	 strb r1,[r3,r2]
 794:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 795:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Disable the transmit interrupts*/
 796:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 2836              	 .loc 4 796 0
 2837 0024 7B68     	 ldr r3,[r7,#4]
 2838 0026 5B68     	 ldr r3,[r3,#4]
 2839 0028 9B7F     	 ldrb r3,[r3,#30]
 2840 002a 002B     	 cmp r3,#0
 2841 002c 0CD0     	 beq .L141
 797:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 798:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Disable the transmit FIFO event*/
 799:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 2842              	 .loc 4 799 0
 2843 002e 7B68     	 ldr r3,[r7,#4]
 2844 0030 1A68     	 ldr r2,[r3]
 2845 0032 8023     	 mov r3,#128
 2846 0034 DB05     	 lsl r3,r3,#23
 2847 0036 101C     	 mov r0,r2
 2848 0038 191C     	 mov r1,r3
 2849 003a FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 800:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 2850              	 .loc 4 800 0
 2851 003e 7B68     	 ldr r3,[r7,#4]
 2852 0040 1B68     	 ldr r3,[r3]
 2853 0042 181C     	 mov r0,r3
 2854 0044 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
 2855              	.L141:
 801:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 802:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 2856              	 .loc 4 802 0
 2857 0048 7A68     	 ldr r2,[r7,#4]
 2858 004a 8023     	 mov r3,#128
 2859 004c DB05     	 lsl r3,r3,#23
 2860 004e 101C     	 mov r0,r2
 2861 0050 191C     	 mov r1,r3
 2862 0052 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
 803:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 2863              	 .loc 4 803 0
 2864 0056 BD46     	 mov sp,r7
 2865 0058 02B0     	 add sp,sp,#8
 2866              	 
 2867 005a 80BD     	 pop {r7,pc}
 2868              	 .cfi_endproc
 2869              	.LFE152:
 2871              	 .section .text.I2C_MASTER_StartReceiveIRQ,"ax",%progbits
 2872              	 .align 2
 2873              	 .global I2C_MASTER_StartReceiveIRQ
 2874              	 .code 16
 2875              	 .thumb_func
 2877              	I2C_MASTER_StartReceiveIRQ:
 2878              	.LFB153:
 804:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 805:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 806:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 807:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_
 808:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                uint8_t * data, const uint32_t count, bool send_stop
 809:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 2879              	 .loc 4 809 0
 2880              	 .cfi_startproc
 2881 0000 80B5     	 push {r7,lr}
 2882              	.LCFI126:
 2883              	 .cfi_def_cfa_offset 8
 2884              	 .cfi_offset 7,-8
 2885              	 .cfi_offset 14,-4
 2886 0002 86B0     	 sub sp,sp,#24
 2887              	.LCFI127:
 2888              	 .cfi_def_cfa_offset 32
 2889 0004 00AF     	 add r7,sp,#0
 2890              	.LCFI128:
 2891              	 .cfi_def_cfa_register 7
 2892 0006 F860     	 str r0,[r7,#12]
 2893 0008 7A60     	 str r2,[r7,#4]
 2894 000a 3B60     	 str r3,[r7]
 2895 000c 0B23     	 mov r3,#11
 2896 000e FB18     	 add r3,r7,r3
 2897 0010 0A1C     	 add r2,r1,#0
 2898 0012 1A70     	 strb r2,[r3]
 810:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 811:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 812:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 813:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 2899              	 .loc 4 813 0
 2900 0014 1723     	 mov r3,#23
 2901 0016 FB18     	 add r3,r7,r3
 2902 0018 0222     	 mov r2,#2
 2903 001a 1A70     	 strb r2,[r3]
 814:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 2904              	 .loc 4 814 0
 2905 001c FB68     	 ldr r3,[r7,#12]
 2906 001e 9B68     	 ldr r3,[r3,#8]
 2907 0020 3B61     	 str r3,[r7,#16]
 815:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 816:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (
 2908              	 .loc 4 816 0
 2909 0022 FB68     	 ldr r3,[r7,#12]
 2910 0024 002B     	 cmp r3,#0
 2911 0026 17D0     	 beq .L143
 2912              	 .loc 4 816 0 is_stmt 0 discriminator 1
 2913 0028 0B23     	 mov r3,#11
 2914 002a FB18     	 add r3,r7,r3
 2915 002c 1B78     	 ldrb r3,[r3]
 2916 002e 0122     	 mov r2,#1
 2917 0030 5340     	 eor r3,r2
 2918 0032 DBB2     	 uxtb r3,r3
 2919 0034 002B     	 cmp r3,#0
 2920 0036 09D0     	 beq .L144
 2921              	 .loc 4 816 0 discriminator 2
 2922 0038 FB68     	 ldr r3,[r7,#12]
 2923 003a 9B68     	 ldr r3,[r3,#8]
 2924 003c 2822     	 mov r2,#40
 2925 003e 9B5C     	 ldrb r3,[r3,r2]
 2926 0040 DBB2     	 uxtb r3,r3
 2927 0042 0122     	 mov r2,#1
 2928 0044 5340     	 eor r3,r2
 2929 0046 DBB2     	 uxtb r3,r3
 2930 0048 002B     	 cmp r3,#0
 2931 004a 05D1     	 bne .L143
 2932              	.L144:
 2933              	 .loc 4 816 0 discriminator 4
 2934 004c 3B68     	 ldr r3,[r7]
 2935 004e 002B     	 cmp r3,#0
 2936 0050 02D0     	 beq .L143
 2937              	 .loc 4 816 0 discriminator 5
 2938 0052 3B6A     	 ldr r3,[r7,#32]
 2939 0054 002B     	 cmp r3,#0
 2940 0056 04D1     	 bne .L145
 2941              	.L143:
 817:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	   (count == 0U)))
 818:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 819:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 2942              	 .loc 4 819 0 is_stmt 1
 2943 0058 1723     	 mov r3,#23
 2944 005a FB18     	 add r3,r7,r3
 2945 005c 0122     	 mov r2,#1
 2946 005e 1A70     	 strb r2,[r3]
 2947 0060 4BE0     	 b .L146
 2948              	.L145:
 820:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 821:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 822:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 823:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->rx_busy == false)
 2949              	 .loc 4 823 0
 2950 0062 3B69     	 ldr r3,[r7,#16]
 2951 0064 2722     	 mov r2,#39
 2952 0066 9B5C     	 ldrb r3,[r3,r2]
 2953 0068 DBB2     	 uxtb r3,r3
 2954 006a 0122     	 mov r2,#1
 2955 006c 5340     	 eor r3,r2
 2956 006e DBB2     	 uxtb r3,r3
 2957 0070 002B     	 cmp r3,#0
 2958 0072 42D0     	 beq .L146
 824:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 825:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 2959              	 .loc 4 825 0
 2960 0074 3B69     	 ldr r3,[r7,#16]
 2961 0076 0122     	 mov r2,#1
 2962 0078 9A61     	 str r2,[r3,#24]
 826:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 827:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* If no active reception in progress, obtain the address of data buffer and number of data b
 828:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->rx_data = data;
 2963              	 .loc 4 828 0
 2964 007a 3B69     	 ldr r3,[r7,#16]
 2965 007c 3A68     	 ldr r2,[r7]
 2966 007e 5A60     	 str r2,[r3,#4]
 829:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->rx_data_count = count;
 2967              	 .loc 4 829 0
 2968 0080 3B69     	 ldr r3,[r7,#16]
 2969 0082 3A6A     	 ldr r2,[r7,#32]
 2970 0084 1A61     	 str r2,[r3,#16]
 830:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data = data;
 2971              	 .loc 4 830 0
 2972 0086 3B69     	 ldr r3,[r7,#16]
 2973 0088 3A68     	 ldr r2,[r7]
 2974 008a 1A60     	 str r2,[r3]
 831:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_count = count;
 2975              	 .loc 4 831 0
 2976 008c 3B69     	 ldr r3,[r7,#16]
 2977 008e 3A6A     	 ldr r2,[r7,#32]
 2978 0090 9A60     	 str r2,[r3,#8]
 832:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_busy = true;
 2979              	 .loc 4 832 0
 2980 0092 3B69     	 ldr r3,[r7,#16]
 2981 0094 2622     	 mov r2,#38
 2982 0096 0121     	 mov r1,#1
 2983 0098 9954     	 strb r1,[r3,r2]
 833:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->rx_busy = true;
 2984              	 .loc 4 833 0
 2985 009a 3B69     	 ldr r3,[r7,#16]
 2986 009c 2722     	 mov r2,#39
 2987 009e 0121     	 mov r1,#1
 2988 00a0 9954     	 strb r1,[r3,r2]
 834:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->send_stop = send_stop;
 2989              	 .loc 4 834 0
 2990 00a2 2423     	 mov r3,#36
 2991 00a4 FB18     	 add r3,r7,r3
 2992 00a6 1A78     	 ldrb r2,[r3]
 2993 00a8 3B69     	 ldr r3,[r7,#16]
 2994 00aa DA61     	 str r2,[r3,#28]
 835:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->send_nack = send_nack;
 2995              	 .loc 4 835 0
 2996 00ac 2823     	 mov r3,#40
 2997 00ae FB18     	 add r3,r7,r3
 2998 00b0 1A78     	 ldrb r2,[r3]
 2999 00b2 3B69     	 ldr r3,[r7,#16]
 3000 00b4 1A62     	 str r2,[r3,#32]
 836:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->rx_data_index = 0U;
 3001              	 .loc 4 836 0
 3002 00b6 3B69     	 ldr r3,[r7,#16]
 3003 00b8 0022     	 mov r2,#0
 3004 00ba 5A61     	 str r2,[r3,#20]
 837:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  ptr_runtime->tx_data_index = 0U;
 3005              	 .loc 4 837 0
 3006 00bc 3B69     	 ldr r3,[r7,#16]
 3007 00be 0022     	 mov r2,#0
 3008 00c0 DA60     	 str r2,[r3,#12]
 838:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 839:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  if (handle->config->rxFIFO_size > 0)
 3009              	 .loc 4 839 0
 3010 00c2 FB68     	 ldr r3,[r7,#12]
 3011 00c4 5B68     	 ldr r3,[r3,#4]
 3012 00c6 DB7F     	 ldrb r3,[r3,#31]
 3013 00c8 002B     	 cmp r3,#0
 3014 00ca 08D0     	 beq .L147
 840:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 841:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 3015              	 .loc 4 841 0
 3016 00cc F868     	 ldr r0,[r7,#12]
 3017 00ce 0B23     	 mov r3,#11
 3018 00d0 FB18     	 add r3,r7,r3
 3019 00d2 1978     	 ldrb r1,[r3]
 3020 00d4 7A68     	 ldr r2,[r7,#4]
 3021 00d6 3B6A     	 ldr r3,[r7,#32]
 3022 00d8 FFF7FEFF 	 bl I2C_MASTER_lReceive_FIFOData
 3023 00dc 09E0     	 b .L148
 3024              	.L147:
 842:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 843:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  else
 844:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  {
 845:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	    I2C_MASTER_lReceive_StdData(handle, send_start, address);
 3025              	 .loc 4 845 0
 3026 00de F968     	 ldr r1,[r7,#12]
 3027 00e0 0B23     	 mov r3,#11
 3028 00e2 FB18     	 add r3,r7,r3
 3029 00e4 1A78     	 ldrb r2,[r3]
 3030 00e6 7B68     	 ldr r3,[r7,#4]
 3031 00e8 081C     	 mov r0,r1
 3032 00ea 111C     	 mov r1,r2
 3033 00ec 1A1C     	 mov r2,r3
 3034 00ee FFF7FEFF 	 bl I2C_MASTER_lReceive_StdData
 3035              	.L148:
 846:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  }
 847:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	  status = I2C_MASTER_STATUS_SUCCESS;
 3036              	 .loc 4 847 0
 3037 00f2 1723     	 mov r3,#23
 3038 00f4 FB18     	 add r3,r7,r3
 3039 00f6 0022     	 mov r2,#0
 3040 00f8 1A70     	 strb r2,[r3]
 3041              	.L146:
 848:../Dave/Generated/I2C_MASTER/i2c_master.c **** 	}
 849:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 850:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 3042              	 .loc 4 850 0
 3043 00fa 1723     	 mov r3,#23
 3044 00fc FB18     	 add r3,r7,r3
 3045 00fe 1B78     	 ldrb r3,[r3]
 851:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3046              	 .loc 4 851 0
 3047 0100 181C     	 mov r0,r3
 3048 0102 BD46     	 mov sp,r7
 3049 0104 06B0     	 add sp,sp,#24
 3050              	 
 3051 0106 80BD     	 pop {r7,pc}
 3052              	 .cfi_endproc
 3053              	.LFE153:
 3055              	 .section .text.I2C_MASTER_ReceiveHandler,"ax",%progbits
 3056              	 .align 2
 3057              	 .global I2C_MASTER_ReceiveHandler
 3058              	 .code 16
 3059              	 .thumb_func
 3061              	I2C_MASTER_ReceiveHandler:
 3062              	.LFB154:
 852:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 853:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 854:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Receive interrupt handler for the APP.
 855:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function for different instances of the I2C_MASTER APP.
 856:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 857:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 858:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 859:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
 860:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 861:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
 862:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3063              	 .loc 4 862 0
 3064              	 .cfi_startproc
 3065 0000 90B5     	 push {r4,r7,lr}
 3066              	.LCFI129:
 3067              	 .cfi_def_cfa_offset 12
 3068              	 .cfi_offset 4,-12
 3069              	 .cfi_offset 7,-8
 3070              	 .cfi_offset 14,-4
 3071 0002 85B0     	 sub sp,sp,#20
 3072              	.LCFI130:
 3073              	 .cfi_def_cfa_offset 32
 3074 0004 00AF     	 add r7,sp,#0
 3075              	.LCFI131:
 3076              	 .cfi_def_cfa_register 7
 3077 0006 7860     	 str r0,[r7,#4]
 863:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 864:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_lindex;
 865:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 866:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 867:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 3078              	 .loc 4 867 0
 3079 0008 7B68     	 ldr r3,[r7,#4]
 3080 000a 9B68     	 ldr r3,[r3,#8]
 3081 000c BB60     	 str r3,[r7,#8]
 868:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_lindex = 0U;
 3082              	 .loc 4 868 0
 3083 000e 0F23     	 mov r3,#15
 3084 0010 FB18     	 add r3,r7,r3
 3085 0012 0022     	 mov r2,#0
 3086 0014 1A70     	 strb r2,[r3]
 869:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 870:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->rx_busy == true)
 3087              	 .loc 4 870 0
 3088 0016 BB68     	 ldr r3,[r7,#8]
 3089 0018 2722     	 mov r2,#39
 3090 001a 9B5C     	 ldrb r3,[r3,r2]
 3091 001c DBB2     	 uxtb r3,r3
 3092 001e 002B     	 cmp r3,#0
 3093 0020 00D1     	 bne .LCB2773
 3094 0022 2DE1     	 b .L150
 3095              	.LCB2773:
 871:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 872:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 3096              	 .loc 4 872 0
 3097 0024 7B68     	 ldr r3,[r7,#4]
 3098 0026 5B68     	 ldr r3,[r3,#4]
 3099 0028 DB7F     	 ldrb r3,[r3,#31]
 3100 002a 002B     	 cmp r3,#0
 3101 002c 00D1     	 bne .LCB2778
 3102 002e DFE0     	 b .L152
 3103              	.LCB2778:
 873:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 874:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /********************************************************************************************
 875:../Dave/Generated/I2C_MASTER/i2c_master.c ****        Rx FIFO enabled
 876:../Dave/Generated/I2C_MASTER/i2c_master.c ****       *********************************************************************************************
 877:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 3104              	 .loc 4 877 0
 3105 0030 22E0     	 b .L153
 3106              	.L155:
 878:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 879:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Read all the content of Receive FIFO */
 880:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(hand
 3107              	 .loc 4 880 0
 3108 0032 BB68     	 ldr r3,[r7,#8]
 3109 0034 5A68     	 ldr r2,[r3,#4]
 3110 0036 BB68     	 ldr r3,[r7,#8]
 3111 0038 5B69     	 ldr r3,[r3,#20]
 3112 003a D418     	 add r4,r2,r3
 3113 003c 7B68     	 ldr r3,[r7,#4]
 3114 003e 181C     	 mov r0,r3
 3115 0040 FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 3116 0044 031C     	 mov r3,r0
 3117 0046 2370     	 strb r3,[r4]
 881:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data_index++;
 3118              	 .loc 4 881 0
 3119 0048 BB68     	 ldr r3,[r7,#8]
 3120 004a 5B69     	 ldr r3,[r3,#20]
 3121 004c 5A1C     	 add r2,r3,#1
 3122 004e BB68     	 ldr r3,[r7,#8]
 3123 0050 5A61     	 str r2,[r3,#20]
 882:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 883:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 3124              	 .loc 4 883 0
 3125 0052 BB68     	 ldr r3,[r7,#8]
 3126 0054 5A69     	 ldr r2,[r3,#20]
 3127 0056 BB68     	 ldr r3,[r7,#8]
 3128 0058 1B69     	 ldr r3,[r3,#16]
 3129 005a 9A42     	 cmp r2,r3
 3130 005c 0CD1     	 bne .L153
 884:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 885:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Reception complete*/
 886:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->rx_busy = false;
 3131              	 .loc 4 886 0
 3132 005e BB68     	 ldr r3,[r7,#8]
 3133 0060 2722     	 mov r2,#39
 3134 0062 0021     	 mov r1,#0
 3135 0064 9954     	 strb r1,[r3,r2]
 887:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 888:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /*Disable both standard receive and alternative receive FIFO events*/
 889:../Dave/Generated/I2C_MASTER/i2c_master.c ****             XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 3136              	 .loc 4 889 0
 3137 0066 7B68     	 ldr r3,[r7,#4]
 3138 0068 1A68     	 ldr r2,[r3]
 3139 006a C023     	 mov r3,#192
 3140 006c DB05     	 lsl r3,r3,#23
 3141 006e 101C     	 mov r0,r2
 3142 0070 191C     	 mov r1,r3
 3143 0072 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 890:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                           (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDA
 891:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                      (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERN
 892:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 893:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 3144              	 .loc 4 893 0
 3145 0076 0AE0     	 b .L154
 3146              	.L153:
 877:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 3147              	 .loc 4 877 0
 3148 0078 7B68     	 ldr r3,[r7,#4]
 3149 007a 181C     	 mov r0,r3
 3150 007c FFF7FEFF 	 bl I2C_MASTER_IsRXFIFOEmpty
 3151 0080 031C     	 mov r3,r0
 3152 0082 1A1C     	 mov r2,r3
 3153 0084 0123     	 mov r3,#1
 3154 0086 5340     	 eor r3,r2
 3155 0088 DBB2     	 uxtb r3,r3
 3156 008a 002B     	 cmp r3,#0
 3157 008c D1D1     	 bne .L155
 3158              	.L154:
 894:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 895:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/
 896:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 897:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Set the trigger limit if data still to be received*/
 898:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 3159              	 .loc 4 898 0
 3160 008e BB68     	 ldr r3,[r7,#8]
 3161 0090 5A69     	 ldr r2,[r3,#20]
 3162 0092 BB68     	 ldr r3,[r7,#8]
 3163 0094 1B69     	 ldr r3,[r3,#16]
 3164 0096 9A42     	 cmp r2,r3
 3165 0098 00D3     	 bcc .LCB2835
 3166 009a 88E0     	 b .L156
 3167              	.LCB2835:
 899:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 900:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->r
 3168              	 .loc 4 900 0
 3169 009c BB68     	 ldr r3,[r7,#8]
 3170 009e 1A69     	 ldr r2,[r3,#16]
 3171 00a0 BB68     	 ldr r3,[r7,#8]
 3172 00a2 5B69     	 ldr r3,[r3,#20]
 3173 00a4 D31A     	 sub r3,r2,r3
 3174 00a6 7A68     	 ldr r2,[r7,#4]
 3175 00a8 101C     	 mov r0,r2
 3176 00aa 191C     	 mov r1,r3
 3177 00ac FFF7FEFF 	 bl I2C_MASTER_lReconfigureRxFIFO
 901:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 902:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if ((handle->config->txFIFO_size > 0))
 3178              	 .loc 4 902 0
 3179 00b0 7B68     	 ldr r3,[r7,#4]
 3180 00b2 5B68     	 ldr r3,[r3,#4]
 3181 00b4 9B7F     	 ldrb r3,[r3,#30]
 3182 00b6 002B     	 cmp r3,#0
 3183 00b8 15D0     	 beq .L157
 903:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 904:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIF
 3184              	 .loc 4 904 0
 3185 00ba 7B68     	 ldr r3,[r7,#4]
 3186 00bc 5B68     	 ldr r3,[r3,#4]
 3187 00be 9B7F     	 ldrb r3,[r3,#30]
 3188 00c0 1A1C     	 mov r2,r3
 3189 00c2 0123     	 mov r3,#1
 3190 00c4 9340     	 lsl r3,r3,r2
 3191 00c6 1A1C     	 mov r2,r3
 905:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 3192              	 .loc 4 905 0
 3193 00c8 7B68     	 ldr r3,[r7,#4]
 3194 00ca 5B68     	 ldr r3,[r3,#4]
 3195 00cc DB7F     	 ldrb r3,[r3,#31]
 904:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 3196              	 .loc 4 904 0
 3197 00ce 191C     	 mov r1,r3
 3198 00d0 0123     	 mov r3,#1
 3199 00d2 8B40     	 lsl r3,r3,r1
 3200 00d4 101C     	 mov r0,r2
 3201 00d6 191C     	 mov r1,r3
 3202 00d8 FFF7FEFF 	 bl calculate_minfifosize
 3203 00dc 021C     	 mov r2,r0
 3204 00de 0E23     	 mov r3,#14
 3205 00e0 FB18     	 add r3,r7,r3
 3206 00e2 1A70     	 strb r2,[r3]
 3207 00e4 03E0     	 b .L158
 3208              	.L157:
 906:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 907:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 908:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 909:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = 2U;
 3209              	 .loc 4 909 0
 3210 00e6 0E23     	 mov r3,#14
 3211 00e8 FB18     	 add r3,r7,r3
 3212 00ea 0222     	 mov r2,#2
 3213 00ec 1A70     	 strb r2,[r3]
 3214              	.L158:
 910:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 911:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 912:../Dave/Generated/I2C_MASTER/i2c_master.c ****          Rx and Tx FIFO enabled
 913:../Dave/Generated/I2C_MASTER/i2c_master.c ****         *******************************************************************************************
 914:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (handle->config->txFIFO_size > 0)
 3215              	 .loc 4 914 0
 3216 00ee 7B68     	 ldr r3,[r7,#4]
 3217 00f0 5B68     	 ldr r3,[r3,#4]
 3218 00f2 9B7F     	 ldrb r3,[r3,#30]
 3219 00f4 002B     	 cmp r3,#0
 3220 00f6 41D0     	 beq .L159
 915:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 916:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Fill the transmit FIFO */
 917:../Dave/Generated/I2C_MASTER/i2c_master.c ****           while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 3221              	 .loc 4 917 0
 3222 00f8 33E0     	 b .L160
 3223              	.L165:
 918:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 919:../Dave/Generated/I2C_MASTER/i2c_master.c ****             if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 3224              	 .loc 4 919 0
 3225 00fa BB68     	 ldr r3,[r7,#8]
 3226 00fc DA68     	 ldr r2,[r3,#12]
 3227 00fe BB68     	 ldr r3,[r7,#8]
 3228 0100 9B68     	 ldr r3,[r3,#8]
 3229 0102 9A42     	 cmp r2,r3
 3230 0104 2CD2     	 bcs .L161
 920:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 921:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime
 3231              	 .loc 4 921 0
 3232 0106 BB68     	 ldr r3,[r7,#8]
 3233 0108 DB68     	 ldr r3,[r3,#12]
 3234 010a 5A1C     	 add r2,r3,#1
 3235 010c BB68     	 ldr r3,[r7,#8]
 3236 010e 9B68     	 ldr r3,[r3,#8]
 3237 0110 9A42     	 cmp r2,r3
 3238 0112 08D1     	 bne .L162
 3239              	 .loc 4 921 0 is_stmt 0 discriminator 1
 3240 0114 BB68     	 ldr r3,[r7,#8]
 3241 0116 1B6A     	 ldr r3,[r3,#32]
 3242 0118 012B     	 cmp r3,#1
 3243 011a 04D1     	 bne .L162
 922:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 923:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveNACK(handle);
 3244              	 .loc 4 923 0 is_stmt 1
 3245 011c 7B68     	 ldr r3,[r7,#4]
 3246 011e 181C     	 mov r0,r3
 3247 0120 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3248 0124 03E0     	 b .L163
 3249              	.L162:
 924:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 925:../Dave/Generated/I2C_MASTER/i2c_master.c ****               else
 926:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 927:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveACK(handle);
 3250              	 .loc 4 927 0
 3251 0126 7B68     	 ldr r3,[r7,#4]
 3252 0128 181C     	 mov r0,r3
 3253 012a FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3254              	.L163:
 928:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 929:../Dave/Generated/I2C_MASTER/i2c_master.c ****               ptr_runtime->tx_data_index++;
 3255              	 .loc 4 929 0
 3256 012e BB68     	 ldr r3,[r7,#8]
 3257 0130 DB68     	 ldr r3,[r3,#12]
 3258 0132 5A1C     	 add r2,r3,#1
 3259 0134 BB68     	 ldr r3,[r7,#8]
 3260 0136 DA60     	 str r2,[r3,#12]
 930:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 931:../Dave/Generated/I2C_MASTER/i2c_master.c ****               /* if fifo size- break */
 932:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if ((++fifo_lindex) >= fifo_min)
 3261              	 .loc 4 932 0
 3262 0138 0F23     	 mov r3,#15
 3263 013a FB18     	 add r3,r7,r3
 3264 013c 0F22     	 mov r2,#15
 3265 013e BA18     	 add r2,r7,r2
 3266 0140 1278     	 ldrb r2,[r2]
 3267 0142 0132     	 add r2,r2,#1
 3268 0144 1A70     	 strb r2,[r3]
 3269 0146 0F23     	 mov r3,#15
 3270 0148 FA18     	 add r2,r7,r3
 3271 014a 0E23     	 mov r3,#14
 3272 014c FB18     	 add r3,r7,r3
 3273 014e 1278     	 ldrb r2,[r2]
 3274 0150 1B78     	 ldrb r3,[r3]
 3275 0152 9A42     	 cmp r2,r3
 3276 0154 05D3     	 bcc .L160
 933:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 934:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 fifo_lindex = 0U;
 3277              	 .loc 4 934 0
 3278 0156 0F23     	 mov r3,#15
 3279 0158 FB18     	 add r3,r7,r3
 3280 015a 0022     	 mov r2,#0
 3281 015c 1A70     	 strb r2,[r3]
 935:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 break;
 3282              	 .loc 4 935 0
 3283 015e 0CE0     	 b .L164
 3284              	.L161:
 936:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 937:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
 938:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
 939:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 940:../Dave/Generated/I2C_MASTER/i2c_master.c ****               break;
 3285              	 .loc 4 940 0
 3286 0160 0BE0     	 b .L164
 3287              	.L160:
 917:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 3288              	 .loc 4 917 0
 3289 0162 7B68     	 ldr r3,[r7,#4]
 3290 0164 181C     	 mov r0,r3
 3291 0166 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 3292 016a 031C     	 mov r3,r0
 3293 016c 1A1C     	 mov r2,r3
 3294 016e 0123     	 mov r3,#1
 3295 0170 5340     	 eor r3,r2
 3296 0172 DBB2     	 uxtb r3,r3
 3297 0174 002B     	 cmp r3,#0
 3298 0176 C0D1     	 bne .L165
 3299 0178 19E0     	 b .L156
 3300              	.L164:
 3301 017a 18E0     	 b .L156
 3302              	.L159:
 941:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
 942:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 943:../Dave/Generated/I2C_MASTER/i2c_master.c ****        } /* end of  if((handle->config->txFIFO_size > 0)) */
 944:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 945:../Dave/Generated/I2C_MASTER/i2c_master.c ****           Rx FIFO is enabled, Tx FIFO disabled
 946:../Dave/Generated/I2C_MASTER/i2c_master.c ****        ********************************************************************************************
 947:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 948:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 949:../Dave/Generated/I2C_MASTER/i2c_master.c ****          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->sen
 3303              	 .loc 4 949 0
 3304 017c BB68     	 ldr r3,[r7,#8]
 3305 017e DB68     	 ldr r3,[r3,#12]
 3306 0180 5A1C     	 add r2,r3,#1
 3307 0182 BB68     	 ldr r3,[r7,#8]
 3308 0184 9B68     	 ldr r3,[r3,#8]
 3309 0186 9A42     	 cmp r2,r3
 3310 0188 08D1     	 bne .L166
 3311              	 .loc 4 949 0 is_stmt 0 discriminator 1
 3312 018a BB68     	 ldr r3,[r7,#8]
 3313 018c 1B6A     	 ldr r3,[r3,#32]
 3314 018e 012B     	 cmp r3,#1
 3315 0190 04D1     	 bne .L166
 950:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 951:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveNACK(handle);
 3316              	 .loc 4 951 0 is_stmt 1
 3317 0192 7B68     	 ldr r3,[r7,#4]
 3318 0194 181C     	 mov r0,r3
 3319 0196 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3320 019a 03E0     	 b .L167
 3321              	.L166:
 952:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 953:../Dave/Generated/I2C_MASTER/i2c_master.c ****          else
 954:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 955:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveACK(handle);
 3322              	 .loc 4 955 0
 3323 019c 7B68     	 ldr r3,[r7,#4]
 3324 019e 181C     	 mov r0,r3
 3325 01a0 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3326              	.L167:
 956:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 957:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 958:../Dave/Generated/I2C_MASTER/i2c_master.c ****          ptr_runtime->tx_data_index++;
 3327              	 .loc 4 958 0
 3328 01a4 BB68     	 ldr r3,[r7,#8]
 3329 01a6 DB68     	 ldr r3,[r3,#12]
 3330 01a8 5A1C     	 add r2,r3,#1
 3331 01aa BB68     	 ldr r3,[r7,#8]
 3332 01ac DA60     	 str r2,[r3,#12]
 3333              	.L156:
 959:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 960:../Dave/Generated/I2C_MASTER/i2c_master.c ****      } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
 961:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 962:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if last byte to receive then disable receive events and jump to callback routine
 963:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 964:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 3334              	 .loc 4 964 0
 3335 01ae BB68     	 ldr r3,[r7,#8]
 3336 01b0 5A69     	 ldr r2,[r3,#20]
 3337 01b2 BB68     	 ldr r3,[r7,#8]
 3338 01b4 1B69     	 ldr r3,[r3,#16]
 3339 01b6 9A42     	 cmp r2,r3
 3340 01b8 62D1     	 bne .L150
 965:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 966:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Clear both standard receive and alternative receive FIFO events*/
 967:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVE
 3341              	 .loc 4 967 0
 3342 01ba 7B68     	 ldr r3,[r7,#4]
 3343 01bc 1A68     	 ldr r2,[r3]
 3344 01be C023     	 mov r3,#192
 3345 01c0 DB05     	 lsl r3,r3,#23
 3346 01c2 101C     	 mov r0,r2
 3347 01c4 191C     	 mov r1,r3
 3348 01c6 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 968:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVE
 969:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 970:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Disable both standard receive and alternative receive events*/
 971:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE
 3349              	 .loc 4 971 0
 3350 01ca 7B68     	 ldr r3,[r7,#4]
 3351 01cc 1A68     	 ldr r2,[r3]
 3352 01ce C023     	 mov r3,#192
 3353 01d0 1B02     	 lsl r3,r3,#8
 3354 01d2 101C     	 mov r0,r2
 3355 01d4 191C     	 mov r1,r3
 3356 01d6 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 972:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RE
 973:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 974:../Dave/Generated/I2C_MASTER/i2c_master.c ****        if (ptr_runtime->bus_acquired == true)
 3357              	 .loc 4 974 0
 3358 01da BB68     	 ldr r3,[r7,#8]
 3359 01dc 2822     	 mov r2,#40
 3360 01de 9B5C     	 ldrb r3,[r3,r2]
 3361 01e0 DBB2     	 uxtb r3,r3
 3362 01e2 002B     	 cmp r3,#0
 3363 01e4 4CD0     	 beq .L150
 975:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 976:../Dave/Generated/I2C_MASTER/i2c_master.c ****          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 3364              	 .loc 4 976 0
 3365 01e6 7B68     	 ldr r3,[r7,#4]
 3366 01e8 181C     	 mov r0,r3
 3367 01ea FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_RxCallback
 3368 01ee 47E0     	 b .L150
 3369              	.L152:
 977:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 978:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 979:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /*  end of if(handle->config->rxFIFO_size > 0) */
 980:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 981:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO disabled
 982:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 983:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 984:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 985:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle
 3370              	 .loc 4 985 0
 3371 01f0 BB68     	 ldr r3,[r7,#8]
 3372 01f2 5A68     	 ldr r2,[r3,#4]
 3373 01f4 BB68     	 ldr r3,[r7,#8]
 3374 01f6 5B69     	 ldr r3,[r3,#20]
 3375 01f8 D418     	 add r4,r2,r3
 3376 01fa 7B68     	 ldr r3,[r7,#4]
 3377 01fc 181C     	 mov r0,r3
 3378 01fe FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 3379 0202 031C     	 mov r3,r0
 3380 0204 2370     	 strb r3,[r4]
 986:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data_index++;
 3381              	 .loc 4 986 0
 3382 0206 BB68     	 ldr r3,[r7,#8]
 3383 0208 5B69     	 ldr r3,[r3,#20]
 3384 020a 5A1C     	 add r2,r3,#1
 3385 020c BB68     	 ldr r3,[r7,#8]
 3386 020e 5A61     	 str r2,[r3,#20]
 987:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 988:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 3387              	 .loc 4 988 0
 3388 0210 BB68     	 ldr r3,[r7,#8]
 3389 0212 5A69     	 ldr r2,[r3,#20]
 3390 0214 BB68     	 ldr r3,[r7,#8]
 3391 0216 1B69     	 ldr r3,[r3,#16]
 3392 0218 9A42     	 cmp r2,r3
 3393 021a 1FD2     	 bcs .L169
 989:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 990:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 3394              	 .loc 4 990 0
 3395 021c BB68     	 ldr r3,[r7,#8]
 3396 021e DA68     	 ldr r2,[r3,#12]
 3397 0220 BB68     	 ldr r3,[r7,#8]
 3398 0222 9B68     	 ldr r3,[r3,#8]
 3399 0224 9A42     	 cmp r2,r3
 3400 0226 2BD2     	 bcs .L150
 991:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 992:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise A
 993:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->
 3401              	 .loc 4 993 0
 3402 0228 BB68     	 ldr r3,[r7,#8]
 3403 022a DA68     	 ldr r2,[r3,#12]
 3404 022c BB68     	 ldr r3,[r7,#8]
 3405 022e 9B68     	 ldr r3,[r3,#8]
 3406 0230 013B     	 sub r3,r3,#1
 3407 0232 9A42     	 cmp r2,r3
 3408 0234 08D1     	 bne .L171
 3409              	 .loc 4 993 0 is_stmt 0 discriminator 1
 3410 0236 BB68     	 ldr r3,[r7,#8]
 3411 0238 1B6A     	 ldr r3,[r3,#32]
 3412 023a 012B     	 cmp r3,#1
 3413 023c 04D1     	 bne .L171
 994:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 995:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 3414              	 .loc 4 995 0 is_stmt 1
 3415 023e 7B68     	 ldr r3,[r7,#4]
 3416 0240 181C     	 mov r0,r3
 3417 0242 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 3418 0246 03E0     	 b .L172
 3419              	.L171:
 996:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 997:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 998:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 999:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 3420              	 .loc 4 999 0
 3421 0248 7B68     	 ldr r3,[r7,#4]
 3422 024a 181C     	 mov r0,r3
 3423 024c FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 3424              	.L172:
1000:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1001:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 3425              	 .loc 4 1001 0
 3426 0250 BB68     	 ldr r3,[r7,#8]
 3427 0252 DB68     	 ldr r3,[r3,#12]
 3428 0254 5A1C     	 add r2,r3,#1
 3429 0256 BB68     	 ldr r3,[r7,#8]
 3430 0258 DA60     	 str r2,[r3,#12]
 3431 025a 11E0     	 b .L150
 3432              	.L169:
1002:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1003:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1004:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1005:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1006:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Disable both standard receive and alternative receive events*/
1007:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIV
 3433              	 .loc 4 1007 0
 3434 025c 7B68     	 ldr r3,[r7,#4]
 3435 025e 1A68     	 ldr r2,[r3]
 3436 0260 C023     	 mov r3,#192
 3437 0262 1B02     	 lsl r3,r3,#8
 3438 0264 101C     	 mov r0,r2
 3439 0266 191C     	 mov r1,r3
 3440 0268 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
1008:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                              (uint32_t)XMC_USIC_CH_EVENT_STANDARD_R
1009:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 3441              	 .loc 4 1009 0
 3442 026c BB68     	 ldr r3,[r7,#8]
 3443 026e 2822     	 mov r2,#40
 3444 0270 9B5C     	 ldrb r3,[r3,r2]
 3445 0272 DBB2     	 uxtb r3,r3
 3446 0274 002B     	 cmp r3,#0
 3447 0276 03D0     	 beq .L150
1010:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1011:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 3448              	 .loc 4 1011 0
 3449 0278 7B68     	 ldr r3,[r7,#4]
 3450 027a 181C     	 mov r0,r3
 3451 027c FFF7FEFF 	 bl I2C_MASTER_lSendStop_JumpTo_RxCallback
 3452              	.L150:
1012:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1013:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1014:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1015:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of  if(ptr_runtime->rx_busy == true)*/
1016:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3453              	 .loc 4 1016 0
 3454 0280 BD46     	 mov sp,r7
 3455 0282 05B0     	 add sp,sp,#20
 3456              	 
 3457 0284 90BD     	 pop {r4,r7,pc}
 3458              	 .cfi_endproc
 3459              	.LFE154:
 3461 0286 C046     	 .section .text.I2C_MASTER_lSendStop_JumpTo_RxCallback,"ax",%progbits
 3462              	 .align 2
 3463              	 .code 16
 3464              	 .thumb_func
 3466              	I2C_MASTER_lSendStop_JumpTo_RxCallback:
 3467              	.LFB155:
1017:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1018:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to receive callback routine */
1019:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
1020:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3468              	 .loc 4 1020 0
 3469              	 .cfi_startproc
 3470 0000 80B5     	 push {r7,lr}
 3471              	.LCFI132:
 3472              	 .cfi_def_cfa_offset 8
 3473              	 .cfi_offset 7,-8
 3474              	 .cfi_offset 14,-4
 3475 0002 84B0     	 sub sp,sp,#16
 3476              	.LCFI133:
 3477              	 .cfi_def_cfa_offset 24
 3478 0004 00AF     	 add r7,sp,#0
 3479              	.LCFI134:
 3480              	 .cfi_def_cfa_register 7
 3481 0006 7860     	 str r0,[r7,#4]
1021:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
1022:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1023:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 3482              	 .loc 4 1023 0
 3483 0008 7B68     	 ldr r3,[r7,#4]
 3484 000a 9B68     	 ldr r3,[r3,#8]
 3485 000c FB60     	 str r3,[r7,#12]
1024:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1025:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 3486              	 .loc 4 1025 0
 3487 000e FB68     	 ldr r3,[r7,#12]
 3488 0010 DB69     	 ldr r3,[r3,#28]
 3489 0012 012B     	 cmp r3,#1
 3490 0014 10D1     	 bne .L174
1026:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1027:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 3491              	 .loc 4 1027 0
 3492 0016 C046     	 mov r8,r8
 3493              	.L175:
 3494              	 .loc 4 1027 0 is_stmt 0 discriminator 1
 3495 0018 7B68     	 ldr r3,[r7,#4]
 3496 001a 1B68     	 ldr r3,[r3]
 3497 001c 181C     	 mov r0,r3
 3498 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 3499 0022 031E     	 sub r3,r0,#0
 3500 0024 802B     	 cmp r3,#128
 3501 0026 F7D0     	 beq .L175
1028:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1029:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 3502              	 .loc 4 1029 0 is_stmt 1
 3503 0028 FB68     	 ldr r3,[r7,#12]
 3504 002a 2822     	 mov r2,#40
 3505 002c 0021     	 mov r1,#0
 3506 002e 9954     	 strb r1,[r3,r2]
1030:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1031:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 3507              	 .loc 4 1031 0
 3508 0030 7B68     	 ldr r3,[r7,#4]
 3509 0032 181C     	 mov r0,r3
 3510 0034 FFF7FEFF 	 bl I2C_MASTER_SendStop
 3511              	.L174:
1032:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1033:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1034:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 3512              	 .loc 4 1034 0
 3513 0038 C046     	 mov r8,r8
 3514              	.L176:
 3515              	 .loc 4 1034 0 is_stmt 0 discriminator 1
 3516 003a 7B68     	 ldr r3,[r7,#4]
 3517 003c 1B68     	 ldr r3,[r3]
 3518 003e 181C     	 mov r0,r3
 3519 0040 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 3520 0044 031E     	 sub r3,r0,#0
 3521 0046 802B     	 cmp r3,#128
 3522 0048 F7D0     	 beq .L176
1035:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1036:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reception complete */
1037:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->rx_busy = false;
 3523              	 .loc 4 1037 0 is_stmt 1
 3524 004a FB68     	 ldr r3,[r7,#12]
 3525 004c 2722     	 mov r2,#39
 3526 004e 0021     	 mov r1,#0
 3527 0050 9954     	 strb r1,[r3,r2]
1038:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 3528              	 .loc 4 1038 0
 3529 0052 FB68     	 ldr r3,[r7,#12]
 3530 0054 2622     	 mov r2,#38
 3531 0056 0021     	 mov r1,#0
 3532 0058 9954     	 strb r1,[r3,r2]
1039:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1040:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rx_cbhandler != NULL)
 3533              	 .loc 4 1040 0
 3534 005a 7B68     	 ldr r3,[r7,#4]
 3535 005c 5B68     	 ldr r3,[r3,#4]
 3536 005e DB68     	 ldr r3,[r3,#12]
 3537 0060 002B     	 cmp r3,#0
 3538 0062 03D0     	 beq .L173
1041:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1042:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of reception' callback function*/
1043:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->rx_cbhandler();
 3539              	 .loc 4 1043 0
 3540 0064 7B68     	 ldr r3,[r7,#4]
 3541 0066 5B68     	 ldr r3,[r3,#4]
 3542 0068 DB68     	 ldr r3,[r3,#12]
 3543 006a 9847     	 blx r3
 3544              	.L173:
1044:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1045:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3545              	 .loc 4 1045 0
 3546 006c BD46     	 mov sp,r7
 3547 006e 04B0     	 add sp,sp,#16
 3548              	 
 3549 0070 80BD     	 pop {r7,pc}
 3550              	 .cfi_endproc
 3551              	.LFE155:
 3553 0072 C046     	 .section .text.I2C_MASTER_lAbortReceiveIRQ,"ax",%progbits
 3554              	 .align 2
 3555              	 .code 16
 3556              	 .thumb_func
 3558              	I2C_MASTER_lAbortReceiveIRQ:
 3559              	.LFB156:
1046:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1047:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1048:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
1049:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3560              	 .loc 4 1049 0
 3561              	 .cfi_startproc
 3562 0000 80B5     	 push {r7,lr}
 3563              	.LCFI135:
 3564              	 .cfi_def_cfa_offset 8
 3565              	 .cfi_offset 7,-8
 3566              	 .cfi_offset 14,-4
 3567 0002 82B0     	 sub sp,sp,#8
 3568              	.LCFI136:
 3569              	 .cfi_def_cfa_offset 16
 3570 0004 00AF     	 add r7,sp,#0
 3571              	.LCFI137:
 3572              	 .cfi_def_cfa_register 7
 3573 0006 7860     	 str r0,[r7,#4]
1050:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1051:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
 3574              	 .loc 4 1051 0
 3575 0008 7B68     	 ldr r3,[r7,#4]
 3576 000a 9B68     	 ldr r3,[r3,#8]
 3577 000c 2722     	 mov r2,#39
 3578 000e 0021     	 mov r1,#0
 3579 0010 9954     	 strb r1,[r3,r2]
1052:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 3580              	 .loc 4 1052 0
 3581 0012 7B68     	 ldr r3,[r7,#4]
 3582 0014 9B68     	 ldr r3,[r3,#8]
 3583 0016 2622     	 mov r2,#38
 3584 0018 0021     	 mov r1,#0
 3585 001a 9954     	 strb r1,[r3,r2]
1053:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_data = NULL;
 3586              	 .loc 4 1053 0
 3587 001c 7B68     	 ldr r3,[r7,#4]
 3588 001e 9B68     	 ldr r3,[r3,#8]
 3589 0020 0022     	 mov r2,#0
 3590 0022 5A60     	 str r2,[r3,#4]
1054:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1055:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 3591              	 .loc 4 1055 0
 3592 0024 7B68     	 ldr r3,[r7,#4]
 3593 0026 9B68     	 ldr r3,[r3,#8]
 3594 0028 2822     	 mov r2,#40
 3595 002a 0021     	 mov r1,#0
 3596 002c 9954     	 strb r1,[r3,r2]
1056:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1057:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Disable the receive interrupts */
1058:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 3597              	 .loc 4 1058 0
 3598 002e 7B68     	 ldr r3,[r7,#4]
 3599 0030 5B68     	 ldr r3,[r3,#4]
 3600 0032 DB7F     	 ldrb r3,[r3,#31]
 3601 0034 002B     	 cmp r3,#0
 3602 0036 08D0     	 beq .L179
1059:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1060:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_
 3603              	 .loc 4 1060 0
 3604 0038 7B68     	 ldr r3,[r7,#4]
 3605 003a 1A68     	 ldr r2,[r3]
 3606 003c C023     	 mov r3,#192
 3607 003e DB05     	 lsl r3,r3,#23
 3608 0040 101C     	 mov r0,r2
 3609 0042 191C     	 mov r1,r3
 3610 0044 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 3611 0048 07E0     	 b .L180
 3612              	.L179:
1061:../Dave/Generated/I2C_MASTER/i2c_master.c **** 						                                        (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
1062:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1063:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1064:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1065:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEI
 3613              	 .loc 4 1065 0
 3614 004a 7B68     	 ldr r3,[r7,#4]
 3615 004c 1A68     	 ldr r2,[r3]
 3616 004e C023     	 mov r3,#192
 3617 0050 1B02     	 lsl r3,r3,#8
 3618 0052 101C     	 mov r0,r2
 3619 0054 191C     	 mov r1,r3
 3620 0056 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 3621              	.L180:
1066:../Dave/Generated/I2C_MASTER/i2c_master.c **** 				                                         (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1067:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1068:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 3622              	 .loc 4 1068 0
 3623 005a 7A68     	 ldr r2,[r7,#4]
 3624 005c 8023     	 mov r3,#128
 3625 005e DB05     	 lsl r3,r3,#23
 3626 0060 101C     	 mov r0,r2
 3627 0062 191C     	 mov r1,r3
 3628 0064 FFF7FEFF 	 bl I2C_MASTER_DisableEvent
1069:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3629              	 .loc 4 1069 0
 3630 0068 BD46     	 mov sp,r7
 3631 006a 02B0     	 add sp,sp,#8
 3632              	 
 3633 006c 80BD     	 pop {r7,pc}
 3634              	 .cfi_endproc
 3635              	.LFE156:
 3637 006e C046     	 .section .text.I2C_MASTER_ProtocolHandler,"ax",%progbits
 3638              	 .align 2
 3639              	 .global I2C_MASTER_ProtocolHandler
 3640              	 .code 16
 3641              	 .thumb_func
 3643              	I2C_MASTER_ProtocolHandler:
 3644              	.LFB157:
1070:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1071:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1072:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1073:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Protocol interrupt handling function.
1074:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * The function is common for different instances of the I2C_MASTER APP.
1075:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1076:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
1077:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1078:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
1079:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1080:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
1081:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3645              	 .loc 4 1081 0
 3646              	 .cfi_startproc
 3647 0000 80B5     	 push {r7,lr}
 3648              	.LCFI138:
 3649              	 .cfi_def_cfa_offset 8
 3650              	 .cfi_offset 7,-8
 3651              	 .cfi_offset 14,-4
 3652 0002 84B0     	 sub sp,sp,#16
 3653              	.LCFI139:
 3654              	 .cfi_def_cfa_offset 24
 3655 0004 00AF     	 add r7,sp,#0
 3656              	.LCFI140:
 3657              	 .cfi_def_cfa_register 7
 3658 0006 7860     	 str r0,[r7,#4]
1082:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t psr_status;
1083:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1084:../Dave/Generated/I2C_MASTER/i2c_master.c ****   psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 3659              	 .loc 4 1084 0
 3660 0008 7B68     	 ldr r3,[r7,#4]
 3661 000a 1B68     	 ldr r3,[r3]
 3662 000c 181C     	 mov r0,r3
 3663 000e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 3664 0012 031C     	 mov r3,r0
 3665 0014 FB60     	 str r3,[r7,#12]
1085:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1086:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for nack event */
1087:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NA
 3666              	 .loc 4 1087 0
 3667 0016 7B68     	 ldr r3,[r7,#4]
 3668 0018 5B68     	 ldr r3,[r3,#4]
 3669 001a 1B69     	 ldr r3,[r3,#16]
 3670 001c 002B     	 cmp r3,#0
 3671 001e 0CD0     	 beq .L182
 3672              	 .loc 4 1087 0 is_stmt 0 discriminator 1
 3673 0020 FB68     	 ldr r3,[r7,#12]
 3674 0022 2022     	 mov r2,#32
 3675 0024 1340     	 and r3,r2
 3676 0026 08D0     	 beq .L182
1088:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1089:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 3677              	 .loc 4 1089 0 is_stmt 1
 3678 0028 7B68     	 ldr r3,[r7,#4]
 3679 002a 181C     	 mov r0,r3
 3680 002c 2021     	 mov r1,#32
 3681 002e FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1090:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->nack_cbhandler();
 3682              	 .loc 4 1090 0
 3683 0032 7B68     	 ldr r3,[r7,#4]
 3684 0034 5B68     	 ldr r3,[r3,#4]
 3685 0036 1B69     	 ldr r3,[r3,#16]
 3686 0038 9847     	 blx r3
 3687              	.L182:
1091:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1092:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1093:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for arbitration lost */
1094:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_
 3688              	 .loc 4 1094 0
 3689 003a 7B68     	 ldr r3,[r7,#4]
 3690 003c 5B68     	 ldr r3,[r3,#4]
 3691 003e 5B69     	 ldr r3,[r3,#20]
 3692 0040 002B     	 cmp r3,#0
 3693 0042 0CD0     	 beq .L183
 3694              	 .loc 4 1094 0 is_stmt 0 discriminator 1
 3695 0044 FB68     	 ldr r3,[r7,#12]
 3696 0046 4022     	 mov r2,#64
 3697 0048 1340     	 and r3,r2
 3698 004a 08D0     	 beq .L183
1095:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1096:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 3699              	 .loc 4 1096 0 is_stmt 1
 3700 004c 7B68     	 ldr r3,[r7,#4]
 3701 004e 181C     	 mov r0,r3
 3702 0050 4021     	 mov r1,#64
 3703 0052 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1097:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->arbitration_cbhandler();
 3704              	 .loc 4 1097 0
 3705 0056 7B68     	 ldr r3,[r7,#4]
 3706 0058 5B68     	 ldr r3,[r3,#4]
 3707 005a 5B69     	 ldr r3,[r3,#20]
 3708 005c 9847     	 blx r3
 3709              	.L183:
1098:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1099:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1100:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for error detected */
1101:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_
 3710              	 .loc 4 1101 0
 3711 005e 7B68     	 ldr r3,[r7,#4]
 3712 0060 5B68     	 ldr r3,[r3,#4]
 3713 0062 9B69     	 ldr r3,[r3,#24]
 3714 0064 002B     	 cmp r3,#0
 3715 0066 0FD0     	 beq .L181
 3716              	 .loc 4 1101 0 is_stmt 0 discriminator 1
 3717 0068 FA68     	 ldr r2,[r7,#12]
 3718 006a 8123     	 mov r3,#129
 3719 006c 5B00     	 lsl r3,r3,#1
 3720 006e 1340     	 and r3,r2
 3721 0070 0AD0     	 beq .L181
1102:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1103:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 3722              	 .loc 4 1103 0 is_stmt 1
 3723 0072 7A68     	 ldr r2,[r7,#4]
 3724 0074 8023     	 mov r3,#128
 3725 0076 5B00     	 lsl r3,r3,#1
 3726 0078 101C     	 mov r0,r2
 3727 007a 191C     	 mov r1,r3
 3728 007c FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1104:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->error_cbhandler();
 3729              	 .loc 4 1104 0
 3730 0080 7B68     	 ldr r3,[r7,#4]
 3731 0082 5B68     	 ldr r3,[r3,#4]
 3732 0084 9B69     	 ldr r3,[r3,#24]
 3733 0086 9847     	 blx r3
 3734              	.L181:
1105:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1106:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3735              	 .loc 4 1106 0
 3736 0088 BD46     	 mov sp,r7
 3737 008a 04B0     	 add sp,sp,#16
 3738              	 
 3739 008c 80BD     	 pop {r7,pc}
 3740              	 .cfi_endproc
 3741              	.LFE157:
 3743 008e C046     	 .section .text.I2C_MASTER_lReconfigureRxFIFO,"ax",%progbits
 3744              	 .align 2
 3745              	 .code 16
 3746              	 .thumb_func
 3748              	I2C_MASTER_lReconfigureRxFIFO:
 3749              	.LFB158:
1107:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1108:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1109:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1110:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief A local function to reconfigure Receive FIFO with the given size and trigger limit.
1111:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Size is needed because the FIFO should be disabled before changing the trigger limit by
1112:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * clearing the FIFO size.
1113:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1114:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t * pointer to the I2C_MASTER APP handle
1115:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param uint32_t  number of bytes to be received.
1116:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1117:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void.
1118:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1119:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1120:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
1121:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3750              	 .loc 4 1121 0
 3751              	 .cfi_startproc
 3752 0000 80B5     	 push {r7,lr}
 3753              	.LCFI141:
 3754              	 .cfi_def_cfa_offset 8
 3755              	 .cfi_offset 7,-8
 3756              	 .cfi_offset 14,-4
 3757 0002 86B0     	 sub sp,sp,#24
 3758              	.LCFI142:
 3759              	 .cfi_def_cfa_offset 32
 3760 0004 00AF     	 add r7,sp,#0
 3761              	.LCFI143:
 3762              	 .cfi_def_cfa_register 7
 3763 0006 7860     	 str r0,[r7,#4]
 3764 0008 3960     	 str r1,[r7]
1122:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t minfifo_value;
1123:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_fifo_size;
1124:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t rx_fifo_size;
1125:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_limit;
1126:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1127:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 3765              	 .loc 4 1127 0
 3766 000a 7B68     	 ldr r3,[r7,#4]
 3767 000c 5B68     	 ldr r3,[r3,#4]
 3768 000e DB7F     	 ldrb r3,[r3,#31]
 3769 0010 1A1C     	 mov r2,r3
 3770 0012 0123     	 mov r3,#1
 3771 0014 9340     	 lsl r3,r3,r2
 3772 0016 1A1C     	 mov r2,r3
 3773 0018 1623     	 mov r3,#22
 3774 001a FB18     	 add r3,r7,r3
 3775 001c 1A70     	 strb r2,[r3]
1128:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1129:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->txFIFO_size > 0))
 3776              	 .loc 4 1129 0
 3777 001e 7B68     	 ldr r3,[r7,#4]
 3778 0020 5B68     	 ldr r3,[r3,#4]
 3779 0022 9B7F     	 ldrb r3,[r3,#30]
 3780 0024 002B     	 cmp r3,#0
 3781 0026 0AD0     	 beq .L186
1130:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1131:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 3782              	 .loc 4 1131 0
 3783 0028 7B68     	 ldr r3,[r7,#4]
 3784 002a 5B68     	 ldr r3,[r3,#4]
 3785 002c 9B7F     	 ldrb r3,[r3,#30]
 3786 002e 1A1C     	 mov r2,r3
 3787 0030 0123     	 mov r3,#1
 3788 0032 9340     	 lsl r3,r3,r2
 3789 0034 1A1C     	 mov r2,r3
 3790 0036 1723     	 mov r3,#23
 3791 0038 FB18     	 add r3,r7,r3
 3792 003a 1A70     	 strb r2,[r3]
 3793 003c 03E0     	 b .L187
 3794              	.L186:
1132:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1133:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1134:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1135:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = 1U;
 3795              	 .loc 4 1135 0
 3796 003e 1723     	 mov r3,#23
 3797 0040 FB18     	 add r3,r7,r3
 3798 0042 0122     	 mov r2,#1
 3799 0044 1A70     	 strb r2,[r3]
 3800              	.L187:
1136:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1137:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1138:../Dave/Generated/I2C_MASTER/i2c_master.c ****   minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size))
 3801              	 .loc 4 1138 0
 3802 0046 1723     	 mov r3,#23
 3803 0048 FB18     	 add r3,r7,r3
 3804 004a 1A78     	 ldrb r2,[r3]
 3805 004c 1623     	 mov r3,#22
 3806 004e FB18     	 add r3,r7,r3
 3807 0050 1B78     	 ldrb r3,[r3]
 3808 0052 101C     	 mov r0,r2
 3809 0054 191C     	 mov r1,r3
 3810 0056 FFF7FEFF 	 bl calculate_minfifosize
 3811 005a 031C     	 mov r3,r0
 3812 005c 3B61     	 str r3,[r7,#16]
1139:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1140:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 3813              	 .loc 4 1140 0
 3814 005e 3A68     	 ldr r2,[r7]
 3815 0060 3B69     	 ldr r3,[r7,#16]
 3816 0062 101C     	 mov r0,r2
 3817 0064 191C     	 mov r1,r3
 3818 0066 FFF7FEFF 	 bl calculate_minfifosize
 3819 006a 021C     	 mov r2,r0
 3820 006c 0F23     	 mov r3,#15
 3821 006e FB18     	 add r3,r7,r3
 3822 0070 1A70     	 strb r2,[r3]
1141:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1142:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Set the limit value */
1143:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)
 3823              	 .loc 4 1143 0
 3824 0072 7B68     	 ldr r3,[r7,#4]
 3825 0074 5B68     	 ldr r3,[r3,#4]
 3826 0076 DB7F     	 ldrb r3,[r3,#31]
 3827 0078 191C     	 mov r1,r3
 3828 007a 0F23     	 mov r3,#15
 3829 007c FB18     	 add r3,r7,r3
 3830 007e 1B78     	 ldrb r3,[r3]
 3831 0080 013B     	 sub r3,r3,#1
 3832 0082 7A68     	 ldr r2,[r7,#4]
 3833 0084 101C     	 mov r0,r2
 3834 0086 1A1C     	 mov r2,r3
 3835 0088 FFF7FEFF 	 bl I2C_MASTER_SetRXFIFOTriggerLimit
1144:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3836              	 .loc 4 1144 0
 3837 008c BD46     	 mov sp,r7
 3838 008e 06B0     	 add sp,sp,#24
 3839              	 
 3840 0090 80BD     	 pop {r7,pc}
 3841              	 .cfi_endproc
 3842              	.LFE158:
 3844 0092 C046     	 .section .text.I2C_MASTER_AbortTransmit,"ax",%progbits
 3845              	 .align 2
 3846              	 .global I2C_MASTER_AbortTransmit
 3847              	 .code 16
 3848              	 .thumb_func
 3850              	I2C_MASTER_AbortTransmit:
 3851              	.LFB159:
1145:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1146:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1147:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1148:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1149:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1150:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1151:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1152:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1153:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1154:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1155:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1156:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1157:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
1158:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3852              	 .loc 4 1158 0
 3853              	 .cfi_startproc
 3854 0000 80B5     	 push {r7,lr}
 3855              	.LCFI144:
 3856              	 .cfi_def_cfa_offset 8
 3857              	 .cfi_offset 7,-8
 3858              	 .cfi_offset 14,-4
 3859 0002 84B0     	 sub sp,sp,#16
 3860              	.LCFI145:
 3861              	 .cfi_def_cfa_offset 24
 3862 0004 00AF     	 add r7,sp,#0
 3863              	.LCFI146:
 3864              	 .cfi_def_cfa_register 7
 3865 0006 7860     	 str r0,[r7,#4]
1159:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1160:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1161:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 3866              	 .loc 4 1161 0
 3867 0008 0F23     	 mov r3,#15
 3868 000a FB18     	 add r3,r7,r3
 3869 000c 0022     	 mov r2,#0
 3870 000e 1A70     	 strb r2,[r3]
1162:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1163:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 3871              	 .loc 4 1163 0
 3872 0010 7B68     	 ldr r3,[r7,#4]
 3873 0012 5B68     	 ldr r3,[r3,#4]
 3874 0014 1B7F     	 ldrb r3,[r3,#28]
 3875 0016 002B     	 cmp r3,#0
 3876 0018 04D1     	 bne .L189
1164:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1165:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
1166:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_AbortTransmitIRQ(handle);
 3877              	 .loc 4 1166 0
 3878 001a 7B68     	 ldr r3,[r7,#4]
 3879 001c 181C     	 mov r0,r3
 3880 001e FFF7FEFF 	 bl I2C_MASTER_AbortTransmitIRQ
 3881 0022 08E0     	 b .L190
 3882              	.L189:
1167:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1168:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1169:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 3883              	 .loc 4 1169 0
 3884 0024 7B68     	 ldr r3,[r7,#4]
 3885 0026 5B68     	 ldr r3,[r3,#4]
 3886 0028 1B7F     	 ldrb r3,[r3,#28]
 3887 002a 012B     	 cmp r3,#1
 3888 002c 03D0     	 beq .L190
1170:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1171:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1172:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortTransmitDMA(handle);
1173:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1174:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1175:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1176:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1177:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 3889              	 .loc 4 1177 0
 3890 002e 0F23     	 mov r3,#15
 3891 0030 FB18     	 add r3,r7,r3
 3892 0032 0122     	 mov r2,#1
 3893 0034 1A70     	 strb r2,[r3]
 3894              	.L190:
1178:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1179:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 3895              	 .loc 4 1179 0
 3896 0036 7B68     	 ldr r3,[r7,#4]
 3897 0038 1B68     	 ldr r3,[r3]
 3898 003a 7A68     	 ldr r2,[r7,#4]
 3899 003c 1268     	 ldr r2,[r2]
 3900 003e D26C     	 ldr r2,[r2,#76]
 3901 0040 0221     	 mov r1,#2
 3902 0042 0A43     	 orr r2,r1
 3903 0044 DA64     	 str r2,[r3,#76]
1180:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->FMR = 0x00000002U;/*clear TDV*/
 3904              	 .loc 4 1180 0
 3905 0046 7B68     	 ldr r3,[r7,#4]
 3906 0048 1B68     	 ldr r3,[r3]
 3907 004a 0222     	 mov r2,#2
 3908 004c 9A66     	 str r2,[r3,#104]
1181:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1182:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 3909              	 .loc 4 1182 0
 3910 004e 0F23     	 mov r3,#15
 3911 0050 FB18     	 add r3,r7,r3
 3912 0052 1B78     	 ldrb r3,[r3]
1183:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3913              	 .loc 4 1183 0
 3914 0054 181C     	 mov r0,r3
 3915 0056 BD46     	 mov sp,r7
 3916 0058 04B0     	 add sp,sp,#16
 3917              	 
 3918 005a 80BD     	 pop {r7,pc}
 3919              	 .cfi_endproc
 3920              	.LFE159:
 3922              	 .section .text.I2C_MASTER_AbortReceive,"ax",%progbits
 3923              	 .align 2
 3924              	 .global I2C_MASTER_AbortReceive
 3925              	 .code 16
 3926              	 .thumb_func
 3928              	I2C_MASTER_AbortReceive:
 3929              	.LFB160:
1184:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1185:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1186:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1187:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1188:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1189:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1190:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1191:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1192:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1193:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1194:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1195:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1196:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
1197:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 3930              	 .loc 4 1197 0
 3931              	 .cfi_startproc
 3932 0000 80B5     	 push {r7,lr}
 3933              	.LCFI147:
 3934              	 .cfi_def_cfa_offset 8
 3935              	 .cfi_offset 7,-8
 3936              	 .cfi_offset 14,-4
 3937 0002 84B0     	 sub sp,sp,#16
 3938              	.LCFI148:
 3939              	 .cfi_def_cfa_offset 24
 3940 0004 00AF     	 add r7,sp,#0
 3941              	.LCFI149:
 3942              	 .cfi_def_cfa_register 7
 3943 0006 7860     	 str r0,[r7,#4]
1198:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1199:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1200:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 3944              	 .loc 4 1200 0
 3945 0008 0F23     	 mov r3,#15
 3946 000a FB18     	 add r3,r7,r3
 3947 000c 0022     	 mov r2,#0
 3948 000e 1A70     	 strb r2,[r3]
1201:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 3949              	 .loc 4 1202 0
 3950 0010 7B68     	 ldr r3,[r7,#4]
 3951 0012 5B68     	 ldr r3,[r3,#4]
 3952 0014 5B7F     	 ldrb r3,[r3,#29]
 3953 0016 002B     	 cmp r3,#0
 3954 0018 04D1     	 bne .L193
1203:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1204:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1205:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveIRQ(handle);
 3955              	 .loc 4 1205 0
 3956 001a 7B68     	 ldr r3,[r7,#4]
 3957 001c 181C     	 mov r0,r3
 3958 001e FFF7FEFF 	 bl I2C_MASTER_lAbortReceiveIRQ
 3959 0022 08E0     	 b .L194
 3960              	.L193:
1206:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1207:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1208:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 3961              	 .loc 4 1208 0
 3962 0024 7B68     	 ldr r3,[r7,#4]
 3963 0026 5B68     	 ldr r3,[r3,#4]
 3964 0028 5B7F     	 ldrb r3,[r3,#29]
 3965 002a 012B     	 cmp r3,#1
 3966 002c 03D0     	 beq .L194
1209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1210:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1211:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveDMA(handle);
1212:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1213:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1214:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1215:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1216:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 3967              	 .loc 4 1216 0
 3968 002e 0F23     	 mov r3,#15
 3969 0030 FB18     	 add r3,r7,r3
 3970 0032 0122     	 mov r2,#1
 3971 0034 1A70     	 strb r2,[r3]
 3972              	.L194:
1217:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1218:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1219:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 3973              	 .loc 4 1219 0
 3974 0036 0F23     	 mov r3,#15
 3975 0038 FB18     	 add r3,r7,r3
 3976 003a 1B78     	 ldrb r3,[r3]
1220:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 3977              	 .loc 4 1220 0
 3978 003c 181C     	 mov r0,r3
 3979 003e BD46     	 mov sp,r7
 3980 0040 04B0     	 add sp,sp,#16
 3981              	 
 3982 0042 80BD     	 pop {r7,pc}
 3983              	 .cfi_endproc
 3984              	.LFE160:
 3986              	 .text
 3987              	.Letext0:
 3988              	 .file 5 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3989              	 .file 6 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3990              	 .file 7 "C:/c_root/electronics/DAVE_work_2019/pocket-nim/Dave/Generated/DAVE_Common.h"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_master.c
    {standard input}:18     .text.XMC_USIC_CH_EnableEvent:00000000 $t
    {standard input}:22     .text.XMC_USIC_CH_EnableEvent:00000000 XMC_USIC_CH_EnableEvent
    {standard input}:56     .text.XMC_USIC_CH_DisableEvent:00000000 $t
    {standard input}:60     .text.XMC_USIC_CH_DisableEvent:00000000 XMC_USIC_CH_DisableEvent
    {standard input}:94     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:98     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:131    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 $t
    {standard input}:135    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 XMC_USIC_CH_TriggerServiceRequest
    {standard input}:168    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 $t
    {standard input}:172    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 XMC_USIC_CH_TXFIFO_EnableEvent
    {standard input}:210    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 $t
    {standard input}:214    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 XMC_USIC_CH_TXFIFO_DisableEvent
    {standard input}:253    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 $t
    {standard input}:257    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 XMC_USIC_CH_TXFIFO_Flush
    {standard input}:289    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:293    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:330    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:334    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:371    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 $t
    {standard input}:375    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 XMC_USIC_CH_RXFIFO_EnableEvent
    {standard input}:413    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 $t
    {standard input}:417    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 XMC_USIC_CH_RXFIFO_DisableEvent
    {standard input}:456    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 $t
    {standard input}:460    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 XMC_USIC_CH_RXFIFO_Flush
    {standard input}:492    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:496    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:532    .text.XMC_I2C_CH_SetInterruptNodePointer:00000000 $t
    {standard input}:536    .text.XMC_I2C_CH_SetInterruptNodePointer:00000000 XMC_I2C_CH_SetInterruptNodePointer
    {standard input}:573    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:577    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:606    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:610    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:643    .text.I2C_MASTER_SetRXFIFOTriggerLimit:00000000 $t
    {standard input}:647    .text.I2C_MASTER_SetRXFIFOTriggerLimit:00000000 I2C_MASTER_SetRXFIFOTriggerLimit
    {standard input}:685    .text.I2C_MASTER_IsTXFIFOFull:00000000 $t
    {standard input}:689    .text.I2C_MASTER_IsTXFIFOFull:00000000 I2C_MASTER_IsTXFIFOFull
    {standard input}:721    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 $t
    {standard input}:725    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 I2C_MASTER_IsRXFIFOEmpty
    {standard input}:757    .text.I2C_MASTER_GetReceivedByte:00000000 $t
    {standard input}:761    .text.I2C_MASTER_GetReceivedByte:00000000 I2C_MASTER_GetReceivedByte
    {standard input}:793    .text.I2C_MASTER_TransmitByte:00000000 $t
    {standard input}:797    .text.I2C_MASTER_TransmitByte:00000000 I2C_MASTER_TransmitByte
    {standard input}:833    .text.I2C_MASTER_EnableEvent:00000000 $t
    {standard input}:837    .text.I2C_MASTER_EnableEvent:00000000 I2C_MASTER_EnableEvent
    {standard input}:870    .text.I2C_MASTER_DisableEvent:00000000 $t
    {standard input}:874    .text.I2C_MASTER_DisableEvent:00000000 I2C_MASTER_DisableEvent
    {standard input}:907    .text.I2C_MASTER_ReceiveACK:00000000 $t
    {standard input}:911    .text.I2C_MASTER_ReceiveACK:00000000 I2C_MASTER_ReceiveACK
    {standard input}:941    .text.I2C_MASTER_ReceiveNACK:00000000 $t
    {standard input}:945    .text.I2C_MASTER_ReceiveNACK:00000000 I2C_MASTER_ReceiveNACK
    {standard input}:975    .text.I2C_MASTER_SendStop:00000000 $t
    {standard input}:979    .text.I2C_MASTER_SendStop:00000000 I2C_MASTER_SendStop
    {standard input}:1009   .text.I2C_MASTER_SendStart:00000000 $t
    {standard input}:1013   .text.I2C_MASTER_SendStart:00000000 I2C_MASTER_SendStart
    {standard input}:1052   .text.I2C_MASTER_SendRepeatedStart:00000000 $t
    {standard input}:1056   .text.I2C_MASTER_SendRepeatedStart:00000000 I2C_MASTER_SendRepeatedStart
    {standard input}:1095   .text.calculate_minfifosize:00000000 $t
    {standard input}:1099   .text.calculate_minfifosize:00000000 calculate_minfifosize
    {standard input}:1143   .text.I2C_MASTER_GetAppVersion:00000000 $t
    {standard input}:1148   .text.I2C_MASTER_GetAppVersion:00000000 I2C_MASTER_GetAppVersion
    {standard input}:1213   .text.I2C_MASTER_GetAppVersion:00000058 $d
    {standard input}:1219   .text.I2C_MASTER_Init:00000000 $t
    {standard input}:1224   .text.I2C_MASTER_Init:00000000 I2C_MASTER_Init
    {standard input}:1276   .text.I2C_MASTER_GetFlagStatus:00000000 $t
    {standard input}:1281   .text.I2C_MASTER_GetFlagStatus:00000000 I2C_MASTER_GetFlagStatus
    {standard input}:1319   .text.I2C_MASTER_ClearFlag:00000000 $t
    {standard input}:1324   .text.I2C_MASTER_ClearFlag:00000000 I2C_MASTER_ClearFlag
    {standard input}:1357   .text.I2C_MASTER_Transmit:00000000 $t
    {standard input}:1362   .text.I2C_MASTER_Transmit:00000000 I2C_MASTER_Transmit
    {standard input}:2633   .text.I2C_MASTER_StartTransmitIRQ:00000000 I2C_MASTER_StartTransmitIRQ
    {standard input}:1431   .text.I2C_MASTER_TransmitHandler:00000000 $t
    {standard input}:1436   .text.I2C_MASTER_TransmitHandler:00000000 I2C_MASTER_TransmitHandler
    {standard input}:3643   .text.I2C_MASTER_ProtocolHandler:00000000 I2C_MASTER_ProtocolHandler
    {standard input}:1833   .text.I2C_MASTER_lSendStop_JumpTo_TxCallback:00000000 I2C_MASTER_lSendStop_JumpTo_TxCallback
    {standard input}:1829   .text.I2C_MASTER_lSendStop_JumpTo_TxCallback:00000000 $t
    {standard input}:1912   .text.I2C_MASTER_Receive:00000000 $t
    {standard input}:1917   .text.I2C_MASTER_Receive:00000000 I2C_MASTER_Receive
    {standard input}:2877   .text.I2C_MASTER_StartReceiveIRQ:00000000 I2C_MASTER_StartReceiveIRQ
    {standard input}:1990   .text.I2C_MASTER_lReceive_FIFOData:00000000 $t
    {standard input}:1994   .text.I2C_MASTER_lReceive_FIFOData:00000000 I2C_MASTER_lReceive_FIFOData
    {standard input}:3748   .text.I2C_MASTER_lReconfigureRxFIFO:00000000 I2C_MASTER_lReconfigureRxFIFO
    {standard input}:2563   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 I2C_MASTER_lSendStart_Or_RepeatedStart
    {standard input}:2319   .text.I2C_MASTER_lReceive_StdData:00000000 $t
    {standard input}:2323   .text.I2C_MASTER_lReceive_StdData:00000000 I2C_MASTER_lReceive_StdData
    {standard input}:2559   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 $t
    {standard input}:2628   .text.I2C_MASTER_StartTransmitIRQ:00000000 $t
    {standard input}:2799   .text.I2C_MASTER_AbortTransmitIRQ:00000000 $t
    {standard input}:2803   .text.I2C_MASTER_AbortTransmitIRQ:00000000 I2C_MASTER_AbortTransmitIRQ
    {standard input}:2872   .text.I2C_MASTER_StartReceiveIRQ:00000000 $t
    {standard input}:3056   .text.I2C_MASTER_ReceiveHandler:00000000 $t
    {standard input}:3061   .text.I2C_MASTER_ReceiveHandler:00000000 I2C_MASTER_ReceiveHandler
    {standard input}:3466   .text.I2C_MASTER_lSendStop_JumpTo_RxCallback:00000000 I2C_MASTER_lSendStop_JumpTo_RxCallback
    {standard input}:3462   .text.I2C_MASTER_lSendStop_JumpTo_RxCallback:00000000 $t
    {standard input}:3554   .text.I2C_MASTER_lAbortReceiveIRQ:00000000 $t
    {standard input}:3558   .text.I2C_MASTER_lAbortReceiveIRQ:00000000 I2C_MASTER_lAbortReceiveIRQ
    {standard input}:3638   .text.I2C_MASTER_ProtocolHandler:00000000 $t
    {standard input}:3744   .text.I2C_MASTER_lReconfigureRxFIFO:00000000 $t
    {standard input}:3845   .text.I2C_MASTER_AbortTransmit:00000000 $t
    {standard input}:3850   .text.I2C_MASTER_AbortTransmit:00000000 I2C_MASTER_AbortTransmit
    {standard input}:3923   .text.I2C_MASTER_AbortReceive:00000000 $t
    {standard input}:3928   .text.I2C_MASTER_AbortReceive:00000000 I2C_MASTER_AbortReceive
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_SetInterruptNodePointer
XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
XMC_I2C_CH_GetReceivedData
XMC_I2C_CH_MasterTransmit
XMC_I2C_CH_EnableEvent
XMC_I2C_CH_DisableEvent
XMC_I2C_CH_MasterReceiveAck
XMC_I2C_CH_MasterReceiveNack
XMC_I2C_CH_MasterStop
XMC_I2C_CH_MasterStart
XMC_I2C_CH_MasterRepeatedStart
