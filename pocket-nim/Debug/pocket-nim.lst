
pocket-nim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bd4  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000110  2000000c  10005bd4  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  2000011c  00000000  0000011c  2**0
                  ALLOC
  3 .data         00000078  20000520  10005ce4  00008520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000190  20000598  10005d5c  00008598  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  100097c0  00008598  2**2
                  ALLOC
  6 .debug_aranges 00000a50  00000000  00000000  00008598  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e130  00000000  00000000  00008fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000217e  00000000  00000000  00017118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048b8  00000000  00000000  00019296  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002198  00000000  00000000  0001db50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006261  00000000  00000000  0001fce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003712  00000000  00000000  00025f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  00029660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000004f0  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	20 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10      .. ............
10001010:	00 04 01 00 00 00 00 80                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10005bd4 	.word	0x10005bd4
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	2000011c 	.word	0x2000011c
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10005ce4 	.word	0x10005ce4
	ldr	r2, =__data_start
10001074:	20000520 	.word	0x20000520
	ldr	r3, =__data_end
10001078:	20000598 	.word	0x20000598
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10005d5c 	.word	0x10005d5c
	ldr	r2, =__ram_code_start
10001080:	20000598 	.word	0x20000598
	ldr	r3, =__ram_code_end
10001084:	20000598 	.word	0x20000598
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000598 	.word	0x20000598
	ldr	r2, =__bss_end
1000108c:	20000724 	.word	0x20000724
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10005879 	.word	0x10005879
    blx  r0
#endif

    ldr  r0, =main
10001094:	1000455d 	.word	0x1000455d

10001098 <CCU40_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <CCU40_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f003 f8a2 	bl	100041e8 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f003 f8e6 	bl	10004274 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreClockUpdate>:
  
  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b0:	4b12      	ldr	r3, [pc, #72]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010b2:	681a      	ldr	r2, [r3, #0]
100010b4:	23ff      	movs	r3, #255	; 0xff
100010b6:	021b      	lsls	r3, r3, #8
100010b8:	4013      	ands	r3, r2
100010ba:	0a1a      	lsrs	r2, r3, #8
100010bc:	4b10      	ldr	r3, [pc, #64]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010be:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010c0:	4b0e      	ldr	r3, [pc, #56]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010c2:	681b      	ldr	r3, [r3, #0]
100010c4:	22ff      	movs	r2, #255	; 0xff
100010c6:	401a      	ands	r2, r3
100010c8:	4b0e      	ldr	r3, [pc, #56]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010ca:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
100010cc:	4b0c      	ldr	r3, [pc, #48]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	2b00      	cmp	r3, #0
100010d2:	d00e      	beq.n	100010f2 <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010d4:	4b0a      	ldr	r3, [pc, #40]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010d6:	681b      	ldr	r3, [r3, #0]
100010d8:	021a      	lsls	r2, r3, #8
100010da:	4b0a      	ldr	r3, [pc, #40]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	18d3      	adds	r3, r2, r3
100010e0:	4809      	ldr	r0, [pc, #36]	; (10001108 <SystemCoreClockUpdate+0x5c>)
100010e2:	1c19      	adds	r1, r3, #0
100010e4:	f004 fb36 	bl	10005754 <__aeabi_uidiv>
100010e8:	1c03      	adds	r3, r0, #0
100010ea:	005a      	lsls	r2, r3, #1
100010ec:	4b07      	ldr	r3, [pc, #28]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010ee:	601a      	str	r2, [r3, #0]
100010f0:	e002      	b.n	100010f8 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010f2:	4b06      	ldr	r3, [pc, #24]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010f4:	4a06      	ldr	r2, [pc, #24]	; (10001110 <SystemCoreClockUpdate+0x64>)
100010f6:	601a      	str	r2, [r3, #0]
  }
}
100010f8:	46bd      	mov	sp, r7
100010fa:	bd80      	pop	{r7, pc}
100010fc:	40010300 	.word	0x40010300
10001100:	20000598 	.word	0x20000598
10001104:	2000059c 	.word	0x2000059c
10001108:	f4240000 	.word	0xf4240000
1000110c:	20003ffc 	.word	0x20003ffc
10001110:	01e84800 	.word	0x01e84800

10001114 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001114:	b590      	push	{r4, r7, lr}
10001116:	b085      	sub	sp, #20
10001118:	af00      	add	r7, sp, #0
1000111a:	60f8      	str	r0, [r7, #12]
1000111c:	607a      	str	r2, [r7, #4]
1000111e:	230b      	movs	r3, #11
10001120:	18fb      	adds	r3, r7, r3
10001122:	1c0a      	adds	r2, r1, #0
10001124:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001126:	230b      	movs	r3, #11
10001128:	18fb      	adds	r3, r7, r3
1000112a:	781b      	ldrb	r3, [r3, #0]
1000112c:	089b      	lsrs	r3, r3, #2
1000112e:	b2db      	uxtb	r3, r3
10001130:	1c18      	adds	r0, r3, #0
10001132:	230b      	movs	r3, #11
10001134:	18fb      	adds	r3, r7, r3
10001136:	781b      	ldrb	r3, [r3, #0]
10001138:	089b      	lsrs	r3, r3, #2
1000113a:	b2db      	uxtb	r3, r3
1000113c:	1c1a      	adds	r2, r3, #0
1000113e:	68fb      	ldr	r3, [r7, #12]
10001140:	3204      	adds	r2, #4
10001142:	0092      	lsls	r2, r2, #2
10001144:	58d3      	ldr	r3, [r2, r3]
10001146:	220b      	movs	r2, #11
10001148:	18ba      	adds	r2, r7, r2
1000114a:	7812      	ldrb	r2, [r2, #0]
1000114c:	2103      	movs	r1, #3
1000114e:	400a      	ands	r2, r1
10001150:	00d2      	lsls	r2, r2, #3
10001152:	1c11      	adds	r1, r2, #0
10001154:	22f8      	movs	r2, #248	; 0xf8
10001156:	408a      	lsls	r2, r1
10001158:	43d2      	mvns	r2, r2
1000115a:	401a      	ands	r2, r3
1000115c:	1c11      	adds	r1, r2, #0
1000115e:	68fb      	ldr	r3, [r7, #12]
10001160:	1d02      	adds	r2, r0, #4
10001162:	0092      	lsls	r2, r2, #2
10001164:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001166:	68fb      	ldr	r3, [r7, #12]
10001168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000116a:	220b      	movs	r2, #11
1000116c:	18ba      	adds	r2, r7, r2
1000116e:	7812      	ldrb	r2, [r2, #0]
10001170:	0052      	lsls	r2, r2, #1
10001172:	1c11      	adds	r1, r2, #0
10001174:	2203      	movs	r2, #3
10001176:	408a      	lsls	r2, r1
10001178:	43d2      	mvns	r2, r2
1000117a:	401a      	ands	r2, r3
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001180:	230b      	movs	r3, #11
10001182:	18fb      	adds	r3, r7, r3
10001184:	781b      	ldrb	r3, [r3, #0]
10001186:	08db      	lsrs	r3, r3, #3
10001188:	b2db      	uxtb	r3, r3
1000118a:	1c18      	adds	r0, r3, #0
1000118c:	230b      	movs	r3, #11
1000118e:	18fb      	adds	r3, r7, r3
10001190:	781b      	ldrb	r3, [r3, #0]
10001192:	08db      	lsrs	r3, r3, #3
10001194:	b2db      	uxtb	r3, r3
10001196:	1c1a      	adds	r2, r3, #0
10001198:	68fb      	ldr	r3, [r7, #12]
1000119a:	3210      	adds	r2, #16
1000119c:	0092      	lsls	r2, r2, #2
1000119e:	58d3      	ldr	r3, [r2, r3]
100011a0:	220b      	movs	r2, #11
100011a2:	18ba      	adds	r2, r7, r2
100011a4:	7812      	ldrb	r2, [r2, #0]
100011a6:	2107      	movs	r1, #7
100011a8:	400a      	ands	r2, r1
100011aa:	0092      	lsls	r2, r2, #2
100011ac:	1c11      	adds	r1, r2, #0
100011ae:	2204      	movs	r2, #4
100011b0:	408a      	lsls	r2, r1
100011b2:	43d2      	mvns	r2, r2
100011b4:	401a      	ands	r2, r3
100011b6:	1c11      	adds	r1, r2, #0
100011b8:	68fb      	ldr	r3, [r7, #12]
100011ba:	1c02      	adds	r2, r0, #0
100011bc:	3210      	adds	r2, #16
100011be:	0092      	lsls	r2, r2, #2
100011c0:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
100011c2:	230b      	movs	r3, #11
100011c4:	18fb      	adds	r3, r7, r3
100011c6:	781b      	ldrb	r3, [r3, #0]
100011c8:	08db      	lsrs	r3, r3, #3
100011ca:	b2db      	uxtb	r3, r3
100011cc:	1c18      	adds	r0, r3, #0
100011ce:	230b      	movs	r3, #11
100011d0:	18fb      	adds	r3, r7, r3
100011d2:	781b      	ldrb	r3, [r3, #0]
100011d4:	08db      	lsrs	r3, r3, #3
100011d6:	b2db      	uxtb	r3, r3
100011d8:	1c1a      	adds	r2, r3, #0
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	3210      	adds	r2, #16
100011de:	0092      	lsls	r2, r2, #2
100011e0:	58d2      	ldr	r2, [r2, r3]
100011e2:	687b      	ldr	r3, [r7, #4]
100011e4:	785b      	ldrb	r3, [r3, #1]
100011e6:	1c1c      	adds	r4, r3, #0
100011e8:	230b      	movs	r3, #11
100011ea:	18fb      	adds	r3, r7, r3
100011ec:	781b      	ldrb	r3, [r3, #0]
100011ee:	2107      	movs	r1, #7
100011f0:	400b      	ands	r3, r1
100011f2:	009b      	lsls	r3, r3, #2
100011f4:	409c      	lsls	r4, r3
100011f6:	1c23      	adds	r3, r4, #0
100011f8:	431a      	orrs	r2, r3
100011fa:	1c11      	adds	r1, r2, #0
100011fc:	68fb      	ldr	r3, [r7, #12]
100011fe:	1c02      	adds	r2, r0, #0
10001200:	3210      	adds	r2, #16
10001202:	0092      	lsls	r2, r2, #2
10001204:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001206:	68fb      	ldr	r3, [r7, #12]
10001208:	4a1d      	ldr	r2, [pc, #116]	; (10001280 <XMC_GPIO_Init+0x16c>)
1000120a:	4293      	cmp	r3, r2
1000120c:	d10b      	bne.n	10001226 <XMC_GPIO_Init+0x112>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
1000120e:	68fb      	ldr	r3, [r7, #12]
10001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001212:	220b      	movs	r2, #11
10001214:	18ba      	adds	r2, r7, r2
10001216:	7812      	ldrb	r2, [r2, #0]
10001218:	2101      	movs	r1, #1
1000121a:	4091      	lsls	r1, r2
1000121c:	1c0a      	adds	r2, r1, #0
1000121e:	43d2      	mvns	r2, r2
10001220:	401a      	ands	r2, r3
10001222:	68fb      	ldr	r3, [r7, #12]
10001224:	661a      	str	r2, [r3, #96]	; 0x60
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	685a      	ldr	r2, [r3, #4]
1000122a:	230b      	movs	r3, #11
1000122c:	18fb      	adds	r3, r7, r3
1000122e:	781b      	ldrb	r3, [r3, #0]
10001230:	409a      	lsls	r2, r3
10001232:	68fb      	ldr	r3, [r7, #12]
10001234:	605a      	str	r2, [r3, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	089b      	lsrs	r3, r3, #2
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	089b      	lsrs	r3, r3, #2
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3204      	adds	r2, #4
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	781b      	ldrb	r3, [r3, #0]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2103      	movs	r1, #3
10001264:	400b      	ands	r3, r1
10001266:	00db      	lsls	r3, r3, #3
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1d02      	adds	r2, r0, #4
10001274:	0092      	lsls	r2, r2, #2
10001276:	50d1      	str	r1, [r2, r3]
}
10001278:	46bd      	mov	sp, r7
1000127a:	b005      	add	sp, #20
1000127c:	bd90      	pop	{r4, r7, pc}
1000127e:	46c0      	nop			; (mov r8, r8)
10001280:	40040200 	.word	0x40040200

10001284 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001284:	b580      	push	{r7, lr}
10001286:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001288:	4b02      	ldr	r3, [pc, #8]	; (10001294 <XMC_SCU_LockProtectedBits+0x10>)
1000128a:	22c3      	movs	r2, #195	; 0xc3
1000128c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000128e:	46bd      	mov	sp, r7
10001290:	bd80      	pop	{r7, pc}
10001292:	46c0      	nop			; (mov r8, r8)
10001294:	40010000 	.word	0x40010000

10001298 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001298:	b580      	push	{r7, lr}
1000129a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000129c:	4b05      	ldr	r3, [pc, #20]	; (100012b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000129e:	22c0      	movs	r2, #192	; 0xc0
100012a0:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100012a2:	46c0      	nop			; (mov r8, r8)
100012a4:	4b03      	ldr	r3, [pc, #12]	; (100012b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100012a8:	2204      	movs	r2, #4
100012aa:	4013      	ands	r3, r2
100012ac:	d1fa      	bne.n	100012a4 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100012ae:	46bd      	mov	sp, r7
100012b0:	bd80      	pop	{r7, pc}
100012b2:	46c0      	nop			; (mov r8, r8)
100012b4:	40010000 	.word	0x40010000

100012b8 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100012b8:	b580      	push	{r7, lr}
100012ba:	b082      	sub	sp, #8
100012bc:	af00      	add	r7, sp, #0
100012be:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100012c0:	f7ff ffea 	bl	10001298 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012c4:	4a0c      	ldr	r2, [pc, #48]	; (100012f8 <XMC_SCU_CLOCK_Init+0x40>)
100012c6:	4b0c      	ldr	r3, [pc, #48]	; (100012f8 <XMC_SCU_CLOCK_Init+0x40>)
100012c8:	681b      	ldr	r3, [r3, #0]
100012ca:	490c      	ldr	r1, [pc, #48]	; (100012fc <XMC_SCU_CLOCK_Init+0x44>)
100012cc:	4019      	ands	r1, r3
                   config->rtc_src |
100012ce:	687b      	ldr	r3, [r7, #4]
100012d0:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012d2:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100012d8:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012da:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
100012dc:	f7ff ffd2 	bl	10001284 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100012e0:	687b      	ldr	r3, [r7, #4]
100012e2:	785b      	ldrb	r3, [r3, #1]
100012e4:	1c1a      	adds	r2, r3, #0
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	781b      	ldrb	r3, [r3, #0]
100012ea:	1c10      	adds	r0, r2, #0
100012ec:	1c19      	adds	r1, r3, #0
100012ee:	f000 f825 	bl	1000133c <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100012f2:	46bd      	mov	sp, r7
100012f4:	b002      	add	sp, #8
100012f6:	bd80      	pop	{r7, pc}
100012f8:	40010300 	.word	0x40010300
100012fc:	fff0ffff 	.word	0xfff0ffff

10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10001300:	b580      	push	{r7, lr}
10001302:	b082      	sub	sp, #8
10001304:	af00      	add	r7, sp, #0
10001306:	1c02      	adds	r2, r0, #0
10001308:	1dbb      	adds	r3, r7, #6
1000130a:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
1000130c:	f7ff ffc4 	bl	10001298 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001310:	4b09      	ldr	r3, [pc, #36]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001312:	4a09      	ldr	r2, [pc, #36]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001314:	6911      	ldr	r1, [r2, #16]
10001316:	1dba      	adds	r2, r7, #6
10001318:	8812      	ldrh	r2, [r2, #0]
1000131a:	430a      	orrs	r2, r1
1000131c:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000131e:	46c0      	nop			; (mov r8, r8)
10001320:	4b05      	ldr	r3, [pc, #20]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001322:	681a      	ldr	r2, [r3, #0]
10001324:	2380      	movs	r3, #128	; 0x80
10001326:	05db      	lsls	r3, r3, #23
10001328:	4013      	ands	r3, r2
1000132a:	d1f9      	bne.n	10001320 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
1000132c:	f7ff ffaa 	bl	10001284 <XMC_SCU_LockProtectedBits>
}
10001330:	46bd      	mov	sp, r7
10001332:	b002      	add	sp, #8
10001334:	bd80      	pop	{r7, pc}
10001336:	46c0      	nop			; (mov r8, r8)
10001338:	40010300 	.word	0x40010300

1000133c <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
1000133c:	b580      	push	{r7, lr}
1000133e:	b084      	sub	sp, #16
10001340:	af00      	add	r7, sp, #0
10001342:	6078      	str	r0, [r7, #4]
10001344:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001346:	f7ff ffa7 	bl	10001298 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000134a:	4b21      	ldr	r3, [pc, #132]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000134c:	681a      	ldr	r2, [r3, #0]
1000134e:	23ff      	movs	r3, #255	; 0xff
10001350:	021b      	lsls	r3, r3, #8
10001352:	4013      	ands	r3, r2
10001354:	0a1b      	lsrs	r3, r3, #8
10001356:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001358:	4b1d      	ldr	r3, [pc, #116]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000135a:	4a1d      	ldr	r2, [pc, #116]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000135c:	6812      	ldr	r2, [r2, #0]
1000135e:	491d      	ldr	r1, [pc, #116]	; (100013d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
10001360:	4011      	ands	r1, r2
10001362:	683a      	ldr	r2, [r7, #0]
10001364:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10001366:	491c      	ldr	r1, [pc, #112]	; (100013d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10001368:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000136a:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000136c:	46c0      	nop			; (mov r8, r8)
1000136e:	4b18      	ldr	r3, [pc, #96]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001370:	681a      	ldr	r2, [r3, #0]
10001372:	2380      	movs	r3, #128	; 0x80
10001374:	05db      	lsls	r3, r3, #23
10001376:	4013      	ands	r3, r2
10001378:	d1f9      	bne.n	1000136e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
1000137a:	68fa      	ldr	r2, [r7, #12]
1000137c:	687b      	ldr	r3, [r7, #4]
1000137e:	429a      	cmp	r2, r3
10001380:	d806      	bhi.n	10001390 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001382:	68fa      	ldr	r2, [r7, #12]
10001384:	687b      	ldr	r3, [r7, #4]
10001386:	1c10      	adds	r0, r2, #0
10001388:	1c19      	adds	r1, r3, #0
1000138a:	f000 f853 	bl	10001434 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000138e:	e005      	b.n	1000139c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001390:	68fa      	ldr	r2, [r7, #12]
10001392:	687b      	ldr	r3, [r7, #4]
10001394:	1c10      	adds	r0, r2, #0
10001396:	1c19      	adds	r1, r3, #0
10001398:	f000 f822 	bl	100013e0 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000139c:	4b0c      	ldr	r3, [pc, #48]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000139e:	4a0c      	ldr	r2, [pc, #48]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013a0:	6812      	ldr	r2, [r2, #0]
100013a2:	490e      	ldr	r1, [pc, #56]	; (100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
100013a4:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013a6:	687a      	ldr	r2, [r7, #4]
100013a8:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013aa:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013ac:	490a      	ldr	r1, [pc, #40]	; (100013d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100013ae:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013b0:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013b2:	46c0      	nop			; (mov r8, r8)
100013b4:	4b06      	ldr	r3, [pc, #24]	; (100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013b6:	681a      	ldr	r2, [r3, #0]
100013b8:	2380      	movs	r3, #128	; 0x80
100013ba:	05db      	lsls	r3, r3, #23
100013bc:	4013      	ands	r3, r2
100013be:	d1f9      	bne.n	100013b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100013c0:	f7ff ff60 	bl	10001284 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100013c4:	f7ff fe72 	bl	100010ac <SystemCoreClockUpdate>

}
100013c8:	46bd      	mov	sp, r7
100013ca:	b004      	add	sp, #16
100013cc:	bd80      	pop	{r7, pc}
100013ce:	46c0      	nop			; (mov r8, r8)
100013d0:	40010300 	.word	0x40010300
100013d4:	c00fff00 	.word	0xc00fff00
100013d8:	3ff00000 	.word	0x3ff00000
100013dc:	c00f00ff 	.word	0xc00f00ff

100013e0 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100013e0:	b580      	push	{r7, lr}
100013e2:	b082      	sub	sp, #8
100013e4:	af00      	add	r7, sp, #0
100013e6:	6078      	str	r0, [r7, #4]
100013e8:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100013ea:	e014      	b.n	10001416 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100013ec:	687b      	ldr	r3, [r7, #4]
100013ee:	089b      	lsrs	r3, r3, #2
100013f0:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013f2:	4b0d      	ldr	r3, [pc, #52]	; (10001428 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100013f4:	4a0c      	ldr	r2, [pc, #48]	; (10001428 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100013f6:	6812      	ldr	r2, [r2, #0]
100013f8:	490c      	ldr	r1, [pc, #48]	; (1000142c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100013fa:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
100013fc:	687a      	ldr	r2, [r7, #4]
100013fe:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001400:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10001402:	490b      	ldr	r1, [pc, #44]	; (10001430 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001404:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001406:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001408:	46c0      	nop			; (mov r8, r8)
1000140a:	4b07      	ldr	r3, [pc, #28]	; (10001428 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000140c:	681a      	ldr	r2, [r3, #0]
1000140e:	2380      	movs	r3, #128	; 0x80
10001410:	05db      	lsls	r3, r3, #23
10001412:	4013      	ands	r3, r2
10001414:	d1f9      	bne.n	1000140a <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001416:	683b      	ldr	r3, [r7, #0]
10001418:	009a      	lsls	r2, r3, #2
1000141a:	687b      	ldr	r3, [r7, #4]
1000141c:	429a      	cmp	r2, r3
1000141e:	d3e5      	bcc.n	100013ec <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
10001420:	46bd      	mov	sp, r7
10001422:	b002      	add	sp, #8
10001424:	bd80      	pop	{r7, pc}
10001426:	46c0      	nop			; (mov r8, r8)
10001428:	40010300 	.word	0x40010300
1000142c:	c00f00ff 	.word	0xc00f00ff
10001430:	3ff00000 	.word	0x3ff00000

10001434 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001434:	b580      	push	{r7, lr}
10001436:	b082      	sub	sp, #8
10001438:	af00      	add	r7, sp, #0
1000143a:	6078      	str	r0, [r7, #4]
1000143c:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
1000143e:	e019      	b.n	10001474 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if(0U == curr_idiv)
10001440:	687b      	ldr	r3, [r7, #4]
10001442:	2b00      	cmp	r3, #0
10001444:	d101      	bne.n	1000144a <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001446:	2301      	movs	r3, #1
10001448:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000144a:	687b      	ldr	r3, [r7, #4]
1000144c:	009b      	lsls	r3, r3, #2
1000144e:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001450:	4b0c      	ldr	r3, [pc, #48]	; (10001484 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001452:	4a0c      	ldr	r2, [pc, #48]	; (10001484 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001454:	6812      	ldr	r2, [r2, #0]
10001456:	490c      	ldr	r1, [pc, #48]	; (10001488 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001458:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000145a:	687a      	ldr	r2, [r7, #4]
1000145c:	0212      	lsls	r2, r2, #8
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000145e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001460:	490a      	ldr	r1, [pc, #40]	; (1000148c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001462:	430a      	orrs	r2, r1
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001464:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001466:	46c0      	nop			; (mov r8, r8)
10001468:	4b06      	ldr	r3, [pc, #24]	; (10001484 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000146a:	681a      	ldr	r2, [r3, #0]
1000146c:	2380      	movs	r3, #128	; 0x80
1000146e:	05db      	lsls	r3, r3, #23
10001470:	4013      	ands	r3, r2
10001472:	d1f9      	bne.n	10001468 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001474:	687b      	ldr	r3, [r7, #4]
10001476:	009a      	lsls	r2, r3, #2
10001478:	683b      	ldr	r3, [r7, #0]
1000147a:	429a      	cmp	r2, r3
1000147c:	d3e0      	bcc.n	10001440 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
1000147e:	46bd      	mov	sp, r7
10001480:	b002      	add	sp, #8
10001482:	bd80      	pop	{r7, pc}
10001484:	40010300 	.word	0x40010300
10001488:	c00f00ff 	.word	0xc00f00ff
1000148c:	3ff00000 	.word	0x3ff00000

10001490 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001490:	b580      	push	{r7, lr}
10001492:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001494:	4b02      	ldr	r3, [pc, #8]	; (100014a0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001496:	681b      	ldr	r3, [r3, #0]
}
10001498:	1c18      	adds	r0, r3, #0
1000149a:	46bd      	mov	sp, r7
1000149c:	bd80      	pop	{r7, pc}
1000149e:	46c0      	nop			; (mov r8, r8)
100014a0:	20003ffc 	.word	0x20003ffc

100014a4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100014a4:	b580      	push	{r7, lr}
100014a6:	b082      	sub	sp, #8
100014a8:	af00      	add	r7, sp, #0
100014aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100014ac:	687b      	ldr	r3, [r7, #4]
100014ae:	68db      	ldr	r3, [r3, #12]
100014b0:	2280      	movs	r2, #128	; 0x80
100014b2:	0052      	lsls	r2, r2, #1
100014b4:	431a      	orrs	r2, r3
100014b6:	687b      	ldr	r3, [r7, #4]
100014b8:	60da      	str	r2, [r3, #12]
}
100014ba:	46bd      	mov	sp, r7
100014bc:	b002      	add	sp, #8
100014be:	bd80      	pop	{r7, pc}

100014c0 <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100014c0:	b580      	push	{r7, lr}
100014c2:	b082      	sub	sp, #8
100014c4:	af00      	add	r7, sp, #0
100014c6:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
100014c8:	687b      	ldr	r3, [r7, #4]
100014ca:	4a05      	ldr	r2, [pc, #20]	; (100014e0 <XMC_CCU4_lUngateClock+0x20>)
100014cc:	4293      	cmp	r3, r2
100014ce:	d000      	beq.n	100014d2 <XMC_CCU4_lUngateClock+0x12>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
100014d0:	e003      	b.n	100014da <XMC_CCU4_lUngateClock+0x1a>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100014d2:	2004      	movs	r0, #4
100014d4:	f7ff ff14 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
100014d8:	46c0      	nop			; (mov r8, r8)
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
100014da:	46bd      	mov	sp, r7
100014dc:	b002      	add	sp, #8
100014de:	bd80      	pop	{r7, pc}
100014e0:	48040000 	.word	0x48040000

100014e4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
100014e4:	b580      	push	{r7, lr}
100014e6:	b082      	sub	sp, #8
100014e8:	af00      	add	r7, sp, #0
100014ea:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
100014ec:	687b      	ldr	r3, [r7, #4]
100014ee:	1c18      	adds	r0, r3, #0
100014f0:	f7ff ffe6 	bl	100014c0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
100014f4:	46bd      	mov	sp, r7
100014f6:	b002      	add	sp, #8
100014f8:	bd80      	pop	{r7, pc}
100014fa:	46c0      	nop			; (mov r8, r8)

100014fc <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100014fc:	b580      	push	{r7, lr}
100014fe:	b084      	sub	sp, #16
10001500:	af00      	add	r7, sp, #0
10001502:	6078      	str	r0, [r7, #4]
10001504:	1c0a      	adds	r2, r1, #0
10001506:	1cfb      	adds	r3, r7, #3
10001508:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
1000150a:	687b      	ldr	r3, [r7, #4]
1000150c:	1c18      	adds	r0, r3, #0
1000150e:	f7ff ffe9 	bl	100014e4 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001512:	687b      	ldr	r3, [r7, #4]
10001514:	1c18      	adds	r0, r3, #0
10001516:	f7ff ffc5 	bl	100014a4 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
1000151a:	687b      	ldr	r3, [r7, #4]
1000151c:	681b      	ldr	r3, [r3, #0]
1000151e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001520:	68fb      	ldr	r3, [r7, #12]
10001522:	4a07      	ldr	r2, [pc, #28]	; (10001540 <XMC_CCU4_Init+0x44>)
10001524:	4013      	ands	r3, r2
10001526:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001528:	1cfb      	adds	r3, r7, #3
1000152a:	781b      	ldrb	r3, [r3, #0]
1000152c:	039b      	lsls	r3, r3, #14
1000152e:	68fa      	ldr	r2, [r7, #12]
10001530:	4313      	orrs	r3, r2
10001532:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001534:	687b      	ldr	r3, [r7, #4]
10001536:	68fa      	ldr	r2, [r7, #12]
10001538:	601a      	str	r2, [r3, #0]
}
1000153a:	46bd      	mov	sp, r7
1000153c:	b004      	add	sp, #16
1000153e:	bd80      	pop	{r7, pc}
10001540:	ffff3fff 	.word	0xffff3fff

10001544 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001544:	b580      	push	{r7, lr}
10001546:	b084      	sub	sp, #16
10001548:	af00      	add	r7, sp, #0
1000154a:	6078      	str	r0, [r7, #4]
1000154c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
1000154e:	687b      	ldr	r3, [r7, #4]
10001550:	681b      	ldr	r3, [r3, #0]
10001552:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001554:	683b      	ldr	r3, [r7, #0]
10001556:	0c1b      	lsrs	r3, r3, #16
10001558:	43da      	mvns	r2, r3
1000155a:	68fb      	ldr	r3, [r7, #12]
1000155c:	4013      	ands	r3, r2
1000155e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001560:	683b      	ldr	r3, [r7, #0]
10001562:	041b      	lsls	r3, r3, #16
10001564:	0c1b      	lsrs	r3, r3, #16
10001566:	68fa      	ldr	r2, [r7, #12]
10001568:	4313      	orrs	r3, r2
1000156a:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
1000156c:	687b      	ldr	r3, [r7, #4]
1000156e:	68fa      	ldr	r2, [r7, #12]
10001570:	601a      	str	r2, [r3, #0]
}
10001572:	46bd      	mov	sp, r7
10001574:	b004      	add	sp, #16
10001576:	bd80      	pop	{r7, pc}

10001578 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001578:	b580      	push	{r7, lr}
1000157a:	b082      	sub	sp, #8
1000157c:	af00      	add	r7, sp, #0
1000157e:	6078      	str	r0, [r7, #4]
10001580:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001582:	683b      	ldr	r3, [r7, #0]
10001584:	681a      	ldr	r2, [r3, #0]
10001586:	687b      	ldr	r3, [r7, #4]
10001588:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000158a:	683b      	ldr	r3, [r7, #0]
1000158c:	795b      	ldrb	r3, [r3, #5]
1000158e:	069b      	lsls	r3, r3, #26
10001590:	0fdb      	lsrs	r3, r3, #31
10001592:	b2db      	uxtb	r3, r3
10001594:	051a      	lsls	r2, r3, #20
10001596:	687b      	ldr	r3, [r7, #4]
10001598:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000159a:	683b      	ldr	r3, [r7, #0]
1000159c:	791b      	ldrb	r3, [r3, #4]
1000159e:	071b      	lsls	r3, r3, #28
100015a0:	0f1b      	lsrs	r3, r3, #28
100015a2:	b2db      	uxtb	r3, r3
100015a4:	1c1a      	adds	r2, r3, #0
100015a6:	687b      	ldr	r3, [r7, #4]
100015a8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
100015aa:	683b      	ldr	r3, [r7, #0]
100015ac:	795b      	ldrb	r3, [r3, #5]
100015ae:	071b      	lsls	r3, r3, #28
100015b0:	0f1b      	lsrs	r3, r3, #28
100015b2:	b2db      	uxtb	r3, r3
100015b4:	1c1a      	adds	r2, r3, #0
100015b6:	687b      	ldr	r3, [r7, #4]
100015b8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100015ba:	683b      	ldr	r3, [r7, #0]
100015bc:	795b      	ldrb	r3, [r3, #5]
100015be:	06db      	lsls	r3, r3, #27
100015c0:	0fdb      	lsrs	r3, r3, #31
100015c2:	b2db      	uxtb	r3, r3
100015c4:	1c1a      	adds	r2, r3, #0
100015c6:	687b      	ldr	r3, [r7, #4]
100015c8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100015ca:	683b      	ldr	r3, [r7, #0]
100015cc:	791b      	ldrb	r3, [r3, #4]
100015ce:	061b      	lsls	r3, r3, #24
100015d0:	0f1b      	lsrs	r3, r3, #28
100015d2:	b2db      	uxtb	r3, r3
100015d4:	1c1a      	adds	r2, r3, #0
100015d6:	687b      	ldr	r3, [r7, #4]
100015d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
100015da:	46bd      	mov	sp, r7
100015dc:	b002      	add	sp, #8
100015de:	bd80      	pop	{r7, pc}

100015e0 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
100015e0:	b580      	push	{r7, lr}
100015e2:	b084      	sub	sp, #16
100015e4:	af00      	add	r7, sp, #0
100015e6:	6078      	str	r0, [r7, #4]
100015e8:	1c08      	adds	r0, r1, #0
100015ea:	1c11      	adds	r1, r2, #0
100015ec:	1cfb      	adds	r3, r7, #3
100015ee:	1c02      	adds	r2, r0, #0
100015f0:	701a      	strb	r2, [r3, #0]
100015f2:	1cbb      	adds	r3, r7, #2
100015f4:	1c0a      	adds	r2, r1, #0
100015f6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
100015f8:	687b      	ldr	r3, [r7, #4]
100015fa:	685b      	ldr	r3, [r3, #4]
100015fc:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
100015fe:	68bb      	ldr	r3, [r7, #8]
10001600:	2203      	movs	r2, #3
10001602:	4393      	bics	r3, r2
10001604:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
10001606:	1cfb      	adds	r3, r7, #3
10001608:	781b      	ldrb	r3, [r3, #0]
1000160a:	68ba      	ldr	r2, [r7, #8]
1000160c:	4313      	orrs	r3, r2
1000160e:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001610:	687b      	ldr	r3, [r7, #4]
10001612:	68ba      	ldr	r2, [r7, #8]
10001614:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
10001616:	687b      	ldr	r3, [r7, #4]
10001618:	695b      	ldr	r3, [r3, #20]
1000161a:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
1000161c:	1cbb      	adds	r3, r7, #2
1000161e:	781b      	ldrb	r3, [r3, #0]
10001620:	2b01      	cmp	r3, #1
10001622:	d105      	bne.n	10001630 <XMC_CCU4_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
10001624:	68fb      	ldr	r3, [r7, #12]
10001626:	2280      	movs	r2, #128	; 0x80
10001628:	00d2      	lsls	r2, r2, #3
1000162a:	4313      	orrs	r3, r2
1000162c:	60fb      	str	r3, [r7, #12]
1000162e:	e003      	b.n	10001638 <XMC_CCU4_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
10001630:	68fb      	ldr	r3, [r7, #12]
10001632:	4a04      	ldr	r2, [pc, #16]	; (10001644 <XMC_CCU4_SLICE_StartConfig+0x64>)
10001634:	4013      	ands	r3, r2
10001636:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
10001638:	687b      	ldr	r3, [r7, #4]
1000163a:	68fa      	ldr	r2, [r7, #12]
1000163c:	615a      	str	r2, [r3, #20]
}
1000163e:	46bd      	mov	sp, r7
10001640:	b004      	add	sp, #16
10001642:	bd80      	pop	{r7, pc}
10001644:	fffffbff 	.word	0xfffffbff

10001648 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
		                       const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
10001648:	b580      	push	{r7, lr}
1000164a:	b084      	sub	sp, #16
1000164c:	af00      	add	r7, sp, #0
1000164e:	6078      	str	r0, [r7, #4]
10001650:	1c08      	adds	r0, r1, #0
10001652:	1c11      	adds	r1, r2, #0
10001654:	1cfb      	adds	r3, r7, #3
10001656:	1c02      	adds	r2, r0, #0
10001658:	701a      	strb	r2, [r3, #0]
1000165a:	1cbb      	adds	r3, r7, #2
1000165c:	1c0a      	adds	r2, r1, #0
1000165e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001660:	687b      	ldr	r3, [r7, #4]
10001662:	685b      	ldr	r3, [r3, #4]
10001664:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
10001666:	68fb      	ldr	r3, [r7, #12]
10001668:	220c      	movs	r2, #12
1000166a:	4393      	bics	r3, r2
1000166c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
1000166e:	1cfb      	adds	r3, r7, #3
10001670:	781b      	ldrb	r3, [r3, #0]
10001672:	009b      	lsls	r3, r3, #2
10001674:	68fa      	ldr	r2, [r7, #12]
10001676:	4313      	orrs	r3, r2
10001678:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	68fa      	ldr	r2, [r7, #12]
1000167e:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
10001680:	687b      	ldr	r3, [r7, #4]
10001682:	695b      	ldr	r3, [r3, #20]
10001684:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
10001686:	68bb      	ldr	r3, [r7, #8]
10001688:	4a07      	ldr	r2, [pc, #28]	; (100016a8 <XMC_CCU4_SLICE_StopConfig+0x60>)
1000168a:	4013      	ands	r3, r2
1000168c:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
1000168e:	1cbb      	adds	r3, r7, #2
10001690:	781b      	ldrb	r3, [r3, #0]
10001692:	021b      	lsls	r3, r3, #8
10001694:	68ba      	ldr	r2, [r7, #8]
10001696:	4313      	orrs	r3, r2
10001698:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
1000169a:	687b      	ldr	r3, [r7, #4]
1000169c:	68ba      	ldr	r2, [r7, #8]
1000169e:	615a      	str	r2, [r3, #20]
}
100016a0:	46bd      	mov	sp, r7
100016a2:	b004      	add	sp, #16
100016a4:	bd80      	pop	{r7, pc}
100016a6:	46c0      	nop			; (mov r8, r8)
100016a8:	fffffcff 	.word	0xfffffcff

100016ac <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100016ac:	b580      	push	{r7, lr}
100016ae:	b084      	sub	sp, #16
100016b0:	af00      	add	r7, sp, #0
100016b2:	6078      	str	r0, [r7, #4]
100016b4:	1c0a      	adds	r2, r1, #0
100016b6:	1cfb      	adds	r3, r7, #3
100016b8:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
100016ba:	687b      	ldr	r3, [r7, #4]
100016bc:	685b      	ldr	r3, [r3, #4]
100016be:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
100016c0:	68fb      	ldr	r3, [r7, #12]
100016c2:	4a07      	ldr	r2, [pc, #28]	; (100016e0 <XMC_CCU4_SLICE_LoadConfig+0x34>)
100016c4:	4013      	ands	r3, r2
100016c6:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
100016c8:	1cfb      	adds	r3, r7, #3
100016ca:	781b      	ldrb	r3, [r3, #0]
100016cc:	031b      	lsls	r3, r3, #12
100016ce:	68fa      	ldr	r2, [r7, #12]
100016d0:	4313      	orrs	r3, r2
100016d2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100016d4:	687b      	ldr	r3, [r7, #4]
100016d6:	68fa      	ldr	r2, [r7, #12]
100016d8:	605a      	str	r2, [r3, #4]
}
100016da:	46bd      	mov	sp, r7
100016dc:	b004      	add	sp, #16
100016de:	bd80      	pop	{r7, pc}
100016e0:	ffffcfff 	.word	0xffffcfff

100016e4 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
100016e4:	b590      	push	{r4, r7, lr}
100016e6:	b085      	sub	sp, #20
100016e8:	af00      	add	r7, sp, #0
100016ea:	6078      	str	r0, [r7, #4]
100016ec:	1c0c      	adds	r4, r1, #0
100016ee:	1c10      	adds	r0, r2, #0
100016f0:	1c19      	adds	r1, r3, #0
100016f2:	1cfb      	adds	r3, r7, #3
100016f4:	1c22      	adds	r2, r4, #0
100016f6:	701a      	strb	r2, [r3, #0]
100016f8:	1cbb      	adds	r3, r7, #2
100016fa:	1c02      	adds	r2, r0, #0
100016fc:	701a      	strb	r2, [r3, #0]
100016fe:	1c7b      	adds	r3, r7, #1
10001700:	1c0a      	adds	r2, r1, #0
10001702:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
		          (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
10001704:	687b      	ldr	r3, [r7, #4]
10001706:	695b      	ldr	r3, [r3, #20]
10001708:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
1000170a:	687b      	ldr	r3, [r7, #4]
1000170c:	685b      	ldr	r3, [r3, #4]
1000170e:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
10001710:	68bb      	ldr	r3, [r7, #8]
10001712:	4a17      	ldr	r2, [pc, #92]	; (10001770 <XMC_CCU4_SLICE_ModulationConfig+0x8c>)
10001714:	4013      	ands	r3, r2
10001716:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
10001718:	1cfb      	adds	r3, r7, #3
1000171a:	781b      	ldrb	r3, [r3, #0]
1000171c:	049b      	lsls	r3, r3, #18
1000171e:	68ba      	ldr	r2, [r7, #8]
10001720:	4313      	orrs	r3, r2
10001722:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001724:	687b      	ldr	r3, [r7, #4]
10001726:	68ba      	ldr	r2, [r7, #8]
10001728:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
1000172a:	1cbb      	adds	r3, r7, #2
1000172c:	781b      	ldrb	r3, [r3, #0]
1000172e:	2b01      	cmp	r3, #1
10001730:	d105      	bne.n	1000173e <XMC_CCU4_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
10001732:	68fb      	ldr	r3, [r7, #12]
10001734:	2280      	movs	r2, #128	; 0x80
10001736:	0452      	lsls	r2, r2, #17
10001738:	4313      	orrs	r3, r2
1000173a:	60fb      	str	r3, [r7, #12]
1000173c:	e003      	b.n	10001746 <XMC_CCU4_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
1000173e:	68fb      	ldr	r3, [r7, #12]
10001740:	4a0c      	ldr	r2, [pc, #48]	; (10001774 <XMC_CCU4_SLICE_ModulationConfig+0x90>)
10001742:	4013      	ands	r3, r2
10001744:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
10001746:	1c7b      	adds	r3, r7, #1
10001748:	781b      	ldrb	r3, [r3, #0]
1000174a:	2b00      	cmp	r3, #0
1000174c:	d005      	beq.n	1000175a <XMC_CCU4_SLICE_ModulationConfig+0x76>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
1000174e:	68fb      	ldr	r3, [r7, #12]
10001750:	2280      	movs	r2, #128	; 0x80
10001752:	0412      	lsls	r2, r2, #16
10001754:	4313      	orrs	r3, r2
10001756:	60fb      	str	r3, [r7, #12]
10001758:	e003      	b.n	10001762 <XMC_CCU4_SLICE_ModulationConfig+0x7e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
1000175a:	68fb      	ldr	r3, [r7, #12]
1000175c:	4a06      	ldr	r2, [pc, #24]	; (10001778 <XMC_CCU4_SLICE_ModulationConfig+0x94>)
1000175e:	4013      	ands	r3, r2
10001760:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
10001762:	687b      	ldr	r3, [r7, #4]
10001764:	68fa      	ldr	r2, [r7, #12]
10001766:	615a      	str	r2, [r3, #20]
}
10001768:	46bd      	mov	sp, r7
1000176a:	b005      	add	sp, #20
1000176c:	bd90      	pop	{r4, r7, pc}
1000176e:	46c0      	nop			; (mov r8, r8)
10001770:	fff3ffff 	.word	0xfff3ffff
10001774:	feffffff 	.word	0xfeffffff
10001778:	ff7fffff 	.word	0xff7fffff

1000177c <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
1000177c:	b580      	push	{r7, lr}
1000177e:	b084      	sub	sp, #16
10001780:	af00      	add	r7, sp, #0
10001782:	6078      	str	r0, [r7, #4]
10001784:	1c0a      	adds	r2, r1, #0
10001786:	1cfb      	adds	r3, r7, #3
10001788:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	685b      	ldr	r3, [r3, #4]
1000178e:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
10001790:	68fb      	ldr	r3, [r7, #12]
10001792:	4a07      	ldr	r2, [pc, #28]	; (100017b0 <XMC_CCU4_SLICE_CountConfig+0x34>)
10001794:	4013      	ands	r3, r2
10001796:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
10001798:	1cfb      	adds	r3, r7, #3
1000179a:	781b      	ldrb	r3, [r3, #0]
1000179c:	039b      	lsls	r3, r3, #14
1000179e:	68fa      	ldr	r2, [r7, #12]
100017a0:	4313      	orrs	r3, r2
100017a2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100017a4:	687b      	ldr	r3, [r7, #4]
100017a6:	68fa      	ldr	r2, [r7, #12]
100017a8:	605a      	str	r2, [r3, #4]
}
100017aa:	46bd      	mov	sp, r7
100017ac:	b004      	add	sp, #16
100017ae:	bd80      	pop	{r7, pc}
100017b0:	ffff3fff 	.word	0xffff3fff

100017b4 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017b4:	b580      	push	{r7, lr}
100017b6:	b084      	sub	sp, #16
100017b8:	af00      	add	r7, sp, #0
100017ba:	6078      	str	r0, [r7, #4]
100017bc:	1c0a      	adds	r2, r1, #0
100017be:	1cfb      	adds	r3, r7, #3
100017c0:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
100017c2:	687b      	ldr	r3, [r7, #4]
100017c4:	685b      	ldr	r3, [r3, #4]
100017c6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100017c8:	68fb      	ldr	r3, [r7, #12]
100017ca:	4a07      	ldr	r2, [pc, #28]	; (100017e8 <XMC_CCU4_SLICE_GateConfig+0x34>)
100017cc:	4013      	ands	r3, r2
100017ce:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100017d0:	1cfb      	adds	r3, r7, #3
100017d2:	781b      	ldrb	r3, [r3, #0]
100017d4:	021b      	lsls	r3, r3, #8
100017d6:	68fa      	ldr	r2, [r7, #12]
100017d8:	4313      	orrs	r3, r2
100017da:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100017dc:	687b      	ldr	r3, [r7, #4]
100017de:	68fa      	ldr	r2, [r7, #12]
100017e0:	605a      	str	r2, [r3, #4]
}
100017e2:	46bd      	mov	sp, r7
100017e4:	b004      	add	sp, #16
100017e6:	bd80      	pop	{r7, pc}
100017e8:	fffffcff 	.word	0xfffffcff

100017ec <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017ec:	b580      	push	{r7, lr}
100017ee:	b084      	sub	sp, #16
100017f0:	af00      	add	r7, sp, #0
100017f2:	6078      	str	r0, [r7, #4]
100017f4:	1c0a      	adds	r2, r1, #0
100017f6:	1cfb      	adds	r3, r7, #3
100017f8:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
100017fa:	687b      	ldr	r3, [r7, #4]
100017fc:	685b      	ldr	r3, [r3, #4]
100017fe:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
10001800:	68fb      	ldr	r3, [r7, #12]
10001802:	4a07      	ldr	r2, [pc, #28]	; (10001820 <XMC_CCU4_SLICE_DirectionConfig+0x34>)
10001804:	4013      	ands	r3, r2
10001806:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
10001808:	1cfb      	adds	r3, r7, #3
1000180a:	781b      	ldrb	r3, [r3, #0]
1000180c:	029b      	lsls	r3, r3, #10
1000180e:	68fa      	ldr	r2, [r7, #12]
10001810:	4313      	orrs	r3, r2
10001812:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
10001814:	687b      	ldr	r3, [r7, #4]
10001816:	68fa      	ldr	r2, [r7, #12]
10001818:	605a      	str	r2, [r3, #4]
}
1000181a:	46bd      	mov	sp, r7
1000181c:	b004      	add	sp, #16
1000181e:	bd80      	pop	{r7, pc}
10001820:	fffff3ff 	.word	0xfffff3ff

10001824 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
10001824:	b580      	push	{r7, lr}
10001826:	b084      	sub	sp, #16
10001828:	af00      	add	r7, sp, #0
1000182a:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
1000182c:	687b      	ldr	r3, [r7, #4]
1000182e:	685b      	ldr	r3, [r3, #4]
10001830:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
10001832:	68fb      	ldr	r3, [r7, #12]
10001834:	4a06      	ldr	r2, [pc, #24]	; (10001850 <XMC_CCU4_SLICE_StatusBitOverrideConfig+0x2c>)
10001836:	4013      	ands	r3, r2
10001838:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
1000183a:	68fb      	ldr	r3, [r7, #12]
1000183c:	2280      	movs	r2, #128	; 0x80
1000183e:	0252      	lsls	r2, r2, #9
10001840:	4313      	orrs	r3, r2
10001842:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001844:	687b      	ldr	r3, [r7, #4]
10001846:	68fa      	ldr	r2, [r7, #12]
10001848:	605a      	str	r2, [r3, #4]
}
1000184a:	46bd      	mov	sp, r7
1000184c:	b004      	add	sp, #16
1000184e:	bd80      	pop	{r7, pc}
10001850:	fffeffff 	.word	0xfffeffff

10001854 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
		                           const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001854:	b580      	push	{r7, lr}
10001856:	b084      	sub	sp, #16
10001858:	af00      	add	r7, sp, #0
1000185a:	6078      	str	r0, [r7, #4]
1000185c:	1c08      	adds	r0, r1, #0
1000185e:	1c11      	adds	r1, r2, #0
10001860:	1cfb      	adds	r3, r7, #3
10001862:	1c02      	adds	r2, r0, #0
10001864:	701a      	strb	r2, [r3, #0]
10001866:	1cbb      	adds	r3, r7, #2
10001868:	1c0a      	adds	r2, r1, #0
1000186a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
		                                                         (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	685b      	ldr	r3, [r3, #4]
10001870:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
10001872:	68bb      	ldr	r3, [r7, #8]
10001874:	4a17      	ldr	r2, [pc, #92]	; (100018d4 <XMC_CCU4_SLICE_TrapConfig+0x80>)
10001876:	4013      	ands	r3, r2
10001878:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
1000187a:	68bb      	ldr	r3, [r7, #8]
1000187c:	2280      	movs	r2, #128	; 0x80
1000187e:	0292      	lsls	r2, r2, #10
10001880:	4313      	orrs	r3, r2
10001882:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001884:	687b      	ldr	r3, [r7, #4]
10001886:	68ba      	ldr	r2, [r7, #8]
10001888:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
1000188a:	687b      	ldr	r3, [r7, #4]
1000188c:	695b      	ldr	r3, [r3, #20]
1000188e:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
10001890:	1cbb      	adds	r3, r7, #2
10001892:	781b      	ldrb	r3, [r3, #0]
10001894:	2b00      	cmp	r3, #0
10001896:	d005      	beq.n	100018a4 <XMC_CCU4_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
10001898:	68fb      	ldr	r3, [r7, #12]
1000189a:	2280      	movs	r2, #128	; 0x80
1000189c:	0392      	lsls	r2, r2, #14
1000189e:	4313      	orrs	r3, r2
100018a0:	60fb      	str	r3, [r7, #12]
100018a2:	e003      	b.n	100018ac <XMC_CCU4_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
100018a4:	68fb      	ldr	r3, [r7, #12]
100018a6:	4a0c      	ldr	r2, [pc, #48]	; (100018d8 <XMC_CCU4_SLICE_TrapConfig+0x84>)
100018a8:	4013      	ands	r3, r2
100018aa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
100018ac:	1cfb      	adds	r3, r7, #3
100018ae:	781b      	ldrb	r3, [r3, #0]
100018b0:	2b01      	cmp	r3, #1
100018b2:	d105      	bne.n	100018c0 <XMC_CCU4_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
100018b4:	68fb      	ldr	r3, [r7, #12]
100018b6:	2280      	movs	r2, #128	; 0x80
100018b8:	03d2      	lsls	r2, r2, #15
100018ba:	4313      	orrs	r3, r2
100018bc:	60fb      	str	r3, [r7, #12]
100018be:	e003      	b.n	100018c8 <XMC_CCU4_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
100018c0:	68fb      	ldr	r3, [r7, #12]
100018c2:	4a06      	ldr	r2, [pc, #24]	; (100018dc <XMC_CCU4_SLICE_TrapConfig+0x88>)
100018c4:	4013      	ands	r3, r2
100018c6:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
100018c8:	687b      	ldr	r3, [r7, #4]
100018ca:	68fa      	ldr	r2, [r7, #12]
100018cc:	615a      	str	r2, [r3, #20]
}
100018ce:	46bd      	mov	sp, r7
100018d0:	b004      	add	sp, #16
100018d2:	bd80      	pop	{r7, pc}
100018d4:	fffdffff 	.word	0xfffdffff
100018d8:	ffdfffff 	.word	0xffdfffff
100018dc:	ffbfffff 	.word	0xffbfffff

100018e0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
100018e0:	b580      	push	{r7, lr}
100018e2:	b086      	sub	sp, #24
100018e4:	af00      	add	r7, sp, #0
100018e6:	60f8      	str	r0, [r7, #12]
100018e8:	60b9      	str	r1, [r7, #8]
100018ea:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
100018ec:	68fb      	ldr	r3, [r7, #12]
100018ee:	681b      	ldr	r3, [r3, #0]
100018f0:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
100018f2:	697b      	ldr	r3, [r7, #20]
100018f4:	4a2a      	ldr	r2, [pc, #168]	; (100019a0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
100018f6:	4013      	ands	r3, r2
100018f8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
100018fa:	68bb      	ldr	r3, [r7, #8]
100018fc:	785b      	ldrb	r3, [r3, #1]
100018fe:	049b      	lsls	r3, r3, #18
10001900:	697a      	ldr	r2, [r7, #20]
10001902:	4313      	orrs	r3, r2
10001904:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
10001906:	697b      	ldr	r3, [r7, #20]
10001908:	4a26      	ldr	r2, [pc, #152]	; (100019a4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
1000190a:	4013      	ands	r3, r2
1000190c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
1000190e:	687b      	ldr	r3, [r7, #4]
10001910:	785b      	ldrb	r3, [r3, #1]
10001912:	051b      	lsls	r3, r3, #20
10001914:	697a      	ldr	r2, [r7, #20]
10001916:	4313      	orrs	r3, r2
10001918:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
1000191a:	697b      	ldr	r3, [r7, #20]
1000191c:	4a22      	ldr	r2, [pc, #136]	; (100019a8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
1000191e:	4013      	ands	r3, r2
10001920:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
10001922:	68bb      	ldr	r3, [r7, #8]
10001924:	789b      	ldrb	r3, [r3, #2]
10001926:	05db      	lsls	r3, r3, #23
10001928:	697a      	ldr	r2, [r7, #20]
1000192a:	4313      	orrs	r3, r2
1000192c:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
1000192e:	697b      	ldr	r3, [r7, #20]
10001930:	4a1e      	ldr	r2, [pc, #120]	; (100019ac <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
10001932:	4013      	ands	r3, r2
10001934:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
10001936:	687b      	ldr	r3, [r7, #4]
10001938:	789b      	ldrb	r3, [r3, #2]
1000193a:	061b      	lsls	r3, r3, #24
1000193c:	697a      	ldr	r2, [r7, #20]
1000193e:	4313      	orrs	r3, r2
10001940:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
10001942:	697b      	ldr	r3, [r7, #20]
10001944:	4a1a      	ldr	r2, [pc, #104]	; (100019b0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
10001946:	4013      	ands	r3, r2
10001948:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
1000194a:	68bb      	ldr	r3, [r7, #8]
1000194c:	78db      	ldrb	r3, [r3, #3]
1000194e:	06db      	lsls	r3, r3, #27
10001950:	697a      	ldr	r2, [r7, #20]
10001952:	4313      	orrs	r3, r2
10001954:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
10001956:	697b      	ldr	r3, [r7, #20]
10001958:	4a16      	ldr	r2, [pc, #88]	; (100019b4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
1000195a:	4013      	ands	r3, r2
1000195c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
1000195e:	687b      	ldr	r3, [r7, #4]
10001960:	78db      	ldrb	r3, [r3, #3]
10001962:	075b      	lsls	r3, r3, #29
10001964:	697a      	ldr	r2, [r7, #20]
10001966:	4313      	orrs	r3, r2
10001968:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
1000196a:	697b      	ldr	r3, [r7, #20]
1000196c:	22f0      	movs	r2, #240	; 0xf0
1000196e:	4393      	bics	r3, r2
10001970:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
10001972:	68bb      	ldr	r3, [r7, #8]
10001974:	781b      	ldrb	r3, [r3, #0]
10001976:	011b      	lsls	r3, r3, #4
10001978:	697a      	ldr	r2, [r7, #20]
1000197a:	4313      	orrs	r3, r2
1000197c:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
1000197e:	697b      	ldr	r3, [r7, #20]
10001980:	4a0d      	ldr	r2, [pc, #52]	; (100019b8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
10001982:	4013      	ands	r3, r2
10001984:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
10001986:	687b      	ldr	r3, [r7, #4]
10001988:	781b      	ldrb	r3, [r3, #0]
1000198a:	021b      	lsls	r3, r3, #8
1000198c:	697a      	ldr	r2, [r7, #20]
1000198e:	4313      	orrs	r3, r2
10001990:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
10001992:	68fb      	ldr	r3, [r7, #12]
10001994:	697a      	ldr	r2, [r7, #20]
10001996:	601a      	str	r2, [r3, #0]
#endif
}
10001998:	46bd      	mov	sp, r7
1000199a:	b006      	add	sp, #24
1000199c:	bd80      	pop	{r7, pc}
1000199e:	46c0      	nop			; (mov r8, r8)
100019a0:	fff3ffff 	.word	0xfff3ffff
100019a4:	ffcfffff 	.word	0xffcfffff
100019a8:	ff7fffff 	.word	0xff7fffff
100019ac:	feffffff 	.word	0xfeffffff
100019b0:	e7ffffff 	.word	0xe7ffffff
100019b4:	9fffffff 	.word	0x9fffffff
100019b8:	fffff0ff 	.word	0xfffff0ff

100019bc <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100019bc:	b580      	push	{r7, lr}
100019be:	b088      	sub	sp, #32
100019c0:	af00      	add	r7, sp, #0
100019c2:	60f8      	str	r0, [r7, #12]
100019c4:	607a      	str	r2, [r7, #4]
100019c6:	230b      	movs	r3, #11
100019c8:	18fb      	adds	r3, r7, r3
100019ca:	1c0a      	adds	r2, r1, #0
100019cc:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
100019ce:	231f      	movs	r3, #31
100019d0:	18fb      	adds	r3, r7, r3
100019d2:	220b      	movs	r2, #11
100019d4:	18ba      	adds	r2, r7, r2
100019d6:	7812      	ldrb	r2, [r2, #0]
100019d8:	3a01      	subs	r2, #1
100019da:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
100019dc:	68fb      	ldr	r3, [r7, #12]
100019de:	681b      	ldr	r3, [r3, #0]
100019e0:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
100019e2:	231f      	movs	r3, #31
100019e4:	18fb      	adds	r3, r7, r3
100019e6:	781b      	ldrb	r3, [r3, #0]
100019e8:	18db      	adds	r3, r3, r3
100019ea:	b2da      	uxtb	r2, r3
100019ec:	2317      	movs	r3, #23
100019ee:	18fb      	adds	r3, r7, r3
100019f0:	3210      	adds	r2, #16
100019f2:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100019f4:	2317      	movs	r3, #23
100019f6:	18fb      	adds	r3, r7, r3
100019f8:	781b      	ldrb	r3, [r3, #0]
100019fa:	2203      	movs	r2, #3
100019fc:	409a      	lsls	r2, r3
100019fe:	1c13      	adds	r3, r2, #0
10001a00:	43da      	mvns	r2, r3
10001a02:	69bb      	ldr	r3, [r7, #24]
10001a04:	4013      	ands	r3, r2
10001a06:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001a08:	687b      	ldr	r3, [r7, #4]
10001a0a:	785b      	ldrb	r3, [r3, #1]
10001a0c:	1c1a      	adds	r2, r3, #0
10001a0e:	2317      	movs	r3, #23
10001a10:	18fb      	adds	r3, r7, r3
10001a12:	781b      	ldrb	r3, [r3, #0]
10001a14:	409a      	lsls	r2, r3
10001a16:	1c13      	adds	r3, r2, #0
10001a18:	69ba      	ldr	r2, [r7, #24]
10001a1a:	4313      	orrs	r3, r2
10001a1c:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
10001a1e:	2317      	movs	r3, #23
10001a20:	18fb      	adds	r3, r7, r3
10001a22:	221f      	movs	r2, #31
10001a24:	18ba      	adds	r2, r7, r2
10001a26:	7812      	ldrb	r2, [r2, #0]
10001a28:	3216      	adds	r2, #22
10001a2a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001a2c:	2317      	movs	r3, #23
10001a2e:	18fb      	adds	r3, r7, r3
10001a30:	781b      	ldrb	r3, [r3, #0]
10001a32:	2201      	movs	r2, #1
10001a34:	409a      	lsls	r2, r3
10001a36:	1c13      	adds	r3, r2, #0
10001a38:	43da      	mvns	r2, r3
10001a3a:	69bb      	ldr	r3, [r7, #24]
10001a3c:	4013      	ands	r3, r2
10001a3e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001a40:	687b      	ldr	r3, [r7, #4]
10001a42:	789b      	ldrb	r3, [r3, #2]
10001a44:	1c1a      	adds	r2, r3, #0
10001a46:	2317      	movs	r3, #23
10001a48:	18fb      	adds	r3, r7, r3
10001a4a:	781b      	ldrb	r3, [r3, #0]
10001a4c:	409a      	lsls	r2, r3
10001a4e:	1c13      	adds	r3, r2, #0
10001a50:	69ba      	ldr	r2, [r7, #24]
10001a52:	4313      	orrs	r3, r2
10001a54:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001a56:	231f      	movs	r3, #31
10001a58:	18fb      	adds	r3, r7, r3
10001a5a:	781b      	ldrb	r3, [r3, #0]
10001a5c:	18db      	adds	r3, r3, r3
10001a5e:	b2da      	uxtb	r2, r3
10001a60:	2317      	movs	r3, #23
10001a62:	18fb      	adds	r3, r7, r3
10001a64:	3219      	adds	r2, #25
10001a66:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001a68:	2317      	movs	r3, #23
10001a6a:	18fb      	adds	r3, r7, r3
10001a6c:	781b      	ldrb	r3, [r3, #0]
10001a6e:	2203      	movs	r2, #3
10001a70:	409a      	lsls	r2, r3
10001a72:	1c13      	adds	r3, r2, #0
10001a74:	43da      	mvns	r2, r3
10001a76:	69bb      	ldr	r3, [r7, #24]
10001a78:	4013      	ands	r3, r2
10001a7a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001a7c:	687b      	ldr	r3, [r7, #4]
10001a7e:	78db      	ldrb	r3, [r3, #3]
10001a80:	1c1a      	adds	r2, r3, #0
10001a82:	2317      	movs	r3, #23
10001a84:	18fb      	adds	r3, r7, r3
10001a86:	781b      	ldrb	r3, [r3, #0]
10001a88:	409a      	lsls	r2, r3
10001a8a:	1c13      	adds	r3, r2, #0
10001a8c:	69ba      	ldr	r2, [r7, #24]
10001a8e:	4313      	orrs	r3, r2
10001a90:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
10001a92:	2317      	movs	r3, #23
10001a94:	18fb      	adds	r3, r7, r3
10001a96:	221f      	movs	r2, #31
10001a98:	18ba      	adds	r2, r7, r2
10001a9a:	7812      	ldrb	r2, [r2, #0]
10001a9c:	0092      	lsls	r2, r2, #2
10001a9e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001aa0:	2317      	movs	r3, #23
10001aa2:	18fb      	adds	r3, r7, r3
10001aa4:	781b      	ldrb	r3, [r3, #0]
10001aa6:	220f      	movs	r2, #15
10001aa8:	409a      	lsls	r2, r3
10001aaa:	1c13      	adds	r3, r2, #0
10001aac:	43da      	mvns	r2, r3
10001aae:	69bb      	ldr	r3, [r7, #24]
10001ab0:	4013      	ands	r3, r2
10001ab2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001ab4:	687b      	ldr	r3, [r7, #4]
10001ab6:	781b      	ldrb	r3, [r3, #0]
10001ab8:	1c1a      	adds	r2, r3, #0
10001aba:	2317      	movs	r3, #23
10001abc:	18fb      	adds	r3, r7, r3
10001abe:	781b      	ldrb	r3, [r3, #0]
10001ac0:	409a      	lsls	r2, r3
10001ac2:	1c13      	adds	r3, r2, #0
10001ac4:	69ba      	ldr	r2, [r7, #24]
10001ac6:	4313      	orrs	r3, r2
10001ac8:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10001aca:	68fb      	ldr	r3, [r7, #12]
10001acc:	69ba      	ldr	r2, [r7, #24]
10001ace:	601a      	str	r2, [r3, #0]
#endif
}
10001ad0:	46bd      	mov	sp, r7
10001ad2:	b008      	add	sp, #32
10001ad4:	bd80      	pop	{r7, pc}
10001ad6:	46c0      	nop			; (mov r8, r8)

10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001ad8:	b580      	push	{r7, lr}
10001ada:	b086      	sub	sp, #24
10001adc:	af00      	add	r7, sp, #0
10001ade:	6078      	str	r0, [r7, #4]
10001ae0:	1c08      	adds	r0, r1, #0
10001ae2:	1c11      	adds	r1, r2, #0
10001ae4:	1cfb      	adds	r3, r7, #3
10001ae6:	1c02      	adds	r2, r0, #0
10001ae8:	701a      	strb	r2, [r3, #0]
10001aea:	1cbb      	adds	r3, r7, #2
10001aec:	1c0a      	adds	r2, r1, #0
10001aee:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001af0:	687b      	ldr	r3, [r7, #4]
10001af2:	22a8      	movs	r2, #168	; 0xa8
10001af4:	589b      	ldr	r3, [r3, r2]
10001af6:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10001af8:	1cfb      	adds	r3, r7, #3
10001afa:	781b      	ldrb	r3, [r3, #0]
10001afc:	2b09      	cmp	r3, #9
10001afe:	d81a      	bhi.n	10001b36 <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
10001b00:	009a      	lsls	r2, r3, #2
10001b02:	4b1a      	ldr	r3, [pc, #104]	; (10001b6c <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10001b04:	18d3      	adds	r3, r2, r3
10001b06:	681b      	ldr	r3, [r3, #0]
10001b08:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001b0a:	2303      	movs	r3, #3
10001b0c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001b0e:	2300      	movs	r3, #0
10001b10:	617b      	str	r3, [r7, #20]
      break;
10001b12:	e016      	b.n	10001b42 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001b14:	230c      	movs	r3, #12
10001b16:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001b18:	2302      	movs	r3, #2
10001b1a:	617b      	str	r3, [r7, #20]
      break;
10001b1c:	e011      	b.n	10001b42 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001b1e:	23c0      	movs	r3, #192	; 0xc0
10001b20:	009b      	lsls	r3, r3, #2
10001b22:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001b24:	2308      	movs	r3, #8
10001b26:	617b      	str	r3, [r7, #20]
      break;
10001b28:	e00b      	b.n	10001b42 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001b2a:	23c0      	movs	r3, #192	; 0xc0
10001b2c:	011b      	lsls	r3, r3, #4
10001b2e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001b30:	230a      	movs	r3, #10
10001b32:	617b      	str	r3, [r7, #20]
      break;
10001b34:	e005      	b.n	10001b42 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001b36:	23c0      	movs	r3, #192	; 0xc0
10001b38:	019b      	lsls	r3, r3, #6
10001b3a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001b3c:	230c      	movs	r3, #12
10001b3e:	617b      	str	r3, [r7, #20]
      break;
10001b40:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
10001b42:	693b      	ldr	r3, [r7, #16]
10001b44:	43da      	mvns	r2, r3
10001b46:	68fb      	ldr	r3, [r7, #12]
10001b48:	4013      	ands	r3, r2
10001b4a:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10001b4c:	1cbb      	adds	r3, r7, #2
10001b4e:	781a      	ldrb	r2, [r3, #0]
10001b50:	697b      	ldr	r3, [r7, #20]
10001b52:	409a      	lsls	r2, r3
10001b54:	1c13      	adds	r3, r2, #0
10001b56:	68fa      	ldr	r2, [r7, #12]
10001b58:	4313      	orrs	r3, r2
10001b5a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10001b5c:	687b      	ldr	r3, [r7, #4]
10001b5e:	21a8      	movs	r1, #168	; 0xa8
10001b60:	68fa      	ldr	r2, [r7, #12]
10001b62:	505a      	str	r2, [r3, r1]
}
10001b64:	46bd      	mov	sp, r7
10001b66:	b006      	add	sp, #24
10001b68:	bd80      	pop	{r7, pc}
10001b6a:	46c0      	nop			; (mov r8, r8)
10001b6c:	100058c4 	.word	0x100058c4

10001b70 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001b70:	b580      	push	{r7, lr}
10001b72:	b082      	sub	sp, #8
10001b74:	af00      	add	r7, sp, #0
10001b76:	6078      	str	r0, [r7, #4]
10001b78:	1c08      	adds	r0, r1, #0
10001b7a:	1c11      	adds	r1, r2, #0
10001b7c:	1cfb      	adds	r3, r7, #3
10001b7e:	1c02      	adds	r2, r0, #0
10001b80:	701a      	strb	r2, [r3, #0]
10001b82:	1cbb      	adds	r3, r7, #2
10001b84:	1c0a      	adds	r2, r1, #0
10001b86:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001b88:	687b      	ldr	r3, [r7, #4]
10001b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001b8c:	1cfa      	adds	r2, r7, #3
10001b8e:	7812      	ldrb	r2, [r2, #0]
10001b90:	0052      	lsls	r2, r2, #1
10001b92:	1c11      	adds	r1, r2, #0
10001b94:	2203      	movs	r2, #3
10001b96:	408a      	lsls	r2, r1
10001b98:	43d2      	mvns	r2, r2
10001b9a:	401a      	ands	r2, r3
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001ba0:	687b      	ldr	r3, [r7, #4]
10001ba2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001ba4:	1cbb      	adds	r3, r7, #2
10001ba6:	781b      	ldrb	r3, [r3, #0]
10001ba8:	1cf9      	adds	r1, r7, #3
10001baa:	7809      	ldrb	r1, [r1, #0]
10001bac:	0049      	lsls	r1, r1, #1
10001bae:	408b      	lsls	r3, r1
10001bb0:	431a      	orrs	r2, r3
10001bb2:	687b      	ldr	r3, [r7, #4]
10001bb4:	675a      	str	r2, [r3, #116]	; 0x74
}
10001bb6:	46bd      	mov	sp, r7
10001bb8:	b002      	add	sp, #8
10001bba:	bd80      	pop	{r7, pc}

10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10001bbc:	b580      	push	{r7, lr}
10001bbe:	b082      	sub	sp, #8
10001bc0:	af00      	add	r7, sp, #0
10001bc2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10001bc4:	687b      	ldr	r3, [r7, #4]
10001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001bc8:	b2db      	uxtb	r3, r3
10001bca:	227f      	movs	r2, #127	; 0x7f
10001bcc:	4393      	bics	r3, r2
10001bce:	b2db      	uxtb	r3, r3
}
10001bd0:	1c18      	adds	r0, r3, #0
10001bd2:	46bd      	mov	sp, r7
10001bd4:	b002      	add	sp, #8
10001bd6:	bd80      	pop	{r7, pc}

10001bd8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
10001bd8:	b580      	push	{r7, lr}
10001bda:	b082      	sub	sp, #8
10001bdc:	af00      	add	r7, sp, #0
10001bde:	6078      	str	r0, [r7, #4]
10001be0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001be2:	687b      	ldr	r3, [r7, #4]
10001be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10001be6:	683b      	ldr	r3, [r7, #0]
10001be8:	431a      	orrs	r2, r3
10001bea:	687b      	ldr	r3, [r7, #4]
10001bec:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001bee:	46bd      	mov	sp, r7
10001bf0:	b002      	add	sp, #8
10001bf2:	bd80      	pop	{r7, pc}

10001bf4 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
10001bf4:	b580      	push	{r7, lr}
10001bf6:	b082      	sub	sp, #8
10001bf8:	af00      	add	r7, sp, #0
10001bfa:	6078      	str	r0, [r7, #4]
10001bfc:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
10001bfe:	687b      	ldr	r3, [r7, #4]
10001c00:	1c18      	adds	r0, r3, #0
10001c02:	f000 fa1b 	bl	1000203c <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
10001c06:	687b      	ldr	r3, [r7, #4]
10001c08:	4a0e      	ldr	r2, [pc, #56]	; (10001c44 <XMC_I2C_CH_Init+0x50>)
10001c0a:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
10001c0c:	683b      	ldr	r3, [r7, #0]
10001c0e:	889b      	ldrh	r3, [r3, #4]
10001c10:	687a      	ldr	r2, [r7, #4]
10001c12:	1c10      	adds	r0, r2, #0
10001c14:	1c19      	adds	r1, r3, #0
10001c16:	f000 f817 	bl	10001c48 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
10001c1a:	683b      	ldr	r3, [r7, #0]
10001c1c:	681b      	ldr	r3, [r3, #0]
10001c1e:	687a      	ldr	r2, [r7, #4]
10001c20:	1c10      	adds	r0, r2, #0
10001c22:	1c19      	adds	r1, r3, #0
10001c24:	f000 f838 	bl	10001c98 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
10001c28:	687b      	ldr	r3, [r7, #4]
10001c2a:	22a0      	movs	r2, #160	; 0xa0
10001c2c:	00d2      	lsls	r2, r2, #3
10001c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
10001c30:	687b      	ldr	r3, [r7, #4]
10001c32:	2201      	movs	r2, #1
10001c34:	4252      	negs	r2, r2
10001c36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	2200      	movs	r2, #0
10001c3c:	641a      	str	r2, [r3, #64]	; 0x40
}
10001c3e:	46bd      	mov	sp, r7
10001c40:	b002      	add	sp, #8
10001c42:	bd80      	pop	{r7, pc}
10001c44:	073f0303 	.word	0x073f0303

10001c48 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
10001c48:	b580      	push	{r7, lr}
10001c4a:	b082      	sub	sp, #8
10001c4c:	af00      	add	r7, sp, #0
10001c4e:	6078      	str	r0, [r7, #4]
10001c50:	1c0a      	adds	r2, r1, #0
10001c52:	1cbb      	adds	r3, r7, #2
10001c54:	801a      	strh	r2, [r3, #0]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
10001c56:	1cbb      	adds	r3, r7, #2
10001c58:	881a      	ldrh	r2, [r3, #0]
10001c5a:	23f8      	movs	r3, #248	; 0xf8
10001c5c:	01db      	lsls	r3, r3, #7
10001c5e:	401a      	ands	r2, r3
10001c60:	23f0      	movs	r3, #240	; 0xf0
10001c62:	01db      	lsls	r3, r3, #7
10001c64:	429a      	cmp	r2, r3
10001c66:	d10e      	bne.n	10001c86 <XMC_I2C_CH_SetSlaveAddress+0x3e>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
10001c68:	1cbb      	adds	r3, r7, #2
10001c6a:	881b      	ldrh	r3, [r3, #0]
10001c6c:	22ff      	movs	r2, #255	; 0xff
10001c6e:	401a      	ands	r2, r3
10001c70:	1cbb      	adds	r3, r7, #2
10001c72:	881b      	ldrh	r3, [r3, #0]
10001c74:	005b      	lsls	r3, r3, #1
10001c76:	1c19      	adds	r1, r3, #0
10001c78:	23fe      	movs	r3, #254	; 0xfe
10001c7a:	021b      	lsls	r3, r3, #8
10001c7c:	400b      	ands	r3, r1
10001c7e:	431a      	orrs	r2, r3
10001c80:	687b      	ldr	r3, [r7, #4]
10001c82:	63da      	str	r2, [r3, #60]	; 0x3c
10001c84:	e004      	b.n	10001c90 <XMC_I2C_CH_SetSlaveAddress+0x48>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
10001c86:	1cbb      	adds	r3, r7, #2
10001c88:	881b      	ldrh	r3, [r3, #0]
10001c8a:	021a      	lsls	r2, r3, #8
10001c8c:	687b      	ldr	r3, [r7, #4]
10001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
10001c90:	46bd      	mov	sp, r7
10001c92:	b002      	add	sp, #8
10001c94:	bd80      	pop	{r7, pc}
10001c96:	46c0      	nop			; (mov r8, r8)

10001c98 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
10001c98:	b580      	push	{r7, lr}
10001c9a:	b084      	sub	sp, #16
10001c9c:	af00      	add	r7, sp, #0
10001c9e:	6078      	str	r0, [r7, #4]
10001ca0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
10001ca2:	230f      	movs	r3, #15
10001ca4:	18fb      	adds	r3, r7, r3
10001ca6:	2201      	movs	r2, #1
10001ca8:	701a      	strb	r2, [r3, #0]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
10001caa:	683b      	ldr	r3, [r7, #0]
10001cac:	4a1d      	ldr	r2, [pc, #116]	; (10001d24 <XMC_I2C_CH_SetBaudrate+0x8c>)
10001cae:	4293      	cmp	r3, r2
10001cb0:	d813      	bhi.n	10001cda <XMC_I2C_CH_SetBaudrate+0x42>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
10001cb2:	687b      	ldr	r3, [r7, #4]
10001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001cb6:	4a1c      	ldr	r2, [pc, #112]	; (10001d28 <XMC_I2C_CH_SetBaudrate+0x90>)
10001cb8:	401a      	ands	r2, r3
10001cba:	687b      	ldr	r3, [r7, #4]
10001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
10001cbe:	687a      	ldr	r2, [r7, #4]
10001cc0:	683b      	ldr	r3, [r7, #0]
10001cc2:	1c10      	adds	r0, r2, #0
10001cc4:	1c19      	adds	r1, r3, #0
10001cc6:	220a      	movs	r2, #10
10001cc8:	f000 f9e0 	bl	1000208c <XMC_USIC_CH_SetBaudrate>
10001ccc:	1e03      	subs	r3, r0, #0
10001cce:	d121      	bne.n	10001d14 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10001cd0:	230f      	movs	r3, #15
10001cd2:	18fb      	adds	r3, r7, r3
10001cd4:	2200      	movs	r2, #0
10001cd6:	701a      	strb	r2, [r3, #0]
10001cd8:	e01c      	b.n	10001d14 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
10001cda:	683b      	ldr	r3, [r7, #0]
10001cdc:	4a13      	ldr	r2, [pc, #76]	; (10001d2c <XMC_I2C_CH_SetBaudrate+0x94>)
10001cde:	4293      	cmp	r3, r2
10001ce0:	d814      	bhi.n	10001d0c <XMC_I2C_CH_SetBaudrate+0x74>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10001ce2:	687b      	ldr	r3, [r7, #4]
10001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ce6:	2280      	movs	r2, #128	; 0x80
10001ce8:	0292      	lsls	r2, r2, #10
10001cea:	431a      	orrs	r2, r3
10001cec:	687b      	ldr	r3, [r7, #4]
10001cee:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
10001cf0:	687a      	ldr	r2, [r7, #4]
10001cf2:	683b      	ldr	r3, [r7, #0]
10001cf4:	1c10      	adds	r0, r2, #0
10001cf6:	1c19      	adds	r1, r3, #0
10001cf8:	2219      	movs	r2, #25
10001cfa:	f000 f9c7 	bl	1000208c <XMC_USIC_CH_SetBaudrate>
10001cfe:	1e03      	subs	r3, r0, #0
10001d00:	d108      	bne.n	10001d14 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10001d02:	230f      	movs	r3, #15
10001d04:	18fb      	adds	r3, r7, r3
10001d06:	2200      	movs	r2, #0
10001d08:	701a      	strb	r2, [r3, #0]
10001d0a:	e003      	b.n	10001d14 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
10001d0c:	230f      	movs	r3, #15
10001d0e:	18fb      	adds	r3, r7, r3
10001d10:	2201      	movs	r2, #1
10001d12:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10001d14:	230f      	movs	r3, #15
10001d16:	18fb      	adds	r3, r7, r3
10001d18:	781b      	ldrb	r3, [r3, #0]
}
10001d1a:	1c18      	adds	r0, r3, #0
10001d1c:	46bd      	mov	sp, r7
10001d1e:	b004      	add	sp, #16
10001d20:	bd80      	pop	{r7, pc}
10001d22:	46c0      	nop			; (mov r8, r8)
10001d24:	000186a0 	.word	0x000186a0
10001d28:	fffdffff 	.word	0xfffdffff
10001d2c:	00061a80 	.word	0x00061a80

10001d30 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001d30:	b580      	push	{r7, lr}
10001d32:	b084      	sub	sp, #16
10001d34:	af00      	add	r7, sp, #0
10001d36:	6078      	str	r0, [r7, #4]
10001d38:	1c08      	adds	r0, r1, #0
10001d3a:	1c11      	adds	r1, r2, #0
10001d3c:	1cbb      	adds	r3, r7, #2
10001d3e:	1c02      	adds	r2, r0, #0
10001d40:	801a      	strh	r2, [r3, #0]
10001d42:	1c7b      	adds	r3, r7, #1
10001d44:	1c0a      	adds	r2, r1, #0
10001d46:	701a      	strb	r2, [r3, #0]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
10001d48:	1cbb      	adds	r3, r7, #2
10001d4a:	881b      	ldrh	r3, [r3, #0]
10001d4c:	2280      	movs	r2, #128	; 0x80
10001d4e:	00d2      	lsls	r2, r2, #3
10001d50:	4313      	orrs	r3, r2
10001d52:	b29b      	uxth	r3, r3
10001d54:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10001d56:	1c7b      	adds	r3, r7, #1
10001d58:	781b      	ldrb	r3, [r3, #0]
10001d5a:	2b01      	cmp	r3, #1
10001d5c:	d103      	bne.n	10001d66 <XMC_I2C_CH_MasterStart+0x36>
  {
    temp |= 0x1U;
10001d5e:	68fb      	ldr	r3, [r7, #12]
10001d60:	2201      	movs	r2, #1
10001d62:	4313      	orrs	r3, r2
10001d64:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001d66:	687a      	ldr	r2, [r7, #4]
10001d68:	2384      	movs	r3, #132	; 0x84
10001d6a:	005b      	lsls	r3, r3, #1
10001d6c:	58d2      	ldr	r2, [r2, r3]
10001d6e:	23e0      	movs	r3, #224	; 0xe0
10001d70:	04db      	lsls	r3, r3, #19
10001d72:	4013      	ands	r3, r2
10001d74:	d113      	bne.n	10001d9e <XMC_I2C_CH_MasterStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001d76:	46c0      	nop			; (mov r8, r8)
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	1c18      	adds	r0, r3, #0
10001d7c:	f7ff ff1e 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001d80:	1e03      	subs	r3, r0, #0
10001d82:	2b80      	cmp	r3, #128	; 0x80
10001d84:	d0f8      	beq.n	10001d78 <XMC_I2C_CH_MasterStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001d86:	687a      	ldr	r2, [r7, #4]
10001d88:	2380      	movs	r3, #128	; 0x80
10001d8a:	019b      	lsls	r3, r3, #6
10001d8c:	1c10      	adds	r0, r2, #0
10001d8e:	1c19      	adds	r1, r3, #0
10001d90:	f7ff ff22 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
10001d94:	687b      	ldr	r3, [r7, #4]
10001d96:	2180      	movs	r1, #128	; 0x80
10001d98:	68fa      	ldr	r2, [r7, #12]
10001d9a:	505a      	str	r2, [r3, r1]
10001d9c:	e004      	b.n	10001da8 <XMC_I2C_CH_MasterStart+0x78>
  }
  else
  {
    channel->IN[0U] = temp;
10001d9e:	687a      	ldr	r2, [r7, #4]
10001da0:	23c0      	movs	r3, #192	; 0xc0
10001da2:	005b      	lsls	r3, r3, #1
10001da4:	68f9      	ldr	r1, [r7, #12]
10001da6:	50d1      	str	r1, [r2, r3]
  }
}
10001da8:	46bd      	mov	sp, r7
10001daa:	b004      	add	sp, #16
10001dac:	bd80      	pop	{r7, pc}
10001dae:	46c0      	nop			; (mov r8, r8)

10001db0 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001db0:	b580      	push	{r7, lr}
10001db2:	b084      	sub	sp, #16
10001db4:	af00      	add	r7, sp, #0
10001db6:	6078      	str	r0, [r7, #4]
10001db8:	1c08      	adds	r0, r1, #0
10001dba:	1c11      	adds	r1, r2, #0
10001dbc:	1cbb      	adds	r3, r7, #2
10001dbe:	1c02      	adds	r2, r0, #0
10001dc0:	801a      	strh	r2, [r3, #0]
10001dc2:	1c7b      	adds	r3, r7, #1
10001dc4:	1c0a      	adds	r2, r1, #0
10001dc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
10001dc8:	1cbb      	adds	r3, r7, #2
10001dca:	881b      	ldrh	r3, [r3, #0]
10001dcc:	22a0      	movs	r2, #160	; 0xa0
10001dce:	00d2      	lsls	r2, r2, #3
10001dd0:	4313      	orrs	r3, r2
10001dd2:	b29b      	uxth	r3, r3
10001dd4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10001dd6:	1c7b      	adds	r3, r7, #1
10001dd8:	781b      	ldrb	r3, [r3, #0]
10001dda:	2b01      	cmp	r3, #1
10001ddc:	d103      	bne.n	10001de6 <XMC_I2C_CH_MasterRepeatedStart+0x36>
  {
    tmp |= 0x1U;
10001dde:	68fb      	ldr	r3, [r7, #12]
10001de0:	2201      	movs	r2, #1
10001de2:	4313      	orrs	r3, r2
10001de4:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001de6:	687a      	ldr	r2, [r7, #4]
10001de8:	2384      	movs	r3, #132	; 0x84
10001dea:	005b      	lsls	r3, r3, #1
10001dec:	58d2      	ldr	r2, [r2, r3]
10001dee:	23e0      	movs	r3, #224	; 0xe0
10001df0:	04db      	lsls	r3, r3, #19
10001df2:	4013      	ands	r3, r2
10001df4:	d113      	bne.n	10001e1e <XMC_I2C_CH_MasterRepeatedStart+0x6e>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001df6:	46c0      	nop			; (mov r8, r8)
10001df8:	687b      	ldr	r3, [r7, #4]
10001dfa:	1c18      	adds	r0, r3, #0
10001dfc:	f7ff fede 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001e00:	1e03      	subs	r3, r0, #0
10001e02:	2b80      	cmp	r3, #128	; 0x80
10001e04:	d0f8      	beq.n	10001df8 <XMC_I2C_CH_MasterRepeatedStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001e06:	687a      	ldr	r2, [r7, #4]
10001e08:	2380      	movs	r3, #128	; 0x80
10001e0a:	019b      	lsls	r3, r3, #6
10001e0c:	1c10      	adds	r0, r2, #0
10001e0e:	1c19      	adds	r1, r3, #0
10001e10:	f7ff fee2 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
10001e14:	687b      	ldr	r3, [r7, #4]
10001e16:	2180      	movs	r1, #128	; 0x80
10001e18:	68fa      	ldr	r2, [r7, #12]
10001e1a:	505a      	str	r2, [r3, r1]
10001e1c:	e004      	b.n	10001e28 <XMC_I2C_CH_MasterRepeatedStart+0x78>
  }
  else
  {
    channel->IN[0U] = tmp;
10001e1e:	687a      	ldr	r2, [r7, #4]
10001e20:	23c0      	movs	r3, #192	; 0xc0
10001e22:	005b      	lsls	r3, r3, #1
10001e24:	68f9      	ldr	r1, [r7, #12]
10001e26:	50d1      	str	r1, [r2, r3]
  }
}
10001e28:	46bd      	mov	sp, r7
10001e2a:	b004      	add	sp, #16
10001e2c:	bd80      	pop	{r7, pc}
10001e2e:	46c0      	nop			; (mov r8, r8)

10001e30 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
10001e30:	b580      	push	{r7, lr}
10001e32:	b082      	sub	sp, #8
10001e34:	af00      	add	r7, sp, #0
10001e36:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001e38:	687a      	ldr	r2, [r7, #4]
10001e3a:	2384      	movs	r3, #132	; 0x84
10001e3c:	005b      	lsls	r3, r3, #1
10001e3e:	58d2      	ldr	r2, [r2, r3]
10001e40:	23e0      	movs	r3, #224	; 0xe0
10001e42:	04db      	lsls	r3, r3, #19
10001e44:	4013      	ands	r3, r2
10001e46:	d114      	bne.n	10001e72 <XMC_I2C_CH_MasterStop+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001e48:	46c0      	nop			; (mov r8, r8)
10001e4a:	687b      	ldr	r3, [r7, #4]
10001e4c:	1c18      	adds	r0, r3, #0
10001e4e:	f7ff feb5 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001e52:	1e03      	subs	r3, r0, #0
10001e54:	2b80      	cmp	r3, #128	; 0x80
10001e56:	d0f8      	beq.n	10001e4a <XMC_I2C_CH_MasterStop+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001e58:	687a      	ldr	r2, [r7, #4]
10001e5a:	2380      	movs	r3, #128	; 0x80
10001e5c:	019b      	lsls	r3, r3, #6
10001e5e:	1c10      	adds	r0, r2, #0
10001e60:	1c19      	adds	r1, r3, #0
10001e62:	f7ff feb9 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	2180      	movs	r1, #128	; 0x80
10001e6a:	22c0      	movs	r2, #192	; 0xc0
10001e6c:	00d2      	lsls	r2, r2, #3
10001e6e:	505a      	str	r2, [r3, r1]
10001e70:	e005      	b.n	10001e7e <XMC_I2C_CH_MasterStop+0x4e>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10001e72:	687a      	ldr	r2, [r7, #4]
10001e74:	23c0      	movs	r3, #192	; 0xc0
10001e76:	005b      	lsls	r3, r3, #1
10001e78:	21c0      	movs	r1, #192	; 0xc0
10001e7a:	00c9      	lsls	r1, r1, #3
10001e7c:	50d1      	str	r1, [r2, r3]
  }
}
10001e7e:	46bd      	mov	sp, r7
10001e80:	b002      	add	sp, #8
10001e82:	bd80      	pop	{r7, pc}

10001e84 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
10001e84:	b580      	push	{r7, lr}
10001e86:	b082      	sub	sp, #8
10001e88:	af00      	add	r7, sp, #0
10001e8a:	6078      	str	r0, [r7, #4]
10001e8c:	1c0a      	adds	r2, r1, #0
10001e8e:	1cfb      	adds	r3, r7, #3
10001e90:	701a      	strb	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001e92:	687a      	ldr	r2, [r7, #4]
10001e94:	2384      	movs	r3, #132	; 0x84
10001e96:	005b      	lsls	r3, r3, #1
10001e98:	58d2      	ldr	r2, [r2, r3]
10001e9a:	23e0      	movs	r3, #224	; 0xe0
10001e9c:	04db      	lsls	r3, r3, #19
10001e9e:	4013      	ands	r3, r2
10001ea0:	d114      	bne.n	10001ecc <XMC_I2C_CH_MasterTransmit+0x48>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001ea2:	46c0      	nop			; (mov r8, r8)
10001ea4:	687b      	ldr	r3, [r7, #4]
10001ea6:	1c18      	adds	r0, r3, #0
10001ea8:	f7ff fe88 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001eac:	1e03      	subs	r3, r0, #0
10001eae:	2b80      	cmp	r3, #128	; 0x80
10001eb0:	d0f8      	beq.n	10001ea4 <XMC_I2C_CH_MasterTransmit+0x20>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001eb2:	687a      	ldr	r2, [r7, #4]
10001eb4:	2380      	movs	r3, #128	; 0x80
10001eb6:	019b      	lsls	r3, r3, #6
10001eb8:	1c10      	adds	r0, r2, #0
10001eba:	1c19      	adds	r1, r3, #0
10001ebc:	f7ff fe8c 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001ec0:	1cfb      	adds	r3, r7, #3
10001ec2:	781a      	ldrb	r2, [r3, #0]
10001ec4:	687b      	ldr	r3, [r7, #4]
10001ec6:	2180      	movs	r1, #128	; 0x80
10001ec8:	505a      	str	r2, [r3, r1]
10001eca:	e005      	b.n	10001ed8 <XMC_I2C_CH_MasterTransmit+0x54>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10001ecc:	1cfb      	adds	r3, r7, #3
10001ece:	7819      	ldrb	r1, [r3, #0]
10001ed0:	687a      	ldr	r2, [r7, #4]
10001ed2:	23c0      	movs	r3, #192	; 0xc0
10001ed4:	005b      	lsls	r3, r3, #1
10001ed6:	50d1      	str	r1, [r2, r3]
  }
}
10001ed8:	46bd      	mov	sp, r7
10001eda:	b002      	add	sp, #8
10001edc:	bd80      	pop	{r7, pc}
10001ede:	46c0      	nop			; (mov r8, r8)

10001ee0 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
10001ee0:	b580      	push	{r7, lr}
10001ee2:	b082      	sub	sp, #8
10001ee4:	af00      	add	r7, sp, #0
10001ee6:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001ee8:	687a      	ldr	r2, [r7, #4]
10001eea:	2384      	movs	r3, #132	; 0x84
10001eec:	005b      	lsls	r3, r3, #1
10001eee:	58d2      	ldr	r2, [r2, r3]
10001ef0:	23e0      	movs	r3, #224	; 0xe0
10001ef2:	04db      	lsls	r3, r3, #19
10001ef4:	4013      	ands	r3, r2
10001ef6:	d114      	bne.n	10001f22 <XMC_I2C_CH_MasterReceiveAck+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001ef8:	46c0      	nop			; (mov r8, r8)
10001efa:	687b      	ldr	r3, [r7, #4]
10001efc:	1c18      	adds	r0, r3, #0
10001efe:	f7ff fe5d 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001f02:	1e03      	subs	r3, r0, #0
10001f04:	2b80      	cmp	r3, #128	; 0x80
10001f06:	d0f8      	beq.n	10001efa <XMC_I2C_CH_MasterReceiveAck+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001f08:	687a      	ldr	r2, [r7, #4]
10001f0a:	2380      	movs	r3, #128	; 0x80
10001f0c:	019b      	lsls	r3, r3, #6
10001f0e:	1c10      	adds	r0, r2, #0
10001f10:	1c19      	adds	r1, r3, #0
10001f12:	f7ff fe61 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001f16:	687b      	ldr	r3, [r7, #4]
10001f18:	2180      	movs	r1, #128	; 0x80
10001f1a:	2280      	movs	r2, #128	; 0x80
10001f1c:	0092      	lsls	r2, r2, #2
10001f1e:	505a      	str	r2, [r3, r1]
10001f20:	e005      	b.n	10001f2e <XMC_I2C_CH_MasterReceiveAck+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10001f22:	687a      	ldr	r2, [r7, #4]
10001f24:	23c0      	movs	r3, #192	; 0xc0
10001f26:	005b      	lsls	r3, r3, #1
10001f28:	2180      	movs	r1, #128	; 0x80
10001f2a:	0089      	lsls	r1, r1, #2
10001f2c:	50d1      	str	r1, [r2, r3]
  }
}
10001f2e:	46bd      	mov	sp, r7
10001f30:	b002      	add	sp, #8
10001f32:	bd80      	pop	{r7, pc}

10001f34 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
10001f34:	b580      	push	{r7, lr}
10001f36:	b082      	sub	sp, #8
10001f38:	af00      	add	r7, sp, #0
10001f3a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001f3c:	687a      	ldr	r2, [r7, #4]
10001f3e:	2384      	movs	r3, #132	; 0x84
10001f40:	005b      	lsls	r3, r3, #1
10001f42:	58d2      	ldr	r2, [r2, r3]
10001f44:	23e0      	movs	r3, #224	; 0xe0
10001f46:	04db      	lsls	r3, r3, #19
10001f48:	4013      	ands	r3, r2
10001f4a:	d114      	bne.n	10001f76 <XMC_I2C_CH_MasterReceiveNack+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001f4c:	46c0      	nop			; (mov r8, r8)
10001f4e:	687b      	ldr	r3, [r7, #4]
10001f50:	1c18      	adds	r0, r3, #0
10001f52:	f7ff fe33 	bl	10001bbc <XMC_USIC_CH_GetTransmitBufferStatus>
10001f56:	1e03      	subs	r3, r0, #0
10001f58:	2b80      	cmp	r3, #128	; 0x80
10001f5a:	d0f8      	beq.n	10001f4e <XMC_I2C_CH_MasterReceiveNack+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001f5c:	687a      	ldr	r2, [r7, #4]
10001f5e:	2380      	movs	r3, #128	; 0x80
10001f60:	019b      	lsls	r3, r3, #6
10001f62:	1c10      	adds	r0, r2, #0
10001f64:	1c19      	adds	r1, r3, #0
10001f66:	f7ff fe37 	bl	10001bd8 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001f6a:	687b      	ldr	r3, [r7, #4]
10001f6c:	2180      	movs	r1, #128	; 0x80
10001f6e:	22c0      	movs	r2, #192	; 0xc0
10001f70:	0092      	lsls	r2, r2, #2
10001f72:	505a      	str	r2, [r3, r1]
10001f74:	e005      	b.n	10001f82 <XMC_I2C_CH_MasterReceiveNack+0x4e>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10001f76:	687a      	ldr	r2, [r7, #4]
10001f78:	23c0      	movs	r3, #192	; 0xc0
10001f7a:	005b      	lsls	r3, r3, #1
10001f7c:	21c0      	movs	r1, #192	; 0xc0
10001f7e:	0089      	lsls	r1, r1, #2
10001f80:	50d1      	str	r1, [r2, r3]
  }
}
10001f82:	46bd      	mov	sp, r7
10001f84:	b002      	add	sp, #8
10001f86:	bd80      	pop	{r7, pc}

10001f88 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
10001f88:	b580      	push	{r7, lr}
10001f8a:	b084      	sub	sp, #16
10001f8c:	af00      	add	r7, sp, #0
10001f8e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10001f90:	687a      	ldr	r2, [r7, #4]
10001f92:	2386      	movs	r3, #134	; 0x86
10001f94:	005b      	lsls	r3, r3, #1
10001f96:	58d2      	ldr	r2, [r2, r3]
10001f98:	23e0      	movs	r3, #224	; 0xe0
10001f9a:	04db      	lsls	r3, r3, #19
10001f9c:	4013      	ands	r3, r2
10001f9e:	d105      	bne.n	10001fac <XMC_I2C_CH_GetReceivedData+0x24>
  {
    retval = (uint8_t)channel->RBUF;
10001fa0:	687b      	ldr	r3, [r7, #4]
10001fa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001fa4:	230f      	movs	r3, #15
10001fa6:	18fb      	adds	r3, r7, r3
10001fa8:	701a      	strb	r2, [r3, #0]
10001faa:	e006      	b.n	10001fba <XMC_I2C_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
10001fac:	687a      	ldr	r2, [r7, #4]
10001fae:	238e      	movs	r3, #142	; 0x8e
10001fb0:	005b      	lsls	r3, r3, #1
10001fb2:	58d2      	ldr	r2, [r2, r3]
10001fb4:	230f      	movs	r3, #15
10001fb6:	18fb      	adds	r3, r7, r3
10001fb8:	701a      	strb	r2, [r3, #0]
  }

  return retval;
10001fba:	230f      	movs	r3, #15
10001fbc:	18fb      	adds	r3, r7, r3
10001fbe:	781b      	ldrb	r3, [r3, #0]
}
10001fc0:	1c18      	adds	r0, r3, #0
10001fc2:	46bd      	mov	sp, r7
10001fc4:	b004      	add	sp, #16
10001fc6:	bd80      	pop	{r7, pc}

10001fc8 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10001fc8:	b580      	push	{r7, lr}
10001fca:	b082      	sub	sp, #8
10001fcc:	af00      	add	r7, sp, #0
10001fce:	6078      	str	r0, [r7, #4]
10001fd0:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
10001fd2:	687b      	ldr	r3, [r7, #4]
10001fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10001fd6:	6839      	ldr	r1, [r7, #0]
10001fd8:	23fe      	movs	r3, #254	; 0xfe
10001fda:	025b      	lsls	r3, r3, #9
10001fdc:	400b      	ands	r3, r1
10001fde:	431a      	orrs	r2, r3
10001fe0:	687b      	ldr	r3, [r7, #4]
10001fe2:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10001fe8:	683b      	ldr	r3, [r7, #0]
10001fea:	4904      	ldr	r1, [pc, #16]	; (10001ffc <XMC_I2C_CH_EnableEvent+0x34>)
10001fec:	400b      	ands	r3, r1
10001fee:	431a      	orrs	r2, r3
10001ff0:	687b      	ldr	r3, [r7, #4]
10001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
}
10001ff4:	46bd      	mov	sp, r7
10001ff6:	b002      	add	sp, #8
10001ff8:	bd80      	pop	{r7, pc}
10001ffa:	46c0      	nop			; (mov r8, r8)
10001ffc:	41fc0000 	.word	0x41fc0000

10002000 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002000:	b580      	push	{r7, lr}
10002002:	b082      	sub	sp, #8
10002004:	af00      	add	r7, sp, #0
10002006:	6078      	str	r0, [r7, #4]
10002008:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
1000200a:	687b      	ldr	r3, [r7, #4]
1000200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000200e:	6839      	ldr	r1, [r7, #0]
10002010:	22fe      	movs	r2, #254	; 0xfe
10002012:	0252      	lsls	r2, r2, #9
10002014:	400a      	ands	r2, r1
10002016:	43d2      	mvns	r2, r2
10002018:	401a      	ands	r2, r3
1000201a:	687b      	ldr	r3, [r7, #4]
1000201c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
1000201e:	687b      	ldr	r3, [r7, #4]
10002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002022:	683a      	ldr	r2, [r7, #0]
10002024:	4904      	ldr	r1, [pc, #16]	; (10002038 <XMC_I2C_CH_DisableEvent+0x38>)
10002026:	400a      	ands	r2, r1
10002028:	43d2      	mvns	r2, r2
1000202a:	401a      	ands	r2, r3
1000202c:	687b      	ldr	r3, [r7, #4]
1000202e:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002030:	46bd      	mov	sp, r7
10002032:	b002      	add	sp, #8
10002034:	bd80      	pop	{r7, pc}
10002036:	46c0      	nop			; (mov r8, r8)
10002038:	41fc0000 	.word	0x41fc0000

1000203c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000203c:	b580      	push	{r7, lr}
1000203e:	b082      	sub	sp, #8
10002040:	af00      	add	r7, sp, #0
10002042:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10002044:	687a      	ldr	r2, [r7, #4]
10002046:	2390      	movs	r3, #144	; 0x90
10002048:	05db      	lsls	r3, r3, #23
1000204a:	429a      	cmp	r2, r3
1000204c:	d003      	beq.n	10002056 <XMC_USIC_CH_Enable+0x1a>
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	4a0c      	ldr	r2, [pc, #48]	; (10002084 <XMC_USIC_CH_Enable+0x48>)
10002052:	4293      	cmp	r3, r2
10002054:	d103      	bne.n	1000205e <XMC_USIC_CH_Enable+0x22>
  {
    XMC_USIC_Enable(XMC_USIC0);
10002056:	4b0c      	ldr	r3, [pc, #48]	; (10002088 <XMC_USIC_CH_Enable+0x4c>)
10002058:	1c18      	adds	r0, r3, #0
1000205a:	f000 f983 	bl	10002364 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
1000205e:	687b      	ldr	r3, [r7, #4]
10002060:	2203      	movs	r2, #3
10002062:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10002064:	46c0      	nop			; (mov r8, r8)
10002066:	687b      	ldr	r3, [r7, #4]
10002068:	68db      	ldr	r3, [r3, #12]
1000206a:	2201      	movs	r2, #1
1000206c:	4013      	ands	r3, r2
1000206e:	d0fa      	beq.n	10002066 <XMC_USIC_CH_Enable+0x2a>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10002070:	687b      	ldr	r3, [r7, #4]
10002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002074:	220f      	movs	r2, #15
10002076:	4393      	bics	r3, r2
10002078:	1c1a      	adds	r2, r3, #0
1000207a:	687b      	ldr	r3, [r7, #4]
1000207c:	641a      	str	r2, [r3, #64]	; 0x40
}
1000207e:	46bd      	mov	sp, r7
10002080:	b002      	add	sp, #8
10002082:	bd80      	pop	{r7, pc}
10002084:	48000200 	.word	0x48000200
10002088:	48000008 	.word	0x48000008

1000208c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000208c:	b580      	push	{r7, lr}
1000208e:	b08e      	sub	sp, #56	; 0x38
10002090:	af00      	add	r7, sp, #0
10002092:	60f8      	str	r0, [r7, #12]
10002094:	60b9      	str	r1, [r7, #8]
10002096:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10002098:	68bb      	ldr	r3, [r7, #8]
1000209a:	2b63      	cmp	r3, #99	; 0x63
1000209c:	d95c      	bls.n	10002158 <XMC_USIC_CH_SetBaudrate+0xcc>
1000209e:	687b      	ldr	r3, [r7, #4]
100020a0:	2b00      	cmp	r3, #0
100020a2:	d059      	beq.n	10002158 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
100020a4:	f7ff f9f4 	bl	10001490 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100020a8:	1c03      	adds	r3, r0, #0
100020aa:	1c18      	adds	r0, r3, #0
100020ac:	2164      	movs	r1, #100	; 0x64
100020ae:	f003 fb51 	bl	10005754 <__aeabi_uidiv>
100020b2:	1c03      	adds	r3, r0, #0
100020b4:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
100020b6:	68bb      	ldr	r3, [r7, #8]
100020b8:	1c18      	adds	r0, r3, #0
100020ba:	2164      	movs	r1, #100	; 0x64
100020bc:	f003 fb4a 	bl	10005754 <__aeabi_uidiv>
100020c0:	1c03      	adds	r3, r0, #0
100020c2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
100020c4:	2301      	movs	r3, #1
100020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
100020c8:	2301      	movs	r3, #1
100020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
100020cc:	4b28      	ldr	r3, [pc, #160]	; (10002170 <XMC_USIC_CH_SetBaudrate+0xe4>)
100020ce:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100020d0:	4b27      	ldr	r3, [pc, #156]	; (10002170 <XMC_USIC_CH_SetBaudrate+0xe4>)
100020d2:	633b      	str	r3, [r7, #48]	; 0x30
100020d4:	e024      	b.n	10002120 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
100020d6:	6a3b      	ldr	r3, [r7, #32]
100020d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100020da:	435a      	muls	r2, r3
100020dc:	1c11      	adds	r1, r2, #0
100020de:	68bb      	ldr	r3, [r7, #8]
100020e0:	687a      	ldr	r2, [r7, #4]
100020e2:	4353      	muls	r3, r2
100020e4:	1c08      	adds	r0, r1, #0
100020e6:	1c19      	adds	r1, r3, #0
100020e8:	f003 fb34 	bl	10005754 <__aeabi_uidiv>
100020ec:	1c03      	adds	r3, r0, #0
100020ee:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
100020f0:	69fb      	ldr	r3, [r7, #28]
100020f2:	0a9b      	lsrs	r3, r3, #10
100020f4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
100020f6:	69fb      	ldr	r3, [r7, #28]
100020f8:	059b      	lsls	r3, r3, #22
100020fa:	0d9b      	lsrs	r3, r3, #22
100020fc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100020fe:	69bb      	ldr	r3, [r7, #24]
10002100:	4a1b      	ldr	r2, [pc, #108]	; (10002170 <XMC_USIC_CH_SetBaudrate+0xe4>)
10002102:	4293      	cmp	r3, r2
10002104:	d809      	bhi.n	1000211a <XMC_USIC_CH_SetBaudrate+0x8e>
10002106:	697a      	ldr	r2, [r7, #20]
10002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000210a:	429a      	cmp	r2, r3
1000210c:	d205      	bcs.n	1000211a <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
1000210e:	697b      	ldr	r3, [r7, #20]
10002110:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10002112:	69bb      	ldr	r3, [r7, #24]
10002114:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002118:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000211c:	3b01      	subs	r3, #1
1000211e:	633b      	str	r3, [r7, #48]	; 0x30
10002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002122:	2b00      	cmp	r3, #0
10002124:	d1d7      	bne.n	100020d6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002128:	2280      	movs	r2, #128	; 0x80
1000212a:	0212      	lsls	r2, r2, #8
1000212c:	431a      	orrs	r2, r3
1000212e:	68fb      	ldr	r3, [r7, #12]
10002130:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002132:	68fb      	ldr	r3, [r7, #12]
10002134:	695b      	ldr	r3, [r3, #20]
10002136:	4a0f      	ldr	r2, [pc, #60]	; (10002174 <XMC_USIC_CH_SetBaudrate+0xe8>)
10002138:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000213a:	687b      	ldr	r3, [r7, #4]
1000213c:	3b01      	subs	r3, #1
1000213e:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10002140:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002144:	3b01      	subs	r3, #1
10002146:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002148:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000214a:	68fb      	ldr	r3, [r7, #12]
1000214c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
1000214e:	2337      	movs	r3, #55	; 0x37
10002150:	18fb      	adds	r3, r7, r3
10002152:	2200      	movs	r2, #0
10002154:	701a      	strb	r2, [r3, #0]
10002156:	e003      	b.n	10002160 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002158:	2337      	movs	r3, #55	; 0x37
1000215a:	18fb      	adds	r3, r7, r3
1000215c:	2201      	movs	r2, #1
1000215e:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10002160:	2337      	movs	r3, #55	; 0x37
10002162:	18fb      	adds	r3, r7, r3
10002164:	781b      	ldrb	r3, [r3, #0]
}
10002166:	1c18      	adds	r0, r3, #0
10002168:	46bd      	mov	sp, r7
1000216a:	b00e      	add	sp, #56	; 0x38
1000216c:	bd80      	pop	{r7, pc}
1000216e:	46c0      	nop			; (mov r8, r8)
10002170:	000003ff 	.word	0x000003ff
10002174:	fc0080ef 	.word	0xfc0080ef

10002178 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10002178:	b580      	push	{r7, lr}
1000217a:	b084      	sub	sp, #16
1000217c:	af00      	add	r7, sp, #0
1000217e:	60f8      	str	r0, [r7, #12]
10002180:	60b9      	str	r1, [r7, #8]
10002182:	603b      	str	r3, [r7, #0]
10002184:	1dfb      	adds	r3, r7, #7
10002186:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10002188:	68fa      	ldr	r2, [r7, #12]
1000218a:	2384      	movs	r3, #132	; 0x84
1000218c:	005b      	lsls	r3, r3, #1
1000218e:	58d3      	ldr	r3, [r2, r3]
10002190:	4a0e      	ldr	r2, [pc, #56]	; (100021cc <XMC_USIC_CH_TXFIFO_Configure+0x54>)
10002192:	4013      	ands	r3, r2
10002194:	1c19      	adds	r1, r3, #0
10002196:	68fa      	ldr	r2, [r7, #12]
10002198:	2384      	movs	r3, #132	; 0x84
1000219a:	005b      	lsls	r3, r3, #1
1000219c:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000219e:	68fa      	ldr	r2, [r7, #12]
100021a0:	2384      	movs	r3, #132	; 0x84
100021a2:	005b      	lsls	r3, r3, #1
100021a4:	58d3      	ldr	r3, [r2, r3]
100021a6:	4a0a      	ldr	r2, [pc, #40]	; (100021d0 <XMC_USIC_CH_TXFIFO_Configure+0x58>)
100021a8:	401a      	ands	r2, r3
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100021aa:	683b      	ldr	r3, [r7, #0]
100021ac:	0219      	lsls	r1, r3, #8
100021ae:	68bb      	ldr	r3, [r7, #8]
100021b0:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
100021b2:	1dfb      	adds	r3, r7, #7
100021b4:	781b      	ldrb	r3, [r3, #0]
100021b6:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100021b8:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
100021ba:	431a      	orrs	r2, r3
100021bc:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100021be:	68fa      	ldr	r2, [r7, #12]
100021c0:	2384      	movs	r3, #132	; 0x84
100021c2:	005b      	lsls	r3, r3, #1
100021c4:	50d1      	str	r1, [r2, r3]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
100021c6:	46bd      	mov	sp, r7
100021c8:	b004      	add	sp, #16
100021ca:	bd80      	pop	{r7, pc}
100021cc:	f8ffffff 	.word	0xf8ffffff
100021d0:	f8ffc0c0 	.word	0xf8ffc0c0

100021d4 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100021d4:	b580      	push	{r7, lr}
100021d6:	b084      	sub	sp, #16
100021d8:	af00      	add	r7, sp, #0
100021da:	60f8      	str	r0, [r7, #12]
100021dc:	60b9      	str	r1, [r7, #8]
100021de:	603b      	str	r3, [r7, #0]
100021e0:	1dfb      	adds	r3, r7, #7
100021e2:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
100021e4:	68fa      	ldr	r2, [r7, #12]
100021e6:	2386      	movs	r3, #134	; 0x86
100021e8:	005b      	lsls	r3, r3, #1
100021ea:	58d3      	ldr	r3, [r2, r3]
100021ec:	4a10      	ldr	r2, [pc, #64]	; (10002230 <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
100021ee:	4013      	ands	r3, r2
100021f0:	1c19      	adds	r1, r3, #0
100021f2:	68fa      	ldr	r2, [r7, #12]
100021f4:	2386      	movs	r3, #134	; 0x86
100021f6:	005b      	lsls	r3, r3, #1
100021f8:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100021fa:	68fa      	ldr	r2, [r7, #12]
100021fc:	2386      	movs	r3, #134	; 0x86
100021fe:	005b      	lsls	r3, r3, #1
10002200:	58d3      	ldr	r3, [r2, r3]
10002202:	4a0c      	ldr	r2, [pc, #48]	; (10002234 <XMC_USIC_CH_RXFIFO_Configure+0x60>)
10002204:	401a      	ands	r2, r3
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10002206:	683b      	ldr	r3, [r7, #0]
10002208:	0219      	lsls	r1, r3, #8
1000220a:	68bb      	ldr	r3, [r7, #8]
1000220c:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000220e:	1dfb      	adds	r3, r7, #7
10002210:	781b      	ldrb	r3, [r3, #0]
10002212:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
10002214:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10002216:	4313      	orrs	r3, r2
10002218:	2280      	movs	r2, #128	; 0x80
1000221a:	0552      	lsls	r2, r2, #21
1000221c:	431a      	orrs	r2, r3
1000221e:	1c11      	adds	r1, r2, #0
10002220:	68fa      	ldr	r2, [r7, #12]
10002222:	2386      	movs	r3, #134	; 0x86
10002224:	005b      	lsls	r3, r3, #1
10002226:	50d1      	str	r1, [r2, r3]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10002228:	46bd      	mov	sp, r7
1000222a:	b004      	add	sp, #16
1000222c:	bd80      	pop	{r7, pc}
1000222e:	46c0      	nop			; (mov r8, r8)
10002230:	f8ffffff 	.word	0xf8ffffff
10002234:	efffc0c0 	.word	0xefffc0c0

10002238 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
10002238:	b580      	push	{r7, lr}
1000223a:	b084      	sub	sp, #16
1000223c:	af00      	add	r7, sp, #0
1000223e:	60f8      	str	r0, [r7, #12]
10002240:	607a      	str	r2, [r7, #4]
10002242:	230b      	movs	r3, #11
10002244:	18fb      	adds	r3, r7, r3
10002246:	1c0a      	adds	r2, r1, #0
10002248:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000224a:	68fa      	ldr	r2, [r7, #12]
1000224c:	2386      	movs	r3, #134	; 0x86
1000224e:	005b      	lsls	r3, r3, #1
10002250:	58d3      	ldr	r3, [r2, r3]
10002252:	4a0e      	ldr	r2, [pc, #56]	; (1000228c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x54>)
10002254:	4013      	ands	r3, r2
10002256:	1c19      	adds	r1, r3, #0
10002258:	68fa      	ldr	r2, [r7, #12]
1000225a:	2386      	movs	r3, #134	; 0x86
1000225c:	005b      	lsls	r3, r3, #1
1000225e:	50d1      	str	r1, [r2, r3]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002260:	68fa      	ldr	r2, [r7, #12]
10002262:	2386      	movs	r3, #134	; 0x86
10002264:	005b      	lsls	r3, r3, #1
10002266:	58d3      	ldr	r3, [r2, r3]
10002268:	4a09      	ldr	r2, [pc, #36]	; (10002290 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x58>)
1000226a:	401a      	ands	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
1000226c:	687b      	ldr	r3, [r7, #4]
1000226e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002270:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
10002272:	230b      	movs	r3, #11
10002274:	18fb      	adds	r3, r7, r3
10002276:	781b      	ldrb	r3, [r3, #0]
10002278:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
1000227a:	431a      	orrs	r2, r3
1000227c:	1c11      	adds	r1, r2, #0
1000227e:	68fa      	ldr	r2, [r7, #12]
10002280:	2386      	movs	r3, #134	; 0x86
10002282:	005b      	lsls	r3, r3, #1
10002284:	50d1      	str	r1, [r2, r3]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
10002286:	46bd      	mov	sp, r7
10002288:	b004      	add	sp, #16
1000228a:	bd80      	pop	{r7, pc}
1000228c:	f8ffffff 	.word	0xf8ffffff
10002290:	ffffc0ff 	.word	0xffffc0ff

10002294 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10002294:	b580      	push	{r7, lr}
10002296:	b084      	sub	sp, #16
10002298:	af00      	add	r7, sp, #0
1000229a:	60f8      	str	r0, [r7, #12]
1000229c:	607a      	str	r2, [r7, #4]
1000229e:	230b      	movs	r3, #11
100022a0:	18fb      	adds	r3, r7, r3
100022a2:	1c0a      	adds	r2, r1, #0
100022a4:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022a6:	68fb      	ldr	r3, [r7, #12]
100022a8:	699b      	ldr	r3, [r3, #24]
100022aa:	220b      	movs	r2, #11
100022ac:	18ba      	adds	r2, r7, r2
100022ae:	7812      	ldrb	r2, [r2, #0]
100022b0:	2107      	movs	r1, #7
100022b2:	4091      	lsls	r1, r2
100022b4:	1c0a      	adds	r2, r1, #0
100022b6:	43d2      	mvns	r2, r2
100022b8:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
100022ba:	230b      	movs	r3, #11
100022bc:	18fb      	adds	r3, r7, r3
100022be:	781b      	ldrb	r3, [r3, #0]
100022c0:	6879      	ldr	r1, [r7, #4]
100022c2:	4099      	lsls	r1, r3
100022c4:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022c6:	431a      	orrs	r2, r3
100022c8:	68fb      	ldr	r3, [r7, #12]
100022ca:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
100022cc:	46bd      	mov	sp, r7
100022ce:	b004      	add	sp, #16
100022d0:	bd80      	pop	{r7, pc}
100022d2:	46c0      	nop			; (mov r8, r8)

100022d4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
100022d4:	b580      	push	{r7, lr}
100022d6:	b084      	sub	sp, #16
100022d8:	af00      	add	r7, sp, #0
100022da:	60f8      	str	r0, [r7, #12]
100022dc:	607a      	str	r2, [r7, #4]
100022de:	230b      	movs	r3, #11
100022e0:	18fb      	adds	r3, r7, r3
100022e2:	1c0a      	adds	r2, r1, #0
100022e4:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100022e6:	68fa      	ldr	r2, [r7, #12]
100022e8:	2384      	movs	r3, #132	; 0x84
100022ea:	005b      	lsls	r3, r3, #1
100022ec:	58d3      	ldr	r3, [r2, r3]
100022ee:	220b      	movs	r2, #11
100022f0:	18ba      	adds	r2, r7, r2
100022f2:	7812      	ldrb	r2, [r2, #0]
100022f4:	2107      	movs	r1, #7
100022f6:	4091      	lsls	r1, r2
100022f8:	1c0a      	adds	r2, r1, #0
100022fa:	43d2      	mvns	r2, r2
100022fc:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
100022fe:	230b      	movs	r3, #11
10002300:	18fb      	adds	r3, r7, r3
10002302:	781b      	ldrb	r3, [r3, #0]
10002304:	6879      	ldr	r1, [r7, #4]
10002306:	4099      	lsls	r1, r3
10002308:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000230a:	431a      	orrs	r2, r3
1000230c:	1c11      	adds	r1, r2, #0
1000230e:	68fa      	ldr	r2, [r7, #12]
10002310:	2384      	movs	r3, #132	; 0x84
10002312:	005b      	lsls	r3, r3, #1
10002314:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
10002316:	46bd      	mov	sp, r7
10002318:	b004      	add	sp, #16
1000231a:	bd80      	pop	{r7, pc}

1000231c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000231c:	b580      	push	{r7, lr}
1000231e:	b084      	sub	sp, #16
10002320:	af00      	add	r7, sp, #0
10002322:	60f8      	str	r0, [r7, #12]
10002324:	607a      	str	r2, [r7, #4]
10002326:	230b      	movs	r3, #11
10002328:	18fb      	adds	r3, r7, r3
1000232a:	1c0a      	adds	r2, r1, #0
1000232c:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000232e:	68fa      	ldr	r2, [r7, #12]
10002330:	2386      	movs	r3, #134	; 0x86
10002332:	005b      	lsls	r3, r3, #1
10002334:	58d3      	ldr	r3, [r2, r3]
10002336:	220b      	movs	r2, #11
10002338:	18ba      	adds	r2, r7, r2
1000233a:	7812      	ldrb	r2, [r2, #0]
1000233c:	2107      	movs	r1, #7
1000233e:	4091      	lsls	r1, r2
10002340:	1c0a      	adds	r2, r1, #0
10002342:	43d2      	mvns	r2, r2
10002344:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
10002346:	230b      	movs	r3, #11
10002348:	18fb      	adds	r3, r7, r3
1000234a:	781b      	ldrb	r3, [r3, #0]
1000234c:	6879      	ldr	r1, [r7, #4]
1000234e:	4099      	lsls	r1, r3
10002350:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002352:	431a      	orrs	r2, r3
10002354:	1c11      	adds	r1, r2, #0
10002356:	68fa      	ldr	r2, [r7, #12]
10002358:	2386      	movs	r3, #134	; 0x86
1000235a:	005b      	lsls	r3, r3, #1
1000235c:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
1000235e:	46bd      	mov	sp, r7
10002360:	b004      	add	sp, #16
10002362:	bd80      	pop	{r7, pc}

10002364 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10002364:	b580      	push	{r7, lr}
10002366:	b082      	sub	sp, #8
10002368:	af00      	add	r7, sp, #0
1000236a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
1000236c:	687b      	ldr	r3, [r7, #4]
1000236e:	4a04      	ldr	r2, [pc, #16]	; (10002380 <XMC_USIC_Enable+0x1c>)
10002370:	4293      	cmp	r3, r2
10002372:	d102      	bne.n	1000237a <XMC_USIC_Enable+0x16>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10002374:	2008      	movs	r0, #8
10002376:	f7fe ffc3 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
1000237a:	46bd      	mov	sp, r7
1000237c:	b002      	add	sp, #8
1000237e:	bd80      	pop	{r7, pc}
10002380:	48000008 	.word	0x48000008

10002384 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002384:	b580      	push	{r7, lr}
10002386:	af00      	add	r7, sp, #0
10002388:	46bd      	mov	sp, r7
1000238a:	bd80      	pop	{r7, pc}

1000238c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000238c:	b5b0      	push	{r4, r5, r7, lr}
1000238e:	b082      	sub	sp, #8
10002390:	af00      	add	r7, sp, #0
10002392:	1c02      	adds	r2, r0, #0
10002394:	6039      	str	r1, [r7, #0]
10002396:	1dfb      	adds	r3, r7, #7
10002398:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
1000239a:	1dfb      	adds	r3, r7, #7
1000239c:	781b      	ldrb	r3, [r3, #0]
1000239e:	2b7f      	cmp	r3, #127	; 0x7f
100023a0:	d92f      	bls.n	10002402 <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023a2:	4c2d      	ldr	r4, [pc, #180]	; (10002458 <NVIC_SetPriority+0xcc>)
100023a4:	1dfb      	adds	r3, r7, #7
100023a6:	781b      	ldrb	r3, [r3, #0]
100023a8:	1c1a      	adds	r2, r3, #0
100023aa:	230f      	movs	r3, #15
100023ac:	4013      	ands	r3, r2
100023ae:	3b08      	subs	r3, #8
100023b0:	0899      	lsrs	r1, r3, #2
100023b2:	4a29      	ldr	r2, [pc, #164]	; (10002458 <NVIC_SetPriority+0xcc>)
100023b4:	1dfb      	adds	r3, r7, #7
100023b6:	781b      	ldrb	r3, [r3, #0]
100023b8:	1c18      	adds	r0, r3, #0
100023ba:	230f      	movs	r3, #15
100023bc:	4003      	ands	r3, r0
100023be:	3b08      	subs	r3, #8
100023c0:	089b      	lsrs	r3, r3, #2
100023c2:	3306      	adds	r3, #6
100023c4:	009b      	lsls	r3, r3, #2
100023c6:	18d3      	adds	r3, r2, r3
100023c8:	685b      	ldr	r3, [r3, #4]
100023ca:	1dfa      	adds	r2, r7, #7
100023cc:	7812      	ldrb	r2, [r2, #0]
100023ce:	1c10      	adds	r0, r2, #0
100023d0:	2203      	movs	r2, #3
100023d2:	4002      	ands	r2, r0
100023d4:	00d2      	lsls	r2, r2, #3
100023d6:	1c10      	adds	r0, r2, #0
100023d8:	22ff      	movs	r2, #255	; 0xff
100023da:	4082      	lsls	r2, r0
100023dc:	43d2      	mvns	r2, r2
100023de:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100023e0:	683b      	ldr	r3, [r7, #0]
100023e2:	019b      	lsls	r3, r3, #6
100023e4:	20ff      	movs	r0, #255	; 0xff
100023e6:	4003      	ands	r3, r0
100023e8:	1df8      	adds	r0, r7, #7
100023ea:	7800      	ldrb	r0, [r0, #0]
100023ec:	1c05      	adds	r5, r0, #0
100023ee:	2003      	movs	r0, #3
100023f0:	4028      	ands	r0, r5
100023f2:	00c0      	lsls	r0, r0, #3
100023f4:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023f6:	431a      	orrs	r2, r3
100023f8:	1d8b      	adds	r3, r1, #6
100023fa:	009b      	lsls	r3, r3, #2
100023fc:	18e3      	adds	r3, r4, r3
100023fe:	605a      	str	r2, [r3, #4]
10002400:	e026      	b.n	10002450 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002402:	4c16      	ldr	r4, [pc, #88]	; (1000245c <NVIC_SetPriority+0xd0>)
10002404:	1dfb      	adds	r3, r7, #7
10002406:	781b      	ldrb	r3, [r3, #0]
10002408:	b25b      	sxtb	r3, r3
1000240a:	089b      	lsrs	r3, r3, #2
1000240c:	4913      	ldr	r1, [pc, #76]	; (1000245c <NVIC_SetPriority+0xd0>)
1000240e:	1dfa      	adds	r2, r7, #7
10002410:	7812      	ldrb	r2, [r2, #0]
10002412:	b252      	sxtb	r2, r2
10002414:	0892      	lsrs	r2, r2, #2
10002416:	32c0      	adds	r2, #192	; 0xc0
10002418:	0092      	lsls	r2, r2, #2
1000241a:	5852      	ldr	r2, [r2, r1]
1000241c:	1df9      	adds	r1, r7, #7
1000241e:	7809      	ldrb	r1, [r1, #0]
10002420:	1c08      	adds	r0, r1, #0
10002422:	2103      	movs	r1, #3
10002424:	4001      	ands	r1, r0
10002426:	00c9      	lsls	r1, r1, #3
10002428:	1c08      	adds	r0, r1, #0
1000242a:	21ff      	movs	r1, #255	; 0xff
1000242c:	4081      	lsls	r1, r0
1000242e:	43c9      	mvns	r1, r1
10002430:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002432:	683a      	ldr	r2, [r7, #0]
10002434:	0192      	lsls	r2, r2, #6
10002436:	20ff      	movs	r0, #255	; 0xff
10002438:	4002      	ands	r2, r0
1000243a:	1df8      	adds	r0, r7, #7
1000243c:	7800      	ldrb	r0, [r0, #0]
1000243e:	1c05      	adds	r5, r0, #0
10002440:	2003      	movs	r0, #3
10002442:	4028      	ands	r0, r5
10002444:	00c0      	lsls	r0, r0, #3
10002446:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002448:	430a      	orrs	r2, r1
1000244a:	33c0      	adds	r3, #192	; 0xc0
1000244c:	009b      	lsls	r3, r3, #2
1000244e:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002450:	46bd      	mov	sp, r7
10002452:	b002      	add	sp, #8
10002454:	bdb0      	pop	{r4, r5, r7, pc}
10002456:	46c0      	nop			; (mov r8, r8)
10002458:	e000ed00 	.word	0xe000ed00
1000245c:	e000e100 	.word	0xe000e100

10002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002460:	b580      	push	{r7, lr}
10002462:	b082      	sub	sp, #8
10002464:	af00      	add	r7, sp, #0
10002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002468:	687b      	ldr	r3, [r7, #4]
1000246a:	3b01      	subs	r3, #1
1000246c:	4a0c      	ldr	r2, [pc, #48]	; (100024a0 <SysTick_Config+0x40>)
1000246e:	4293      	cmp	r3, r2
10002470:	d901      	bls.n	10002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10002472:	2301      	movs	r3, #1
10002474:	e010      	b.n	10002498 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002476:	4b0b      	ldr	r3, [pc, #44]	; (100024a4 <SysTick_Config+0x44>)
10002478:	687a      	ldr	r2, [r7, #4]
1000247a:	3a01      	subs	r2, #1
1000247c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000247e:	2301      	movs	r3, #1
10002480:	425b      	negs	r3, r3
10002482:	1c18      	adds	r0, r3, #0
10002484:	2103      	movs	r1, #3
10002486:	f7ff ff81 	bl	1000238c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000248a:	4b06      	ldr	r3, [pc, #24]	; (100024a4 <SysTick_Config+0x44>)
1000248c:	2200      	movs	r2, #0
1000248e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002490:	4b04      	ldr	r3, [pc, #16]	; (100024a4 <SysTick_Config+0x44>)
10002492:	2207      	movs	r2, #7
10002494:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10002496:	2300      	movs	r3, #0
}
10002498:	1c18      	adds	r0, r3, #0
1000249a:	46bd      	mov	sp, r7
1000249c:	b002      	add	sp, #8
1000249e:	bd80      	pop	{r7, pc}
100024a0:	00ffffff 	.word	0x00ffffff
100024a4:	e000e010 	.word	0xe000e010

100024a8 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
100024a8:	b590      	push	{r4, r7, lr}
100024aa:	b087      	sub	sp, #28
100024ac:	af00      	add	r7, sp, #0
100024ae:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
100024b0:	230f      	movs	r3, #15
100024b2:	18fb      	adds	r3, r7, r3
100024b4:	2200      	movs	r2, #0
100024b6:	701a      	strb	r2, [r3, #0]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
100024b8:	496b      	ldr	r1, [pc, #428]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100024ba:	687a      	ldr	r2, [r7, #4]
100024bc:	1c13      	adds	r3, r2, #0
100024be:	00db      	lsls	r3, r3, #3
100024c0:	189b      	adds	r3, r3, r2
100024c2:	009b      	lsls	r3, r3, #2
100024c4:	18cb      	adds	r3, r1, r3
100024c6:	3318      	adds	r3, #24
100024c8:	681b      	ldr	r3, [r3, #0]
100024ca:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
100024cc:	4b67      	ldr	r3, [pc, #412]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
100024ce:	681b      	ldr	r3, [r3, #0]
100024d0:	2b00      	cmp	r3, #0
100024d2:	d109      	bne.n	100024e8 <SYSTIMER_lInsertTimerList+0x40>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
100024d4:	687a      	ldr	r2, [r7, #4]
100024d6:	1c13      	adds	r3, r2, #0
100024d8:	00db      	lsls	r3, r3, #3
100024da:	189b      	adds	r3, r3, r2
100024dc:	009b      	lsls	r3, r3, #2
100024de:	4a62      	ldr	r2, [pc, #392]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100024e0:	189a      	adds	r2, r3, r2
100024e2:	4b62      	ldr	r3, [pc, #392]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
100024e4:	601a      	str	r2, [r3, #0]
100024e6:	e0bc      	b.n	10002662 <SYSTIMER_lInsertTimerList+0x1ba>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
100024e8:	4b60      	ldr	r3, [pc, #384]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
100024ea:	681b      	ldr	r3, [r3, #0]
100024ec:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
100024ee:	68bb      	ldr	r3, [r7, #8]
100024f0:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
100024f2:	e0aa      	b.n	1000264a <SYSTIMER_lInsertTimerList+0x1a2>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
100024f4:	697b      	ldr	r3, [r7, #20]
100024f6:	699b      	ldr	r3, [r3, #24]
100024f8:	1c1a      	adds	r2, r3, #0
100024fa:	693b      	ldr	r3, [r7, #16]
100024fc:	1a9b      	subs	r3, r3, r2
100024fe:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
10002500:	693b      	ldr	r3, [r7, #16]
10002502:	2b00      	cmp	r3, #0
10002504:	dc77      	bgt.n	100025f6 <SYSTIMER_lInsertTimerList+0x14e>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
10002506:	697b      	ldr	r3, [r7, #20]
10002508:	685b      	ldr	r3, [r3, #4]
1000250a:	2b00      	cmp	r3, #0
1000250c:	d025      	beq.n	1000255a <SYSTIMER_lInsertTimerList+0xb2>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
1000250e:	697b      	ldr	r3, [r7, #20]
10002510:	685a      	ldr	r2, [r3, #4]
10002512:	6879      	ldr	r1, [r7, #4]
10002514:	1c0b      	adds	r3, r1, #0
10002516:	00db      	lsls	r3, r3, #3
10002518:	185b      	adds	r3, r3, r1
1000251a:	009b      	lsls	r3, r3, #2
1000251c:	4952      	ldr	r1, [pc, #328]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
1000251e:	185b      	adds	r3, r3, r1
10002520:	6013      	str	r3, [r2, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
10002522:	697b      	ldr	r3, [r7, #20]
10002524:	6859      	ldr	r1, [r3, #4]
10002526:	4850      	ldr	r0, [pc, #320]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002528:	687a      	ldr	r2, [r7, #4]
1000252a:	1c13      	adds	r3, r2, #0
1000252c:	00db      	lsls	r3, r3, #3
1000252e:	189b      	adds	r3, r3, r2
10002530:	009b      	lsls	r3, r3, #2
10002532:	18c3      	adds	r3, r0, r3
10002534:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
10002536:	494c      	ldr	r1, [pc, #304]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002538:	687a      	ldr	r2, [r7, #4]
1000253a:	1c13      	adds	r3, r2, #0
1000253c:	00db      	lsls	r3, r3, #3
1000253e:	189b      	adds	r3, r3, r2
10002540:	009b      	lsls	r3, r3, #2
10002542:	697a      	ldr	r2, [r7, #20]
10002544:	505a      	str	r2, [r3, r1]
          object_ptr->prev = &g_timer_tbl[tbl_index];
10002546:	687a      	ldr	r2, [r7, #4]
10002548:	1c13      	adds	r3, r2, #0
1000254a:	00db      	lsls	r3, r3, #3
1000254c:	189b      	adds	r3, r3, r2
1000254e:	009b      	lsls	r3, r3, #2
10002550:	4a45      	ldr	r2, [pc, #276]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002552:	189a      	adds	r2, r3, r2
10002554:	697b      	ldr	r3, [r7, #20]
10002556:	605a      	str	r2, [r3, #4]
10002558:	e01b      	b.n	10002592 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
1000255a:	4b44      	ldr	r3, [pc, #272]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
1000255c:	6818      	ldr	r0, [r3, #0]
1000255e:	4942      	ldr	r1, [pc, #264]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002560:	687a      	ldr	r2, [r7, #4]
10002562:	1c13      	adds	r3, r2, #0
10002564:	00db      	lsls	r3, r3, #3
10002566:	189b      	adds	r3, r3, r2
10002568:	009b      	lsls	r3, r3, #2
1000256a:	5058      	str	r0, [r3, r1]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
1000256c:	4b3f      	ldr	r3, [pc, #252]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
1000256e:	681a      	ldr	r2, [r3, #0]
10002570:	6879      	ldr	r1, [r7, #4]
10002572:	1c0b      	adds	r3, r1, #0
10002574:	00db      	lsls	r3, r3, #3
10002576:	185b      	adds	r3, r3, r1
10002578:	009b      	lsls	r3, r3, #2
1000257a:	493b      	ldr	r1, [pc, #236]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
1000257c:	185b      	adds	r3, r3, r1
1000257e:	6053      	str	r3, [r2, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
10002580:	687a      	ldr	r2, [r7, #4]
10002582:	1c13      	adds	r3, r2, #0
10002584:	00db      	lsls	r3, r3, #3
10002586:	189b      	adds	r3, r3, r2
10002588:	009b      	lsls	r3, r3, #2
1000258a:	4a37      	ldr	r2, [pc, #220]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
1000258c:	189a      	adds	r2, r3, r2
1000258e:	4b37      	ldr	r3, [pc, #220]	; (1000266c <SYSTIMER_lInsertTimerList+0x1c4>)
10002590:	601a      	str	r2, [r3, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
10002592:	4935      	ldr	r1, [pc, #212]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002594:	687a      	ldr	r2, [r7, #4]
10002596:	1c13      	adds	r3, r2, #0
10002598:	00db      	lsls	r3, r3, #3
1000259a:	189b      	adds	r3, r3, r2
1000259c:	009b      	lsls	r3, r3, #2
1000259e:	585b      	ldr	r3, [r3, r1]
100025a0:	699a      	ldr	r2, [r3, #24]
100025a2:	693b      	ldr	r3, [r7, #16]
100025a4:	18d1      	adds	r1, r2, r3
100025a6:	4830      	ldr	r0, [pc, #192]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100025a8:	687a      	ldr	r2, [r7, #4]
100025aa:	1c13      	adds	r3, r2, #0
100025ac:	00db      	lsls	r3, r3, #3
100025ae:	189b      	adds	r3, r3, r2
100025b0:	009b      	lsls	r3, r3, #2
100025b2:	18c3      	adds	r3, r0, r3
100025b4:	3318      	adds	r3, #24
100025b6:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
100025b8:	492b      	ldr	r1, [pc, #172]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100025ba:	687a      	ldr	r2, [r7, #4]
100025bc:	1c13      	adds	r3, r2, #0
100025be:	00db      	lsls	r3, r3, #3
100025c0:	189b      	adds	r3, r3, r2
100025c2:	009b      	lsls	r3, r3, #2
100025c4:	585a      	ldr	r2, [r3, r1]
100025c6:	4828      	ldr	r0, [pc, #160]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100025c8:	6879      	ldr	r1, [r7, #4]
100025ca:	1c0b      	adds	r3, r1, #0
100025cc:	00db      	lsls	r3, r3, #3
100025ce:	185b      	adds	r3, r3, r1
100025d0:	009b      	lsls	r3, r3, #2
100025d2:	581b      	ldr	r3, [r3, r0]
100025d4:	6998      	ldr	r0, [r3, #24]
100025d6:	4c24      	ldr	r4, [pc, #144]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
100025d8:	6879      	ldr	r1, [r7, #4]
100025da:	1c0b      	adds	r3, r1, #0
100025dc:	00db      	lsls	r3, r3, #3
100025de:	185b      	adds	r3, r3, r1
100025e0:	009b      	lsls	r3, r3, #2
100025e2:	18e3      	adds	r3, r4, r3
100025e4:	3318      	adds	r3, #24
100025e6:	681b      	ldr	r3, [r3, #0]
100025e8:	1ac3      	subs	r3, r0, r3
100025ea:	6193      	str	r3, [r2, #24]
        found_flag = true;
100025ec:	230f      	movs	r3, #15
100025ee:	18fb      	adds	r3, r7, r3
100025f0:	2201      	movs	r2, #1
100025f2:	701a      	strb	r2, [r3, #0]
100025f4:	e026      	b.n	10002644 <SYSTIMER_lInsertTimerList+0x19c>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
100025f6:	693b      	ldr	r3, [r7, #16]
100025f8:	2b00      	cmp	r3, #0
100025fa:	dd23      	ble.n	10002644 <SYSTIMER_lInsertTimerList+0x19c>
100025fc:	697b      	ldr	r3, [r7, #20]
100025fe:	681b      	ldr	r3, [r3, #0]
10002600:	2b00      	cmp	r3, #0
10002602:	d11f      	bne.n	10002644 <SYSTIMER_lInsertTimerList+0x19c>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
10002604:	4918      	ldr	r1, [pc, #96]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002606:	687a      	ldr	r2, [r7, #4]
10002608:	1c13      	adds	r3, r2, #0
1000260a:	00db      	lsls	r3, r3, #3
1000260c:	189b      	adds	r3, r3, r2
1000260e:	009b      	lsls	r3, r3, #2
10002610:	18cb      	adds	r3, r1, r3
10002612:	697a      	ldr	r2, [r7, #20]
10002614:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
10002616:	687a      	ldr	r2, [r7, #4]
10002618:	1c13      	adds	r3, r2, #0
1000261a:	00db      	lsls	r3, r3, #3
1000261c:	189b      	adds	r3, r3, r2
1000261e:	009b      	lsls	r3, r3, #2
10002620:	4a11      	ldr	r2, [pc, #68]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
10002622:	189a      	adds	r2, r3, r2
10002624:	697b      	ldr	r3, [r7, #20]
10002626:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
10002628:	6939      	ldr	r1, [r7, #16]
1000262a:	480f      	ldr	r0, [pc, #60]	; (10002668 <SYSTIMER_lInsertTimerList+0x1c0>)
1000262c:	687a      	ldr	r2, [r7, #4]
1000262e:	1c13      	adds	r3, r2, #0
10002630:	00db      	lsls	r3, r3, #3
10002632:	189b      	adds	r3, r3, r2
10002634:	009b      	lsls	r3, r3, #2
10002636:	18c3      	adds	r3, r0, r3
10002638:	3318      	adds	r3, #24
1000263a:	6019      	str	r1, [r3, #0]
          found_flag = true;
1000263c:	230f      	movs	r3, #15
1000263e:	18fb      	adds	r3, r7, r3
10002640:	2201      	movs	r2, #1
10002642:	701a      	strb	r2, [r3, #0]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
10002644:	697b      	ldr	r3, [r7, #20]
10002646:	681b      	ldr	r3, [r3, #0]
10002648:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
1000264a:	697b      	ldr	r3, [r7, #20]
1000264c:	2b00      	cmp	r3, #0
1000264e:	d008      	beq.n	10002662 <SYSTIMER_lInsertTimerList+0x1ba>
10002650:	230f      	movs	r3, #15
10002652:	18fb      	adds	r3, r7, r3
10002654:	781b      	ldrb	r3, [r3, #0]
10002656:	2201      	movs	r2, #1
10002658:	4053      	eors	r3, r2
1000265a:	b2db      	uxtb	r3, r3
1000265c:	2b00      	cmp	r3, #0
1000265e:	d000      	beq.n	10002662 <SYSTIMER_lInsertTimerList+0x1ba>
10002660:	e748      	b.n	100024f4 <SYSTIMER_lInsertTimerList+0x4c>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
10002662:	46bd      	mov	sp, r7
10002664:	b007      	add	sp, #28
10002666:	bd90      	pop	{r4, r7, pc}
10002668:	200005c8 	.word	0x200005c8
1000266c:	200005a0 	.word	0x200005a0

10002670 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
10002670:	b580      	push	{r7, lr}
10002672:	b084      	sub	sp, #16
10002674:	af00      	add	r7, sp, #0
10002676:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
10002678:	687a      	ldr	r2, [r7, #4]
1000267a:	1c13      	adds	r3, r2, #0
1000267c:	00db      	lsls	r3, r3, #3
1000267e:	189b      	adds	r3, r3, r2
10002680:	009b      	lsls	r3, r3, #2
10002682:	4a28      	ldr	r2, [pc, #160]	; (10002724 <SYSTIMER_lRemoveTimerList+0xb4>)
10002684:	189b      	adds	r3, r3, r2
10002686:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
10002688:	68fb      	ldr	r3, [r7, #12]
1000268a:	685b      	ldr	r3, [r3, #4]
1000268c:	2b00      	cmp	r3, #0
1000268e:	d107      	bne.n	100026a0 <SYSTIMER_lRemoveTimerList+0x30>
10002690:	68fb      	ldr	r3, [r7, #12]
10002692:	681b      	ldr	r3, [r3, #0]
10002694:	2b00      	cmp	r3, #0
10002696:	d103      	bne.n	100026a0 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
10002698:	4b23      	ldr	r3, [pc, #140]	; (10002728 <SYSTIMER_lRemoveTimerList+0xb8>)
1000269a:	2200      	movs	r2, #0
1000269c:	601a      	str	r2, [r3, #0]
1000269e:	e03d      	b.n	1000271c <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
100026a0:	68fb      	ldr	r3, [r7, #12]
100026a2:	685b      	ldr	r3, [r3, #4]
100026a4:	2b00      	cmp	r3, #0
100026a6:	d114      	bne.n	100026d2 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
100026a8:	68fb      	ldr	r3, [r7, #12]
100026aa:	681a      	ldr	r2, [r3, #0]
100026ac:	4b1e      	ldr	r3, [pc, #120]	; (10002728 <SYSTIMER_lRemoveTimerList+0xb8>)
100026ae:	601a      	str	r2, [r3, #0]
    g_timer_list->prev = NULL;
100026b0:	4b1d      	ldr	r3, [pc, #116]	; (10002728 <SYSTIMER_lRemoveTimerList+0xb8>)
100026b2:	681b      	ldr	r3, [r3, #0]
100026b4:	2200      	movs	r2, #0
100026b6:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
100026b8:	4b1b      	ldr	r3, [pc, #108]	; (10002728 <SYSTIMER_lRemoveTimerList+0xb8>)
100026ba:	681b      	ldr	r3, [r3, #0]
100026bc:	4a1a      	ldr	r2, [pc, #104]	; (10002728 <SYSTIMER_lRemoveTimerList+0xb8>)
100026be:	6812      	ldr	r2, [r2, #0]
100026c0:	6991      	ldr	r1, [r2, #24]
100026c2:	68fa      	ldr	r2, [r7, #12]
100026c4:	6992      	ldr	r2, [r2, #24]
100026c6:	188a      	adds	r2, r1, r2
100026c8:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
100026ca:	68fb      	ldr	r3, [r7, #12]
100026cc:	2200      	movs	r2, #0
100026ce:	601a      	str	r2, [r3, #0]
100026d0:	e024      	b.n	1000271c <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
100026d2:	68fb      	ldr	r3, [r7, #12]
100026d4:	681b      	ldr	r3, [r3, #0]
100026d6:	2b00      	cmp	r3, #0
100026d8:	d107      	bne.n	100026ea <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
100026da:	68fb      	ldr	r3, [r7, #12]
100026dc:	685b      	ldr	r3, [r3, #4]
100026de:	2200      	movs	r2, #0
100026e0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
100026e2:	68fb      	ldr	r3, [r7, #12]
100026e4:	2200      	movs	r2, #0
100026e6:	605a      	str	r2, [r3, #4]
100026e8:	e018      	b.n	1000271c <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
100026ea:	68fb      	ldr	r3, [r7, #12]
100026ec:	685b      	ldr	r3, [r3, #4]
100026ee:	68fa      	ldr	r2, [r7, #12]
100026f0:	6812      	ldr	r2, [r2, #0]
100026f2:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
100026f4:	68fb      	ldr	r3, [r7, #12]
100026f6:	681b      	ldr	r3, [r3, #0]
100026f8:	68fa      	ldr	r2, [r7, #12]
100026fa:	6852      	ldr	r2, [r2, #4]
100026fc:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
100026fe:	68fb      	ldr	r3, [r7, #12]
10002700:	681b      	ldr	r3, [r3, #0]
10002702:	68fa      	ldr	r2, [r7, #12]
10002704:	6812      	ldr	r2, [r2, #0]
10002706:	6991      	ldr	r1, [r2, #24]
10002708:	68fa      	ldr	r2, [r7, #12]
1000270a:	6992      	ldr	r2, [r2, #24]
1000270c:	188a      	adds	r2, r1, r2
1000270e:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
10002710:	68fb      	ldr	r3, [r7, #12]
10002712:	2200      	movs	r2, #0
10002714:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
10002716:	68fb      	ldr	r3, [r7, #12]
10002718:	2200      	movs	r2, #0
1000271a:	605a      	str	r2, [r3, #4]
  }
}
1000271c:	46bd      	mov	sp, r7
1000271e:	b004      	add	sp, #16
10002720:	bd80      	pop	{r7, pc}
10002722:	46c0      	nop			; (mov r8, r8)
10002724:	200005c8 	.word	0x200005c8
10002728:	200005a0 	.word	0x200005a0

1000272c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
1000272c:	b580      	push	{r7, lr}
1000272e:	b082      	sub	sp, #8
10002730:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
10002732:	4b2f      	ldr	r3, [pc, #188]	; (100027f0 <SYSTIMER_lTimerHandler+0xc4>)
10002734:	681b      	ldr	r3, [r3, #0]
10002736:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
10002738:	e050      	b.n	100027dc <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
1000273a:	687b      	ldr	r3, [r7, #4]
1000273c:	2220      	movs	r2, #32
1000273e:	5c9b      	ldrb	r3, [r3, r2]
10002740:	2b00      	cmp	r3, #0
10002742:	d013      	beq.n	1000276c <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
10002744:	687b      	ldr	r3, [r7, #4]
10002746:	695b      	ldr	r3, [r3, #20]
10002748:	1c18      	adds	r0, r3, #0
1000274a:	f7ff ff91 	bl	10002670 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	2200      	movs	r2, #0
10002752:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
10002754:	687b      	ldr	r3, [r7, #4]
10002756:	695b      	ldr	r3, [r3, #20]
10002758:	1c1a      	adds	r2, r3, #0
1000275a:	2301      	movs	r3, #1
1000275c:	4093      	lsls	r3, r2
1000275e:	43da      	mvns	r2, r3
10002760:	4b24      	ldr	r3, [pc, #144]	; (100027f4 <SYSTIMER_lTimerHandler+0xc8>)
10002762:	681b      	ldr	r3, [r3, #0]
10002764:	401a      	ands	r2, r3
10002766:	4b23      	ldr	r3, [pc, #140]	; (100027f4 <SYSTIMER_lTimerHandler+0xc8>)
10002768:	601a      	str	r2, [r3, #0]
1000276a:	e034      	b.n	100027d6 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	7b1b      	ldrb	r3, [r3, #12]
10002770:	2b00      	cmp	r3, #0
10002772:	d112      	bne.n	1000279a <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
10002774:	687b      	ldr	r3, [r7, #4]
10002776:	7b5b      	ldrb	r3, [r3, #13]
10002778:	2b01      	cmp	r3, #1
1000277a:	d12c      	bne.n	100027d6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
1000277c:	687b      	ldr	r3, [r7, #4]
1000277e:	695b      	ldr	r3, [r3, #20]
10002780:	1c18      	adds	r0, r3, #0
10002782:	f7ff ff75 	bl	10002670 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
10002786:	687b      	ldr	r3, [r7, #4]
10002788:	2202      	movs	r2, #2
1000278a:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
1000278c:	687b      	ldr	r3, [r7, #4]
1000278e:	689a      	ldr	r2, [r3, #8]
10002790:	687b      	ldr	r3, [r7, #4]
10002792:	691b      	ldr	r3, [r3, #16]
10002794:	1c18      	adds	r0, r3, #0
10002796:	4790      	blx	r2
10002798:	e01d      	b.n	100027d6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
1000279a:	687b      	ldr	r3, [r7, #4]
1000279c:	7b1b      	ldrb	r3, [r3, #12]
1000279e:	2b01      	cmp	r3, #1
100027a0:	d118      	bne.n	100027d4 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
100027a2:	687b      	ldr	r3, [r7, #4]
100027a4:	7b5b      	ldrb	r3, [r3, #13]
100027a6:	2b01      	cmp	r3, #1
100027a8:	d115      	bne.n	100027d6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
100027aa:	687b      	ldr	r3, [r7, #4]
100027ac:	695b      	ldr	r3, [r3, #20]
100027ae:	1c18      	adds	r0, r3, #0
100027b0:	f7ff ff5e 	bl	10002670 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
100027b4:	687b      	ldr	r3, [r7, #4]
100027b6:	69da      	ldr	r2, [r3, #28]
100027b8:	687b      	ldr	r3, [r7, #4]
100027ba:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
100027bc:	687b      	ldr	r3, [r7, #4]
100027be:	695b      	ldr	r3, [r3, #20]
100027c0:	1c18      	adds	r0, r3, #0
100027c2:	f7ff fe71 	bl	100024a8 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
100027c6:	687b      	ldr	r3, [r7, #4]
100027c8:	689a      	ldr	r2, [r3, #8]
100027ca:	687b      	ldr	r3, [r7, #4]
100027cc:	691b      	ldr	r3, [r3, #16]
100027ce:	1c18      	adds	r0, r3, #0
100027d0:	4790      	blx	r2
100027d2:	e000      	b.n	100027d6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
100027d4:	e009      	b.n	100027ea <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
100027d6:	4b06      	ldr	r3, [pc, #24]	; (100027f0 <SYSTIMER_lTimerHandler+0xc4>)
100027d8:	681b      	ldr	r3, [r3, #0]
100027da:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
100027dc:	687b      	ldr	r3, [r7, #4]
100027de:	2b00      	cmp	r3, #0
100027e0:	d003      	beq.n	100027ea <SYSTIMER_lTimerHandler+0xbe>
100027e2:	687b      	ldr	r3, [r7, #4]
100027e4:	699b      	ldr	r3, [r3, #24]
100027e6:	2b00      	cmp	r3, #0
100027e8:	d0a7      	beq.n	1000273a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
100027ea:	46bd      	mov	sp, r7
100027ec:	b002      	add	sp, #8
100027ee:	bd80      	pop	{r7, pc}
100027f0:	200005a0 	.word	0x200005a0
100027f4:	200005a4 	.word	0x200005a4

100027f8 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
100027f8:	b580      	push	{r7, lr}
100027fa:	b082      	sub	sp, #8
100027fc:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
100027fe:	4b0e      	ldr	r3, [pc, #56]	; (10002838 <SysTick_Handler+0x40>)
10002800:	681b      	ldr	r3, [r3, #0]
10002802:	607b      	str	r3, [r7, #4]
  g_systick_count++;
10002804:	4b0d      	ldr	r3, [pc, #52]	; (1000283c <SysTick_Handler+0x44>)
10002806:	681b      	ldr	r3, [r3, #0]
10002808:	1c5a      	adds	r2, r3, #1
1000280a:	4b0c      	ldr	r3, [pc, #48]	; (1000283c <SysTick_Handler+0x44>)
1000280c:	601a      	str	r2, [r3, #0]

  if (NULL != object_ptr)
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	2b00      	cmp	r3, #0
10002812:	d00e      	beq.n	10002832 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
10002814:	687b      	ldr	r3, [r7, #4]
10002816:	699b      	ldr	r3, [r3, #24]
10002818:	2b01      	cmp	r3, #1
1000281a:	d905      	bls.n	10002828 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
1000281c:	687b      	ldr	r3, [r7, #4]
1000281e:	699b      	ldr	r3, [r3, #24]
10002820:	1e5a      	subs	r2, r3, #1
10002822:	687b      	ldr	r3, [r7, #4]
10002824:	619a      	str	r2, [r3, #24]
10002826:	e004      	b.n	10002832 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
10002828:	687b      	ldr	r3, [r7, #4]
1000282a:	2200      	movs	r2, #0
1000282c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
1000282e:	f7ff ff7d 	bl	1000272c <SYSTIMER_lTimerHandler>
    }
  }
}
10002832:	46bd      	mov	sp, r7
10002834:	b002      	add	sp, #8
10002836:	bd80      	pop	{r7, pc}
10002838:	200005a0 	.word	0x200005a0
1000283c:	200005a8 	.word	0x200005a8

10002840 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
10002840:	b580      	push	{r7, lr}
10002842:	b084      	sub	sp, #16
10002844:	af00      	add	r7, sp, #0
10002846:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
10002848:	230f      	movs	r3, #15
1000284a:	18fb      	adds	r3, r7, r3
1000284c:	2200      	movs	r2, #0
1000284e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
10002850:	687b      	ldr	r3, [r7, #4]
10002852:	781b      	ldrb	r3, [r3, #0]
10002854:	2201      	movs	r2, #1
10002856:	4053      	eors	r3, r2
10002858:	b2db      	uxtb	r3, r3
1000285a:	2b00      	cmp	r3, #0
1000285c:	d020      	beq.n	100028a0 <SYSTIMER_Init+0x60>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
1000285e:	4b14      	ldr	r3, [pc, #80]	; (100028b0 <SYSTIMER_Init+0x70>)
10002860:	2200      	movs	r2, #0
10002862:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
10002864:	23fa      	movs	r3, #250	; 0xfa
10002866:	01db      	lsls	r3, r3, #7
10002868:	1c18      	adds	r0, r3, #0
1000286a:	f7ff fdf9 	bl	10002460 <SysTick_Config>
1000286e:	1c02      	adds	r2, r0, #0
10002870:	230f      	movs	r3, #15
10002872:	18fb      	adds	r3, r7, r3
10002874:	701a      	strb	r2, [r3, #0]

    if (SYSTIMER_STATUS_FAILURE == status)
10002876:	230f      	movs	r3, #15
10002878:	18fb      	adds	r3, r7, r3
1000287a:	781b      	ldrb	r3, [r3, #0]
1000287c:	2b01      	cmp	r3, #1
1000287e:	d00f      	beq.n	100028a0 <SYSTIMER_Init+0x60>
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
10002880:	2301      	movs	r3, #1
10002882:	425b      	negs	r3, r3
10002884:	1c18      	adds	r0, r3, #0
10002886:	2103      	movs	r1, #3
10002888:	f7ff fd80 	bl	1000238c <NVIC_SetPriority>
#endif      
      g_timer_tracker = 0U;
1000288c:	4b09      	ldr	r3, [pc, #36]	; (100028b4 <SYSTIMER_Init+0x74>)
1000288e:	2200      	movs	r2, #0
10002890:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
10002892:	687b      	ldr	r3, [r7, #4]
10002894:	2201      	movs	r2, #1
10002896:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
10002898:	230f      	movs	r3, #15
1000289a:	18fb      	adds	r3, r7, r3
1000289c:	2200      	movs	r2, #0
1000289e:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
100028a0:	230f      	movs	r3, #15
100028a2:	18fb      	adds	r3, r7, r3
100028a4:	781b      	ldrb	r3, [r3, #0]
}
100028a6:	1c18      	adds	r0, r3, #0
100028a8:	46bd      	mov	sp, r7
100028aa:	b004      	add	sp, #16
100028ac:	bd80      	pop	{r7, pc}
100028ae:	46c0      	nop			; (mov r8, r8)
100028b0:	200005a0 	.word	0x200005a0
100028b4:	200005a4 	.word	0x200005a4

100028b8 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
100028b8:	b580      	push	{r7, lr}
100028ba:	b088      	sub	sp, #32
100028bc:	af00      	add	r7, sp, #0
100028be:	60f8      	str	r0, [r7, #12]
100028c0:	607a      	str	r2, [r7, #4]
100028c2:	603b      	str	r3, [r7, #0]
100028c4:	230b      	movs	r3, #11
100028c6:	18fb      	adds	r3, r7, r3
100028c8:	1c0a      	adds	r2, r1, #0
100028ca:	701a      	strb	r2, [r3, #0]
  uint32_t id = 0U;
100028cc:	2300      	movs	r3, #0
100028ce:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
100028d0:	2300      	movs	r3, #0
100028d2:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
100028d4:	2300      	movs	r3, #0
100028d6:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
100028d8:	68fb      	ldr	r3, [r7, #12]
100028da:	4a44      	ldr	r2, [pc, #272]	; (100029ec <SYSTIMER_CreateTimer+0x134>)
100028dc:	4293      	cmp	r3, r2
100028de:	d802      	bhi.n	100028e6 <SYSTIMER_CreateTimer+0x2e>
  {
    id = 0U;
100028e0:	2300      	movs	r3, #0
100028e2:	61fb      	str	r3, [r7, #28]
100028e4:	e07d      	b.n	100029e2 <SYSTIMER_CreateTimer+0x12a>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
100028e6:	2300      	movs	r3, #0
100028e8:	61bb      	str	r3, [r7, #24]
100028ea:	e077      	b.n	100029dc <SYSTIMER_CreateTimer+0x124>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
100028ec:	69bb      	ldr	r3, [r7, #24]
100028ee:	2201      	movs	r2, #1
100028f0:	409a      	lsls	r2, r3
100028f2:	4b3f      	ldr	r3, [pc, #252]	; (100029f0 <SYSTIMER_CreateTimer+0x138>)
100028f4:	681b      	ldr	r3, [r3, #0]
100028f6:	4013      	ands	r3, r2
100028f8:	d16d      	bne.n	100029d6 <SYSTIMER_CreateTimer+0x11e>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
100028fa:	69bb      	ldr	r3, [r7, #24]
100028fc:	2201      	movs	r2, #1
100028fe:	409a      	lsls	r2, r3
10002900:	4b3b      	ldr	r3, [pc, #236]	; (100029f0 <SYSTIMER_CreateTimer+0x138>)
10002902:	681b      	ldr	r3, [r3, #0]
10002904:	431a      	orrs	r2, r3
10002906:	4b3a      	ldr	r3, [pc, #232]	; (100029f0 <SYSTIMER_CreateTimer+0x138>)
10002908:	601a      	str	r2, [r3, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
1000290a:	493a      	ldr	r1, [pc, #232]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
1000290c:	69ba      	ldr	r2, [r7, #24]
1000290e:	1c13      	adds	r3, r2, #0
10002910:	00db      	lsls	r3, r3, #3
10002912:	189b      	adds	r3, r3, r2
10002914:	009b      	lsls	r3, r3, #2
10002916:	18cb      	adds	r3, r1, r3
10002918:	3310      	adds	r3, #16
1000291a:	69ba      	ldr	r2, [r7, #24]
1000291c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
1000291e:	4935      	ldr	r1, [pc, #212]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
10002920:	69ba      	ldr	r2, [r7, #24]
10002922:	1c13      	adds	r3, r2, #0
10002924:	00db      	lsls	r3, r3, #3
10002926:	189b      	adds	r3, r3, r2
10002928:	009b      	lsls	r3, r3, #2
1000292a:	18cb      	adds	r3, r1, r3
1000292c:	3308      	adds	r3, #8
1000292e:	220b      	movs	r2, #11
10002930:	18ba      	adds	r2, r7, r2
10002932:	7812      	ldrb	r2, [r2, #0]
10002934:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
10002936:	492f      	ldr	r1, [pc, #188]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
10002938:	69ba      	ldr	r2, [r7, #24]
1000293a:	1c13      	adds	r3, r2, #0
1000293c:	00db      	lsls	r3, r3, #3
1000293e:	189b      	adds	r3, r3, r2
10002940:	009b      	lsls	r3, r3, #2
10002942:	18cb      	adds	r3, r1, r3
10002944:	3308      	adds	r3, #8
10002946:	2202      	movs	r2, #2
10002948:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
1000294a:	68fb      	ldr	r3, [r7, #12]
1000294c:	1c18      	adds	r0, r3, #0
1000294e:	23fa      	movs	r3, #250	; 0xfa
10002950:	0099      	lsls	r1, r3, #2
10002952:	f002 feff 	bl	10005754 <__aeabi_uidiv>
10002956:	1c03      	adds	r3, r0, #0
10002958:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
1000295a:	697b      	ldr	r3, [r7, #20]
1000295c:	1c59      	adds	r1, r3, #1
1000295e:	4825      	ldr	r0, [pc, #148]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
10002960:	69ba      	ldr	r2, [r7, #24]
10002962:	1c13      	adds	r3, r2, #0
10002964:	00db      	lsls	r3, r3, #3
10002966:	189b      	adds	r3, r3, r2
10002968:	009b      	lsls	r3, r3, #2
1000296a:	18c3      	adds	r3, r0, r3
1000296c:	3318      	adds	r3, #24
1000296e:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
10002970:	4920      	ldr	r1, [pc, #128]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
10002972:	69ba      	ldr	r2, [r7, #24]
10002974:	1c13      	adds	r3, r2, #0
10002976:	00db      	lsls	r3, r3, #3
10002978:	189b      	adds	r3, r3, r2
1000297a:	009b      	lsls	r3, r3, #2
1000297c:	18cb      	adds	r3, r1, r3
1000297e:	3318      	adds	r3, #24
10002980:	697a      	ldr	r2, [r7, #20]
10002982:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
10002984:	491b      	ldr	r1, [pc, #108]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
10002986:	69ba      	ldr	r2, [r7, #24]
10002988:	1c13      	adds	r3, r2, #0
1000298a:	00db      	lsls	r3, r3, #3
1000298c:	189b      	adds	r3, r3, r2
1000298e:	009b      	lsls	r3, r3, #2
10002990:	18cb      	adds	r3, r1, r3
10002992:	3308      	adds	r3, #8
10002994:	687a      	ldr	r2, [r7, #4]
10002996:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
10002998:	4916      	ldr	r1, [pc, #88]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
1000299a:	69ba      	ldr	r2, [r7, #24]
1000299c:	1c13      	adds	r3, r2, #0
1000299e:	00db      	lsls	r3, r3, #3
100029a0:	189b      	adds	r3, r3, r2
100029a2:	009b      	lsls	r3, r3, #2
100029a4:	18cb      	adds	r3, r1, r3
100029a6:	3310      	adds	r3, #16
100029a8:	683a      	ldr	r2, [r7, #0]
100029aa:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
100029ac:	4911      	ldr	r1, [pc, #68]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
100029ae:	69ba      	ldr	r2, [r7, #24]
100029b0:	1c13      	adds	r3, r2, #0
100029b2:	00db      	lsls	r3, r3, #3
100029b4:	189b      	adds	r3, r3, r2
100029b6:	009b      	lsls	r3, r3, #2
100029b8:	18cb      	adds	r3, r1, r3
100029ba:	2200      	movs	r2, #0
100029bc:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
100029be:	490d      	ldr	r1, [pc, #52]	; (100029f4 <SYSTIMER_CreateTimer+0x13c>)
100029c0:	69ba      	ldr	r2, [r7, #24]
100029c2:	1c13      	adds	r3, r2, #0
100029c4:	00db      	lsls	r3, r3, #3
100029c6:	189b      	adds	r3, r3, r2
100029c8:	009b      	lsls	r3, r3, #2
100029ca:	2200      	movs	r2, #0
100029cc:	505a      	str	r2, [r3, r1]
        id = count + 1U;
100029ce:	69bb      	ldr	r3, [r7, #24]
100029d0:	3301      	adds	r3, #1
100029d2:	61fb      	str	r3, [r7, #28]
        break;
100029d4:	e005      	b.n	100029e2 <SYSTIMER_CreateTimer+0x12a>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
100029d6:	69bb      	ldr	r3, [r7, #24]
100029d8:	3301      	adds	r3, #1
100029da:	61bb      	str	r3, [r7, #24]
100029dc:	69bb      	ldr	r3, [r7, #24]
100029de:	2b07      	cmp	r3, #7
100029e0:	d984      	bls.n	100028ec <SYSTIMER_CreateTimer+0x34>
      }
    }

  }
  
  return (id);
100029e2:	69fb      	ldr	r3, [r7, #28]
}  
100029e4:	1c18      	adds	r0, r3, #0
100029e6:	46bd      	mov	sp, r7
100029e8:	b008      	add	sp, #32
100029ea:	bd80      	pop	{r7, pc}
100029ec:	000003e7 	.word	0x000003e7
100029f0:	200005a4 	.word	0x200005a4
100029f4:	200005c8 	.word	0x200005c8

100029f8 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
100029f8:	b580      	push	{r7, lr}
100029fa:	b084      	sub	sp, #16
100029fc:	af00      	add	r7, sp, #0
100029fe:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
10002a00:	230f      	movs	r3, #15
10002a02:	18fb      	adds	r3, r7, r3
10002a04:	2201      	movs	r2, #1
10002a06:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	1e5a      	subs	r2, r3, #1
10002a0c:	491c      	ldr	r1, [pc, #112]	; (10002a80 <SYSTIMER_StartTimer+0x88>)
10002a0e:	1c13      	adds	r3, r2, #0
10002a10:	00db      	lsls	r3, r3, #3
10002a12:	189b      	adds	r3, r3, r2
10002a14:	009b      	lsls	r3, r3, #2
10002a16:	18cb      	adds	r3, r1, r3
10002a18:	3308      	adds	r3, #8
10002a1a:	795b      	ldrb	r3, [r3, #5]
10002a1c:	2b02      	cmp	r3, #2
10002a1e:	d128      	bne.n	10002a72 <SYSTIMER_StartTimer+0x7a>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
10002a20:	687b      	ldr	r3, [r7, #4]
10002a22:	1e5a      	subs	r2, r3, #1
10002a24:	687b      	ldr	r3, [r7, #4]
10002a26:	1e59      	subs	r1, r3, #1
10002a28:	4815      	ldr	r0, [pc, #84]	; (10002a80 <SYSTIMER_StartTimer+0x88>)
10002a2a:	1c0b      	adds	r3, r1, #0
10002a2c:	00db      	lsls	r3, r3, #3
10002a2e:	185b      	adds	r3, r3, r1
10002a30:	009b      	lsls	r3, r3, #2
10002a32:	18c3      	adds	r3, r0, r3
10002a34:	3318      	adds	r3, #24
10002a36:	685b      	ldr	r3, [r3, #4]
10002a38:	1c59      	adds	r1, r3, #1
10002a3a:	4811      	ldr	r0, [pc, #68]	; (10002a80 <SYSTIMER_StartTimer+0x88>)
10002a3c:	1c13      	adds	r3, r2, #0
10002a3e:	00db      	lsls	r3, r3, #3
10002a40:	189b      	adds	r3, r3, r2
10002a42:	009b      	lsls	r3, r3, #2
10002a44:	18c3      	adds	r3, r0, r3
10002a46:	3318      	adds	r3, #24
10002a48:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
10002a4a:	687b      	ldr	r3, [r7, #4]
10002a4c:	1e5a      	subs	r2, r3, #1
10002a4e:	490c      	ldr	r1, [pc, #48]	; (10002a80 <SYSTIMER_StartTimer+0x88>)
10002a50:	1c13      	adds	r3, r2, #0
10002a52:	00db      	lsls	r3, r3, #3
10002a54:	189b      	adds	r3, r3, r2
10002a56:	009b      	lsls	r3, r3, #2
10002a58:	18cb      	adds	r3, r1, r3
10002a5a:	3308      	adds	r3, #8
10002a5c:	2201      	movs	r2, #1
10002a5e:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
10002a60:	687b      	ldr	r3, [r7, #4]
10002a62:	3b01      	subs	r3, #1
10002a64:	1c18      	adds	r0, r3, #0
10002a66:	f7ff fd1f 	bl	100024a8 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
10002a6a:	230f      	movs	r3, #15
10002a6c:	18fb      	adds	r3, r7, r3
10002a6e:	2200      	movs	r2, #0
10002a70:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10002a72:	230f      	movs	r3, #15
10002a74:	18fb      	adds	r3, r7, r3
10002a76:	781b      	ldrb	r3, [r3, #0]
}
10002a78:	1c18      	adds	r0, r3, #0
10002a7a:	46bd      	mov	sp, r7
10002a7c:	b004      	add	sp, #16
10002a7e:	bd80      	pop	{r7, pc}
10002a80:	200005c8 	.word	0x200005c8

10002a84 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002a84:	b580      	push	{r7, lr}
10002a86:	b082      	sub	sp, #8
10002a88:	af00      	add	r7, sp, #0
10002a8a:	6078      	str	r0, [r7, #4]
10002a8c:	1c0a      	adds	r2, r1, #0
10002a8e:	1cfb      	adds	r3, r7, #3
10002a90:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
10002a92:	687b      	ldr	r3, [r7, #4]
10002a94:	68da      	ldr	r2, [r3, #12]
10002a96:	1cfb      	adds	r3, r7, #3
10002a98:	781b      	ldrb	r3, [r3, #0]
10002a9a:	2101      	movs	r1, #1
10002a9c:	4099      	lsls	r1, r3
10002a9e:	1c0b      	adds	r3, r1, #0
10002aa0:	431a      	orrs	r2, r3
10002aa2:	687b      	ldr	r3, [r7, #4]
10002aa4:	60da      	str	r2, [r3, #12]
}
10002aa6:	46bd      	mov	sp, r7
10002aa8:	b002      	add	sp, #8
10002aaa:	bd80      	pop	{r7, pc}

10002aac <XMC_CCU4_DisableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002aac:	b580      	push	{r7, lr}
10002aae:	b082      	sub	sp, #8
10002ab0:	af00      	add	r7, sp, #0
10002ab2:	6078      	str	r0, [r7, #4]
10002ab4:	1c0a      	adds	r2, r1, #0
10002ab6:	1cfb      	adds	r3, r7, #3
10002ab8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLS |= ((uint32_t) 1) << slice_number;
10002aba:	687b      	ldr	r3, [r7, #4]
10002abc:	689a      	ldr	r2, [r3, #8]
10002abe:	1cfb      	adds	r3, r7, #3
10002ac0:	781b      	ldrb	r3, [r3, #0]
10002ac2:	2101      	movs	r1, #1
10002ac4:	4099      	lsls	r1, r3
10002ac6:	1c0b      	adds	r3, r1, #0
10002ac8:	431a      	orrs	r2, r3
10002aca:	687b      	ldr	r3, [r7, #4]
10002acc:	609a      	str	r2, [r3, #8]
}
10002ace:	46bd      	mov	sp, r7
10002ad0:	b002      	add	sp, #8
10002ad2:	bd80      	pop	{r7, pc}

10002ad4 <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
10002ad4:	b580      	push	{r7, lr}
10002ad6:	b082      	sub	sp, #8
10002ad8:	af00      	add	r7, sp, #0
10002ada:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
10002adc:	687b      	ldr	r3, [r7, #4]
10002ade:	695b      	ldr	r3, [r3, #20]
10002ae0:	2280      	movs	r2, #128	; 0x80
10002ae2:	0292      	lsls	r2, r2, #10
10002ae4:	431a      	orrs	r2, r3
10002ae6:	687b      	ldr	r3, [r7, #4]
10002ae8:	615a      	str	r2, [r3, #20]
}
10002aea:	46bd      	mov	sp, r7
10002aec:	b002      	add	sp, #8
10002aee:	bd80      	pop	{r7, pc}

10002af0 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002af0:	b580      	push	{r7, lr}
10002af2:	b082      	sub	sp, #8
10002af4:	af00      	add	r7, sp, #0
10002af6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002af8:	687b      	ldr	r3, [r7, #4]
10002afa:	2201      	movs	r2, #1
10002afc:	60da      	str	r2, [r3, #12]
}
10002afe:	46bd      	mov	sp, r7
10002b00:	b002      	add	sp, #8
10002b02:	bd80      	pop	{r7, pc}

10002b04 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
10002b04:	b580      	push	{r7, lr}
10002b06:	b082      	sub	sp, #8
10002b08:	af00      	add	r7, sp, #0
10002b0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
10002b0c:	687b      	ldr	r3, [r7, #4]
10002b0e:	2201      	movs	r2, #1
10002b10:	611a      	str	r2, [r3, #16]
}
10002b12:	46bd      	mov	sp, r7
10002b14:	b002      	add	sp, #8
10002b16:	bd80      	pop	{r7, pc}

10002b18 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10002b18:	b580      	push	{r7, lr}
10002b1a:	b082      	sub	sp, #8
10002b1c:	af00      	add	r7, sp, #0
10002b1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002b20:	687b      	ldr	r3, [r7, #4]
10002b22:	2202      	movs	r2, #2
10002b24:	611a      	str	r2, [r3, #16]
}
10002b26:	46bd      	mov	sp, r7
10002b28:	b002      	add	sp, #8
10002b2a:	bd80      	pop	{r7, pc}

10002b2c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002b2c:	b580      	push	{r7, lr}
10002b2e:	b082      	sub	sp, #8
10002b30:	af00      	add	r7, sp, #0
10002b32:	6078      	str	r0, [r7, #4]
10002b34:	1c0a      	adds	r2, r1, #0
10002b36:	1cbb      	adds	r3, r7, #2
10002b38:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002b3a:	1cbb      	adds	r3, r7, #2
10002b3c:	881a      	ldrh	r2, [r3, #0]
10002b3e:	687b      	ldr	r3, [r7, #4]
10002b40:	635a      	str	r2, [r3, #52]	; 0x34
}
10002b42:	46bd      	mov	sp, r7
10002b44:	b002      	add	sp, #8
10002b46:	bd80      	pop	{r7, pc}

10002b48 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002b48:	b580      	push	{r7, lr}
10002b4a:	b082      	sub	sp, #8
10002b4c:	af00      	add	r7, sp, #0
10002b4e:	6078      	str	r0, [r7, #4]
10002b50:	1c0a      	adds	r2, r1, #0
10002b52:	1cbb      	adds	r3, r7, #2
10002b54:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002b56:	1cbb      	adds	r3, r7, #2
10002b58:	881a      	ldrh	r2, [r3, #0]
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002b5e:	46bd      	mov	sp, r7
10002b60:	b002      	add	sp, #8
10002b62:	bd80      	pop	{r7, pc}

10002b64 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002b64:	b580      	push	{r7, lr}
10002b66:	b082      	sub	sp, #8
10002b68:	af00      	add	r7, sp, #0
10002b6a:	6078      	str	r0, [r7, #4]
10002b6c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10002b6e:	687b      	ldr	r3, [r7, #4]
10002b70:	683a      	ldr	r2, [r7, #0]
10002b72:	611a      	str	r2, [r3, #16]
}
10002b74:	46bd      	mov	sp, r7
10002b76:	b002      	add	sp, #8
10002b78:	bd80      	pop	{r7, pc}
10002b7a:	46c0      	nop			; (mov r8, r8)

10002b7c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002b7c:	b580      	push	{r7, lr}
10002b7e:	b082      	sub	sp, #8
10002b80:	af00      	add	r7, sp, #0
10002b82:	6078      	str	r0, [r7, #4]
10002b84:	1c0a      	adds	r2, r1, #0
10002b86:	1cfb      	adds	r3, r7, #3
10002b88:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10002b8a:	687b      	ldr	r3, [r7, #4]
10002b8c:	22a4      	movs	r2, #164	; 0xa4
10002b8e:	589a      	ldr	r2, [r3, r2]
10002b90:	1cfb      	adds	r3, r7, #3
10002b92:	781b      	ldrb	r3, [r3, #0]
10002b94:	2101      	movs	r1, #1
10002b96:	4099      	lsls	r1, r3
10002b98:	1c0b      	adds	r3, r1, #0
10002b9a:	431a      	orrs	r2, r3
10002b9c:	687b      	ldr	r3, [r7, #4]
10002b9e:	21a4      	movs	r1, #164	; 0xa4
10002ba0:	505a      	str	r2, [r3, r1]
}
10002ba2:	46bd      	mov	sp, r7
10002ba4:	b002      	add	sp, #8
10002ba6:	bd80      	pop	{r7, pc}

10002ba8 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
10002ba8:	b590      	push	{r4, r7, lr}
10002baa:	b087      	sub	sp, #28
10002bac:	af00      	add	r7, sp, #0
10002bae:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
10002bb0:	2317      	movs	r3, #23
10002bb2:	18fb      	adds	r3, r7, r3
10002bb4:	2201      	movs	r2, #1
10002bb6:	701a      	strb	r2, [r3, #0]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
10002bb8:	2316      	movs	r3, #22
10002bba:	18fb      	adds	r3, r7, r3
10002bbc:	2201      	movs	r2, #1
10002bbe:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10002bc0:	687b      	ldr	r3, [r7, #4]
10002bc2:	7f1b      	ldrb	r3, [r3, #28]
10002bc4:	2b00      	cmp	r3, #0
10002bc6:	d000      	beq.n	10002bca <PWM_CCU4_Init+0x22>
10002bc8:	e097      	b.n	10002cfa <PWM_CCU4_Init+0x152>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
10002bca:	687b      	ldr	r3, [r7, #4]
10002bcc:	681b      	ldr	r3, [r3, #0]
10002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002bd0:	2216      	movs	r2, #22
10002bd2:	18bc      	adds	r4, r7, r2
10002bd4:	1c18      	adds	r0, r3, #0
10002bd6:	f001 fac7 	bl	10004168 <GLOBAL_CCU4_Init>
10002bda:	1c03      	adds	r3, r0, #0
10002bdc:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
10002bde:	2316      	movs	r3, #22
10002be0:	18fb      	adds	r3, r7, r3
10002be2:	781b      	ldrb	r3, [r3, #0]
10002be4:	2b00      	cmp	r3, #0
10002be6:	d000      	beq.n	10002bea <PWM_CCU4_Init+0x42>
10002be8:	e083      	b.n	10002cf2 <PWM_CCU4_Init+0x14a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
10002bea:	687b      	ldr	r3, [r7, #4]
10002bec:	689a      	ldr	r2, [r3, #8]
10002bee:	687b      	ldr	r3, [r7, #4]
10002bf0:	681b      	ldr	r3, [r3, #0]
10002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002bf4:	1c10      	adds	r0, r2, #0
10002bf6:	1c19      	adds	r1, r3, #0
10002bf8:	f7fe fcbe 	bl	10001578 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
10002bfc:	687b      	ldr	r3, [r7, #4]
10002bfe:	689a      	ldr	r2, [r3, #8]
10002c00:	687b      	ldr	r3, [r7, #4]
10002c02:	681b      	ldr	r3, [r3, #0]
10002c04:	885b      	ldrh	r3, [r3, #2]
10002c06:	1c10      	adds	r0, r2, #0
10002c08:	1c19      	adds	r1, r3, #0
10002c0a:	f7ff ff8f 	bl	10002b2c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
10002c0e:	687b      	ldr	r3, [r7, #4]
10002c10:	689a      	ldr	r2, [r3, #8]
10002c12:	687b      	ldr	r3, [r7, #4]
10002c14:	681b      	ldr	r3, [r3, #0]
10002c16:	889b      	ldrh	r3, [r3, #4]
10002c18:	1c10      	adds	r0, r2, #0
10002c1a:	1c19      	adds	r1, r3, #0
10002c1c:	f7ff ff94 	bl	10002b48 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
10002c20:	687b      	ldr	r3, [r7, #4]
10002c22:	681b      	ldr	r3, [r3, #0]
10002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002c26:	78db      	ldrb	r3, [r3, #3]
10002c28:	2202      	movs	r2, #2
10002c2a:	4013      	ands	r3, r2
10002c2c:	b2db      	uxtb	r3, r3
10002c2e:	2b00      	cmp	r3, #0
10002c30:	d008      	beq.n	10002c44 <PWM_CCU4_Init+0x9c>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10002c32:	687b      	ldr	r3, [r7, #4]
10002c34:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	681b      	ldr	r3, [r3, #0]
10002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10002c3c:	1c10      	adds	r0, r2, #0
10002c3e:	1c19      	adds	r1, r3, #0
10002c40:	f7fe fc80 	bl	10001544 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
10002c44:	687b      	ldr	r3, [r7, #4]
10002c46:	685a      	ldr	r2, [r3, #4]
10002c48:	687b      	ldr	r3, [r7, #4]
10002c4a:	691b      	ldr	r3, [r3, #16]
10002c4c:	1c10      	adds	r0, r2, #0
10002c4e:	1c19      	adds	r1, r3, #0
10002c50:	f7ff ff88 	bl	10002b64 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
10002c54:	687b      	ldr	r3, [r7, #4]
10002c56:	685a      	ldr	r2, [r3, #4]
10002c58:	687b      	ldr	r3, [r7, #4]
10002c5a:	695b      	ldr	r3, [r3, #20]
10002c5c:	1c10      	adds	r0, r2, #0
10002c5e:	1c19      	adds	r1, r3, #0
10002c60:	f7ff ff80 	bl	10002b64 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
10002c64:	687b      	ldr	r3, [r7, #4]
10002c66:	1c18      	adds	r0, r3, #0
10002c68:	f000 f8ec 	bl	10002e44 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
10002c6c:	687b      	ldr	r3, [r7, #4]
10002c6e:	1c18      	adds	r0, r3, #0
10002c70:	f000 f84e 	bl	10002d10 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
10002c74:	687b      	ldr	r3, [r7, #4]
10002c76:	681b      	ldr	r3, [r3, #0]
10002c78:	223c      	movs	r2, #60	; 0x3c
10002c7a:	5c9b      	ldrb	r3, [r3, r2]
10002c7c:	2b00      	cmp	r3, #0
10002c7e:	d00e      	beq.n	10002c9e <PWM_CCU4_Init+0xf6>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10002c80:	687b      	ldr	r3, [r7, #4]
10002c82:	681b      	ldr	r3, [r3, #0]
10002c84:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	681b      	ldr	r3, [r3, #0]
10002c8a:	2244      	movs	r2, #68	; 0x44
10002c8c:	5c9a      	ldrb	r2, [r3, r2]
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
10002c8e:	687b      	ldr	r3, [r7, #4]
10002c90:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002c94:	1c08      	adds	r0, r1, #0
10002c96:	1c11      	adds	r1, r2, #0
10002c98:	1c1a      	adds	r2, r3, #0
10002c9a:	f7fe fa3b 	bl	10001114 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
10002c9e:	687b      	ldr	r3, [r7, #4]
10002ca0:	681b      	ldr	r3, [r3, #0]
10002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10002ca4:	681b      	ldr	r3, [r3, #0]
10002ca6:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
10002ca8:	687b      	ldr	r3, [r7, #4]
10002caa:	681b      	ldr	r3, [r3, #0]
10002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002cae:	791b      	ldrb	r3, [r3, #4]
10002cb0:	071b      	lsls	r3, r3, #28
10002cb2:	0f1b      	lsrs	r3, r3, #28
10002cb4:	b2db      	uxtb	r3, r3
10002cb6:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10002cb8:	68fb      	ldr	r3, [r7, #12]
10002cba:	693a      	ldr	r2, [r7, #16]
10002cbc:	40da      	lsrs	r2, r3
10002cbe:	1c13      	adds	r3, r2, #0
10002cc0:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	693a      	ldr	r2, [r7, #16]
10002cc6:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
10002cc8:	687b      	ldr	r3, [r7, #4]
10002cca:	2201      	movs	r2, #1
10002ccc:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
10002cce:	2317      	movs	r3, #23
10002cd0:	18fb      	adds	r3, r7, r3
10002cd2:	2200      	movs	r2, #0
10002cd4:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10002cd6:	687b      	ldr	r3, [r7, #4]
10002cd8:	681b      	ldr	r3, [r3, #0]
10002cda:	781b      	ldrb	r3, [r3, #0]
10002cdc:	2b00      	cmp	r3, #0
10002cde:	d010      	beq.n	10002d02 <PWM_CCU4_Init+0x15a>
      {
        status = PWM_CCU4_Start(handle_ptr);
10002ce0:	2317      	movs	r3, #23
10002ce2:	18fc      	adds	r4, r7, r3
10002ce4:	687b      	ldr	r3, [r7, #4]
10002ce6:	1c18      	adds	r0, r3, #0
10002ce8:	f000 f98a 	bl	10003000 <PWM_CCU4_Start>
10002cec:	1c03      	adds	r3, r0, #0
10002cee:	7023      	strb	r3, [r4, #0]
10002cf0:	e007      	b.n	10002d02 <PWM_CCU4_Init+0x15a>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
10002cf2:	687b      	ldr	r3, [r7, #4]
10002cf4:	2200      	movs	r2, #0
10002cf6:	771a      	strb	r2, [r3, #28]
10002cf8:	e003      	b.n	10002d02 <PWM_CCU4_Init+0x15a>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
10002cfa:	2317      	movs	r3, #23
10002cfc:	18fb      	adds	r3, r7, r3
10002cfe:	2202      	movs	r2, #2
10002d00:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
10002d02:	2317      	movs	r3, #23
10002d04:	18fb      	adds	r3, r7, r3
10002d06:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Init() api */
10002d08:	1c18      	adds	r0, r3, #0
10002d0a:	46bd      	mov	sp, r7
10002d0c:	b007      	add	sp, #28
10002d0e:	bd90      	pop	{r4, r7, pc}

10002d10 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
10002d10:	b580      	push	{r7, lr}
10002d12:	b082      	sub	sp, #8
10002d14:	af00      	add	r7, sp, #0
10002d16:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
10002d18:	687b      	ldr	r3, [r7, #4]
10002d1a:	681b      	ldr	r3, [r3, #0]
10002d1c:	799b      	ldrb	r3, [r3, #6]
10002d1e:	2b00      	cmp	r3, #0
10002d20:	d00f      	beq.n	10002d42 <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002d22:	687b      	ldr	r3, [r7, #4]
10002d24:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
10002d26:	687b      	ldr	r3, [r7, #4]
10002d28:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002d2a:	7b5b      	ldrb	r3, [r3, #13]
10002d2c:	1c10      	adds	r0, r2, #0
10002d2e:	2100      	movs	r1, #0
10002d30:	1c1a      	adds	r2, r3, #0
10002d32:	f7fe fed1 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002d36:	687b      	ldr	r3, [r7, #4]
10002d38:	689b      	ldr	r3, [r3, #8]
10002d3a:	1c18      	adds	r0, r3, #0
10002d3c:	2100      	movs	r1, #0
10002d3e:	f7ff ff1d 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
10002d42:	687b      	ldr	r3, [r7, #4]
10002d44:	681b      	ldr	r3, [r3, #0]
10002d46:	79db      	ldrb	r3, [r3, #7]
10002d48:	2b00      	cmp	r3, #0
10002d4a:	d00f      	beq.n	10002d6c <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002d4c:	687b      	ldr	r3, [r7, #4]
10002d4e:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
10002d50:	687b      	ldr	r3, [r7, #4]
10002d52:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002d54:	7b9b      	ldrb	r3, [r3, #14]
10002d56:	1c10      	adds	r0, r2, #0
10002d58:	2102      	movs	r1, #2
10002d5a:	1c1a      	adds	r2, r3, #0
10002d5c:	f7fe febc 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10002d60:	687b      	ldr	r3, [r7, #4]
10002d62:	689b      	ldr	r3, [r3, #8]
10002d64:	1c18      	adds	r0, r3, #0
10002d66:	2102      	movs	r1, #2
10002d68:	f7ff ff08 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
10002d6c:	687b      	ldr	r3, [r7, #4]
10002d6e:	681b      	ldr	r3, [r3, #0]
10002d70:	7a1b      	ldrb	r3, [r3, #8]
10002d72:	2b00      	cmp	r3, #0
10002d74:	d00f      	beq.n	10002d96 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10002d76:	687b      	ldr	r3, [r7, #4]
10002d78:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
10002d7a:	687b      	ldr	r3, [r7, #4]
10002d7c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10002d7e:	7bdb      	ldrb	r3, [r3, #15]
10002d80:	1c10      	adds	r0, r2, #0
10002d82:	2103      	movs	r1, #3
10002d84:	1c1a      	adds	r2, r3, #0
10002d86:	f7fe fea7 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
10002d8a:	687b      	ldr	r3, [r7, #4]
10002d8c:	689b      	ldr	r3, [r3, #8]
10002d8e:	1c18      	adds	r0, r3, #0
10002d90:	2103      	movs	r1, #3
10002d92:	f7ff fef3 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
10002d96:	687b      	ldr	r3, [r7, #4]
10002d98:	681b      	ldr	r3, [r3, #0]
10002d9a:	7a5b      	ldrb	r3, [r3, #9]
10002d9c:	2b00      	cmp	r3, #0
10002d9e:	d00f      	beq.n	10002dc0 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10002da0:	687b      	ldr	r3, [r7, #4]
10002da2:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
10002da4:	687b      	ldr	r3, [r7, #4]
10002da6:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10002da8:	7c1b      	ldrb	r3, [r3, #16]
10002daa:	1c10      	adds	r0, r2, #0
10002dac:	2101      	movs	r1, #1
10002dae:	1c1a      	adds	r2, r3, #0
10002db0:	f7fe fe92 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
10002db4:	687b      	ldr	r3, [r7, #4]
10002db6:	689b      	ldr	r3, [r3, #8]
10002db8:	1c18      	adds	r0, r3, #0
10002dba:	2101      	movs	r1, #1
10002dbc:	f7ff fede 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10002dc0:	687b      	ldr	r3, [r7, #4]
10002dc2:	681b      	ldr	r3, [r3, #0]
10002dc4:	7a9b      	ldrb	r3, [r3, #10]
10002dc6:	2b00      	cmp	r3, #0
10002dc8:	d00f      	beq.n	10002dea <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10002dca:	687b      	ldr	r3, [r7, #4]
10002dcc:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
10002dce:	687b      	ldr	r3, [r7, #4]
10002dd0:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10002dd2:	7c5b      	ldrb	r3, [r3, #17]
10002dd4:	1c10      	adds	r0, r2, #0
10002dd6:	2108      	movs	r1, #8
10002dd8:	1c1a      	adds	r2, r3, #0
10002dda:	f7fe fe7d 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
10002dde:	687b      	ldr	r3, [r7, #4]
10002de0:	689b      	ldr	r3, [r3, #8]
10002de2:	1c18      	adds	r0, r3, #0
10002de4:	2108      	movs	r1, #8
10002de6:	f7ff fec9 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
10002dea:	687b      	ldr	r3, [r7, #4]
10002dec:	681b      	ldr	r3, [r3, #0]
10002dee:	7adb      	ldrb	r3, [r3, #11]
10002df0:	2b00      	cmp	r3, #0
10002df2:	d00f      	beq.n	10002e14 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
10002df4:	687b      	ldr	r3, [r7, #4]
10002df6:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
10002df8:	687b      	ldr	r3, [r7, #4]
10002dfa:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
10002dfc:	7c9b      	ldrb	r3, [r3, #18]
10002dfe:	1c10      	adds	r0, r2, #0
10002e00:	2109      	movs	r1, #9
10002e02:	1c1a      	adds	r2, r3, #0
10002e04:	f7fe fe68 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	689b      	ldr	r3, [r3, #8]
10002e0c:	1c18      	adds	r0, r3, #0
10002e0e:	2109      	movs	r1, #9
10002e10:	f7ff feb4 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
10002e14:	687b      	ldr	r3, [r7, #4]
10002e16:	681b      	ldr	r3, [r3, #0]
10002e18:	7b1b      	ldrb	r3, [r3, #12]
10002e1a:	2b00      	cmp	r3, #0
10002e1c:	d00f      	beq.n	10002e3e <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
10002e1e:	687b      	ldr	r3, [r7, #4]
10002e20:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
10002e22:	687b      	ldr	r3, [r7, #4]
10002e24:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
10002e26:	7cdb      	ldrb	r3, [r3, #19]
10002e28:	1c10      	adds	r0, r2, #0
10002e2a:	210a      	movs	r1, #10
10002e2c:	1c1a      	adds	r2, r3, #0
10002e2e:	f7fe fe53 	bl	10001ad8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
10002e32:	687b      	ldr	r3, [r7, #4]
10002e34:	689b      	ldr	r3, [r3, #8]
10002e36:	1c18      	adds	r0, r3, #0
10002e38:	210a      	movs	r1, #10
10002e3a:	f7ff fe9f 	bl	10002b7c <XMC_CCU4_SLICE_EnableEvent>
  }
}
10002e3e:	46bd      	mov	sp, r7
10002e40:	b002      	add	sp, #8
10002e42:	bd80      	pop	{r7, pc}

10002e44 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
10002e44:	b590      	push	{r4, r7, lr}
10002e46:	b083      	sub	sp, #12
10002e48:	af00      	add	r7, sp, #0
10002e4a:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10002e4c:	687b      	ldr	r3, [r7, #4]
10002e4e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10002e50:	687b      	ldr	r3, [r7, #4]
10002e52:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10002e54:	695b      	ldr	r3, [r3, #20]
10002e56:	1c10      	adds	r0, r2, #0
10002e58:	2101      	movs	r1, #1
10002e5a:	1c1a      	adds	r2, r3, #0
10002e5c:	f7fe fdae 	bl	100019bc <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10002e60:	687b      	ldr	r3, [r7, #4]
10002e62:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10002e64:	687b      	ldr	r3, [r7, #4]
10002e66:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10002e68:	699b      	ldr	r3, [r3, #24]
10002e6a:	1c10      	adds	r0, r2, #0
10002e6c:	2102      	movs	r1, #2
10002e6e:	1c1a      	adds	r2, r3, #0
10002e70:	f7fe fda4 	bl	100019bc <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10002e74:	687b      	ldr	r3, [r7, #4]
10002e76:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
10002e78:	687b      	ldr	r3, [r7, #4]
10002e7a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10002e7c:	69db      	ldr	r3, [r3, #28]
10002e7e:	1c10      	adds	r0, r2, #0
10002e80:	2103      	movs	r1, #3
10002e82:	1c1a      	adds	r2, r3, #0
10002e84:	f7fe fd9a 	bl	100019bc <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10002e88:	687b      	ldr	r3, [r7, #4]
10002e8a:	681b      	ldr	r3, [r3, #0]
10002e8c:	2220      	movs	r2, #32
10002e8e:	5c9b      	ldrb	r3, [r3, r2]
10002e90:	2b00      	cmp	r3, #0
10002e92:	d00c      	beq.n	10002eae <PWM_CCU4_lConfigure_Events+0x6a>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10002e94:	687b      	ldr	r3, [r7, #4]
10002e96:	6898      	ldr	r0, [r3, #8]
10002e98:	687b      	ldr	r3, [r7, #4]
10002e9a:	681b      	ldr	r3, [r3, #0]
10002e9c:	2220      	movs	r2, #32
10002e9e:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
10002ea0:	687b      	ldr	r3, [r7, #4]
10002ea2:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10002ea4:	2221      	movs	r2, #33	; 0x21
10002ea6:	5c9b      	ldrb	r3, [r3, r2]
10002ea8:	1c1a      	adds	r2, r3, #0
10002eaa:	f7fe fb99 	bl	100015e0 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
10002eae:	687b      	ldr	r3, [r7, #4]
10002eb0:	681b      	ldr	r3, [r3, #0]
10002eb2:	2222      	movs	r2, #34	; 0x22
10002eb4:	5c9b      	ldrb	r3, [r3, r2]
10002eb6:	2b00      	cmp	r3, #0
10002eb8:	d00c      	beq.n	10002ed4 <PWM_CCU4_lConfigure_Events+0x90>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10002eba:	687b      	ldr	r3, [r7, #4]
10002ebc:	6898      	ldr	r0, [r3, #8]
10002ebe:	687b      	ldr	r3, [r7, #4]
10002ec0:	681b      	ldr	r3, [r3, #0]
10002ec2:	2222      	movs	r2, #34	; 0x22
10002ec4:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10002ec6:	687b      	ldr	r3, [r7, #4]
10002ec8:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10002eca:	2223      	movs	r2, #35	; 0x23
10002ecc:	5c9b      	ldrb	r3, [r3, r2]
10002ece:	1c1a      	adds	r2, r3, #0
10002ed0:	f7fe fbba 	bl	10001648 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10002ed4:	687b      	ldr	r3, [r7, #4]
10002ed6:	681b      	ldr	r3, [r3, #0]
10002ed8:	2224      	movs	r2, #36	; 0x24
10002eda:	5c9b      	ldrb	r3, [r3, r2]
10002edc:	2b00      	cmp	r3, #0
10002ede:	d009      	beq.n	10002ef4 <PWM_CCU4_lConfigure_Events+0xb0>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10002ee0:	687b      	ldr	r3, [r7, #4]
10002ee2:	6899      	ldr	r1, [r3, #8]
10002ee4:	687b      	ldr	r3, [r7, #4]
10002ee6:	681b      	ldr	r3, [r3, #0]
10002ee8:	2224      	movs	r2, #36	; 0x24
10002eea:	5c9b      	ldrb	r3, [r3, r2]
10002eec:	1c08      	adds	r0, r1, #0
10002eee:	1c19      	adds	r1, r3, #0
10002ef0:	f7fe fc7c 	bl	100017ec <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
10002ef4:	687b      	ldr	r3, [r7, #4]
10002ef6:	681b      	ldr	r3, [r3, #0]
10002ef8:	2225      	movs	r2, #37	; 0x25
10002efa:	5c9b      	ldrb	r3, [r3, r2]
10002efc:	2b00      	cmp	r3, #0
10002efe:	d009      	beq.n	10002f14 <PWM_CCU4_lConfigure_Events+0xd0>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
10002f00:	687b      	ldr	r3, [r7, #4]
10002f02:	6899      	ldr	r1, [r3, #8]
10002f04:	687b      	ldr	r3, [r7, #4]
10002f06:	681b      	ldr	r3, [r3, #0]
10002f08:	2225      	movs	r2, #37	; 0x25
10002f0a:	5c9b      	ldrb	r3, [r3, r2]
10002f0c:	1c08      	adds	r0, r1, #0
10002f0e:	1c19      	adds	r1, r3, #0
10002f10:	f7fe fc50 	bl	100017b4 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
10002f14:	687b      	ldr	r3, [r7, #4]
10002f16:	681b      	ldr	r3, [r3, #0]
10002f18:	2226      	movs	r2, #38	; 0x26
10002f1a:	5c9b      	ldrb	r3, [r3, r2]
10002f1c:	2b00      	cmp	r3, #0
10002f1e:	d009      	beq.n	10002f34 <PWM_CCU4_lConfigure_Events+0xf0>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
10002f20:	687b      	ldr	r3, [r7, #4]
10002f22:	6899      	ldr	r1, [r3, #8]
10002f24:	687b      	ldr	r3, [r7, #4]
10002f26:	681b      	ldr	r3, [r3, #0]
10002f28:	2226      	movs	r2, #38	; 0x26
10002f2a:	5c9b      	ldrb	r3, [r3, r2]
10002f2c:	1c08      	adds	r0, r1, #0
10002f2e:	1c19      	adds	r1, r3, #0
10002f30:	f7fe fc24 	bl	1000177c <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
10002f34:	687b      	ldr	r3, [r7, #4]
10002f36:	681b      	ldr	r3, [r3, #0]
10002f38:	2227      	movs	r2, #39	; 0x27
10002f3a:	5c9b      	ldrb	r3, [r3, r2]
10002f3c:	2b00      	cmp	r3, #0
10002f3e:	d009      	beq.n	10002f54 <PWM_CCU4_lConfigure_Events+0x110>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10002f40:	687b      	ldr	r3, [r7, #4]
10002f42:	6899      	ldr	r1, [r3, #8]
10002f44:	687b      	ldr	r3, [r7, #4]
10002f46:	681b      	ldr	r3, [r3, #0]
10002f48:	2227      	movs	r2, #39	; 0x27
10002f4a:	5c9b      	ldrb	r3, [r3, r2]
10002f4c:	1c08      	adds	r0, r1, #0
10002f4e:	1c19      	adds	r1, r3, #0
10002f50:	f7fe fbac 	bl	100016ac <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10002f54:	687b      	ldr	r3, [r7, #4]
10002f56:	681b      	ldr	r3, [r3, #0]
10002f58:	2228      	movs	r2, #40	; 0x28
10002f5a:	5c9b      	ldrb	r3, [r3, r2]
10002f5c:	2b00      	cmp	r3, #0
10002f5e:	d010      	beq.n	10002f82 <PWM_CCU4_lConfigure_Events+0x13e>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	6898      	ldr	r0, [r3, #8]
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	681b      	ldr	r3, [r3, #0]
10002f68:	2228      	movs	r2, #40	; 0x28
10002f6a:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10002f6c:	687b      	ldr	r3, [r7, #4]
10002f6e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002f70:	2229      	movs	r2, #41	; 0x29
10002f72:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10002f74:	687b      	ldr	r3, [r7, #4]
10002f76:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10002f78:	222a      	movs	r2, #42	; 0x2a
10002f7a:	5c9b      	ldrb	r3, [r3, r2]
10002f7c:	1c22      	adds	r2, r4, #0
10002f7e:	f7fe fbb1 	bl	100016e4 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10002f82:	687b      	ldr	r3, [r7, #4]
10002f84:	681b      	ldr	r3, [r3, #0]
10002f86:	222e      	movs	r2, #46	; 0x2e
10002f88:	5c9b      	ldrb	r3, [r3, r2]
10002f8a:	2b03      	cmp	r3, #3
10002f8c:	d117      	bne.n	10002fbe <PWM_CCU4_lConfigure_Events+0x17a>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10002f8e:	687b      	ldr	r3, [r7, #4]
10002f90:	6898      	ldr	r0, [r3, #8]
10002f92:	687b      	ldr	r3, [r7, #4]
10002f94:	681b      	ldr	r3, [r3, #0]
10002f96:	2230      	movs	r2, #48	; 0x30
10002f98:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
10002f9a:	687b      	ldr	r3, [r7, #4]
10002f9c:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10002f9e:	222f      	movs	r2, #47	; 0x2f
10002fa0:	5c9b      	ldrb	r3, [r3, r2]
10002fa2:	1c1a      	adds	r2, r3, #0
10002fa4:	f7fe fc56 	bl	10001854 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
10002fa8:	687b      	ldr	r3, [r7, #4]
10002faa:	681b      	ldr	r3, [r3, #0]
10002fac:	222d      	movs	r2, #45	; 0x2d
10002fae:	5c9b      	ldrb	r3, [r3, r2]
10002fb0:	2b00      	cmp	r3, #0
10002fb2:	d004      	beq.n	10002fbe <PWM_CCU4_lConfigure_Events+0x17a>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
10002fb4:	687b      	ldr	r3, [r7, #4]
10002fb6:	689b      	ldr	r3, [r3, #8]
10002fb8:	1c18      	adds	r0, r3, #0
10002fba:	f7ff fd8b 	bl	10002ad4 <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10002fbe:	687b      	ldr	r3, [r7, #4]
10002fc0:	681b      	ldr	r3, [r3, #0]
10002fc2:	222b      	movs	r2, #43	; 0x2b
10002fc4:	5c9b      	ldrb	r3, [r3, r2]
10002fc6:	2b02      	cmp	r3, #2
10002fc8:	d117      	bne.n	10002ffa <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
10002fca:	687b      	ldr	r3, [r7, #4]
10002fcc:	681b      	ldr	r3, [r3, #0]
10002fce:	222c      	movs	r2, #44	; 0x2c
10002fd0:	5c9b      	ldrb	r3, [r3, r2]
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10002fd2:	2b03      	cmp	r3, #3
10002fd4:	d111      	bne.n	10002ffa <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002fd6:	687b      	ldr	r3, [r7, #4]
10002fd8:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
10002fda:	687b      	ldr	r3, [r7, #4]
10002fdc:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002fde:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
10002fe0:	687b      	ldr	r3, [r7, #4]
10002fe2:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10002fe4:	69db      	ldr	r3, [r3, #28]
10002fe6:	1c08      	adds	r0, r1, #0
10002fe8:	1c11      	adds	r1, r2, #0
10002fea:	1c1a      	adds	r2, r3, #0
10002fec:	f7fe fc78 	bl	100018e0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
10002ff0:	687b      	ldr	r3, [r7, #4]
10002ff2:	689b      	ldr	r3, [r3, #8]
10002ff4:	1c18      	adds	r0, r3, #0
10002ff6:	f7fe fc15 	bl	10001824 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
10002ffa:	46bd      	mov	sp, r7
10002ffc:	b003      	add	sp, #12
10002ffe:	bd90      	pop	{r4, r7, pc}

10003000 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
10003000:	b580      	push	{r7, lr}
10003002:	b084      	sub	sp, #16
10003004:	af00      	add	r7, sp, #0
10003006:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
10003008:	230f      	movs	r3, #15
1000300a:	18fb      	adds	r3, r7, r3
1000300c:	2201      	movs	r2, #1
1000300e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
10003010:	687b      	ldr	r3, [r7, #4]
10003012:	7f1b      	ldrb	r3, [r3, #28]
10003014:	2b01      	cmp	r3, #1
10003016:	d003      	beq.n	10003020 <PWM_CCU4_Start+0x20>
10003018:	687b      	ldr	r3, [r7, #4]
1000301a:	7f1b      	ldrb	r3, [r3, #28]
1000301c:	2b03      	cmp	r3, #3
1000301e:	d119      	bne.n	10003054 <PWM_CCU4_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
10003020:	687b      	ldr	r3, [r7, #4]
10003022:	685a      	ldr	r2, [r3, #4]
10003024:	687b      	ldr	r3, [r7, #4]
10003026:	7b5b      	ldrb	r3, [r3, #13]
10003028:	1c10      	adds	r0, r2, #0
1000302a:	1c19      	adds	r1, r3, #0
1000302c:	f7ff fd2a 	bl	10002a84 <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
10003030:	687b      	ldr	r3, [r7, #4]
10003032:	681b      	ldr	r3, [r3, #0]
10003034:	2220      	movs	r2, #32
10003036:	5c9b      	ldrb	r3, [r3, r2]
10003038:	2b00      	cmp	r3, #0
1000303a:	d104      	bne.n	10003046 <PWM_CCU4_Start+0x46>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000303c:	687b      	ldr	r3, [r7, #4]
1000303e:	689b      	ldr	r3, [r3, #8]
10003040:	1c18      	adds	r0, r3, #0
10003042:	f7ff fd55 	bl	10002af0 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
10003046:	687b      	ldr	r3, [r7, #4]
10003048:	2202      	movs	r2, #2
1000304a:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
1000304c:	230f      	movs	r3, #15
1000304e:	18fb      	adds	r3, r7, r3
10003050:	2200      	movs	r2, #0
10003052:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
10003054:	230f      	movs	r3, #15
10003056:	18fb      	adds	r3, r7, r3
10003058:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Start() api */
1000305a:	1c18      	adds	r0, r3, #0
1000305c:	46bd      	mov	sp, r7
1000305e:	b004      	add	sp, #16
10003060:	bd80      	pop	{r7, pc}
10003062:	46c0      	nop			; (mov r8, r8)

10003064 <PWM_CCU4_Stop>:
/**********************************************************************************************************/
/*Stops the CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_Stop(PWM_CCU4_t* handle_ptr)
{
10003064:	b580      	push	{r7, lr}
10003066:	b084      	sub	sp, #16
10003068:	af00      	add	r7, sp, #0
1000306a:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
1000306c:	230f      	movs	r3, #15
1000306e:	18fb      	adds	r3, r7, r3
10003070:	2201      	movs	r2, #1
10003072:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
10003074:	687b      	ldr	r3, [r7, #4]
10003076:	7f1b      	ldrb	r3, [r3, #28]
10003078:	2b00      	cmp	r3, #0
1000307a:	d018      	beq.n	100030ae <PWM_CCU4_Stop+0x4a>
  {
    XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
1000307c:	687b      	ldr	r3, [r7, #4]
1000307e:	689b      	ldr	r3, [r3, #8]
10003080:	1c18      	adds	r0, r3, #0
10003082:	f7ff fd3f 	bl	10002b04 <XMC_CCU4_SLICE_StopTimer>
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
10003086:	687b      	ldr	r3, [r7, #4]
10003088:	689b      	ldr	r3, [r3, #8]
1000308a:	1c18      	adds	r0, r3, #0
1000308c:	f7ff fd44 	bl	10002b18 <XMC_CCU4_SLICE_ClearTimer>
    XMC_CCU4_DisableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
10003090:	687b      	ldr	r3, [r7, #4]
10003092:	685a      	ldr	r2, [r3, #4]
10003094:	687b      	ldr	r3, [r7, #4]
10003096:	7b5b      	ldrb	r3, [r3, #13]
10003098:	1c10      	adds	r0, r2, #0
1000309a:	1c19      	adds	r1, r3, #0
1000309c:	f7ff fd06 	bl	10002aac <XMC_CCU4_DisableClock>

    handle_ptr->state = PWM_CCU4_STATE_STOPPED;
100030a0:	687b      	ldr	r3, [r7, #4]
100030a2:	2203      	movs	r2, #3
100030a4:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
100030a6:	230f      	movs	r3, #15
100030a8:	18fb      	adds	r3, r7, r3
100030aa:	2200      	movs	r2, #0
100030ac:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Stop:stop PWM");
  }
  return (status);
100030ae:	230f      	movs	r3, #15
100030b0:	18fb      	adds	r3, r7, r3
100030b2:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU4_Stop() api */
100030b4:	1c18      	adds	r0, r3, #0
100030b6:	46bd      	mov	sp, r7
100030b8:	b004      	add	sp, #16
100030ba:	bd80      	pop	{r7, pc}

100030bc <PWM_CCU4_SetFreq>:

/**********************************************************************************************************/

/*Sets the frequency for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetFreq(PWM_CCU4_t* handle_ptr, uint32_t pwm_freq_hz)
{
100030bc:	b580      	push	{r7, lr}
100030be:	b088      	sub	sp, #32
100030c0:	af00      	add	r7, sp, #0
100030c2:	6078      	str	r0, [r7, #4]
100030c4:	6039      	str	r1, [r7, #0]
  uint32_t frequency_tclk;
  uint32_t period;
  uint32_t duty;
  uint16_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
100030c6:	231f      	movs	r3, #31
100030c8:	18fb      	adds	r3, r7, r3
100030ca:	2201      	movs	r2, #1
100030cc:	701a      	strb	r2, [r3, #0]
  frequency_tclk = 0U;
100030ce:	2300      	movs	r3, #0
100030d0:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_CCU4_SetFreq:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
100030d2:	687b      	ldr	r3, [r7, #4]
100030d4:	7f1b      	ldrb	r3, [r3, #28]
100030d6:	2b00      	cmp	r3, #0
100030d8:	d053      	beq.n	10003182 <PWM_CCU4_SetFreq+0xc6>
  {
    if (0U == pwm_freq_hz)
100030da:	683b      	ldr	r3, [r7, #0]
100030dc:	2b00      	cmp	r3, #0
100030de:	d050      	beq.n	10003182 <PWM_CCU4_SetFreq+0xc6>
    {
      XMC_DEBUG("PWM_CCU4_SetFreq:cannot set frequency 0Hz");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
100030e0:	687b      	ldr	r3, [r7, #4]
100030e2:	6a1b      	ldr	r3, [r3, #32]
100030e4:	617b      	str	r3, [r7, #20]
      period = frequency_tclk / pwm_freq_hz;
100030e6:	6978      	ldr	r0, [r7, #20]
100030e8:	6839      	ldr	r1, [r7, #0]
100030ea:	f002 fb33 	bl	10005754 <__aeabi_uidiv>
100030ee:	1c03      	adds	r3, r0, #0
100030f0:	61bb      	str	r3, [r7, #24]

      if ((uint32_t) XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->timer_mode)
100030f2:	687b      	ldr	r3, [r7, #4]
100030f4:	681b      	ldr	r3, [r3, #0]
100030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100030f8:	781b      	ldrb	r3, [r3, #0]
100030fa:	2201      	movs	r2, #1
100030fc:	4013      	ands	r3, r2
100030fe:	b2db      	uxtb	r3, r3
10003100:	2b00      	cmp	r3, #0
10003102:	d002      	beq.n	1000310a <PWM_CCU4_SetFreq+0x4e>
      {
        period = period >> 1U;/*divide by 2*/
10003104:	69bb      	ldr	r3, [r7, #24]
10003106:	085b      	lsrs	r3, r3, #1
10003108:	61bb      	str	r3, [r7, #24]
      }

      if ((period != 0U) && (period <= PWM_CCU4_MAX_TIMER_COUNT))
1000310a:	69bb      	ldr	r3, [r7, #24]
1000310c:	2b00      	cmp	r3, #0
1000310e:	d038      	beq.n	10003182 <PWM_CCU4_SetFreq+0xc6>
10003110:	69bb      	ldr	r3, [r7, #24]
10003112:	4a1f      	ldr	r2, [pc, #124]	; (10003190 <PWM_CCU4_SetFreq+0xd4>)
10003114:	4293      	cmp	r3, r2
10003116:	d834      	bhi.n	10003182 <PWM_CCU4_SetFreq+0xc6>
      {
        /*Calculate the current duty cycle in no-timer concatenation mode*/
        duty = handle_ptr->sym_duty;
10003118:	687b      	ldr	r3, [r7, #4]
1000311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000311c:	613b      	str	r3, [r7, #16]

        duty = (PWM_CCU4_DUTY_FULL_SCALE - duty);
1000311e:	693b      	ldr	r3, [r7, #16]
10003120:	4a1c      	ldr	r2, [pc, #112]	; (10003194 <PWM_CCU4_SetFreq+0xd8>)
10003122:	1ad3      	subs	r3, r2, r3
10003124:	613b      	str	r3, [r7, #16]
        duty = duty * period;
10003126:	693b      	ldr	r3, [r7, #16]
10003128:	69ba      	ldr	r2, [r7, #24]
1000312a:	4353      	muls	r3, r2
1000312c:	613b      	str	r3, [r7, #16]
        duty = duty / PWM_CCU4_DUTY_FULL_SCALE;
1000312e:	693b      	ldr	r3, [r7, #16]
10003130:	1c18      	adds	r0, r3, #0
10003132:	4918      	ldr	r1, [pc, #96]	; (10003194 <PWM_CCU4_SetFreq+0xd8>)
10003134:	f002 fb0e 	bl	10005754 <__aeabi_uidiv>
10003138:	1c03      	adds	r3, r0, #0
1000313a:	613b      	str	r3, [r7, #16]

        compare = (uint16_t) duty;
1000313c:	230e      	movs	r3, #14
1000313e:	18fb      	adds	r3, r7, r3
10003140:	693a      	ldr	r2, [r7, #16]
10003142:	801a      	strh	r2, [r3, #0]

        XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period - 1U));
10003144:	687b      	ldr	r3, [r7, #4]
10003146:	689a      	ldr	r2, [r3, #8]
10003148:	69bb      	ldr	r3, [r7, #24]
1000314a:	b29b      	uxth	r3, r3
1000314c:	3b01      	subs	r3, #1
1000314e:	b29b      	uxth	r3, r3
10003150:	1c10      	adds	r0, r2, #0
10003152:	1c19      	adds	r1, r3, #0
10003154:	f7ff fcea 	bl	10002b2c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
        XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, compare);
10003158:	687b      	ldr	r3, [r7, #4]
1000315a:	689a      	ldr	r2, [r3, #8]
1000315c:	230e      	movs	r3, #14
1000315e:	18fb      	adds	r3, r7, r3
10003160:	881b      	ldrh	r3, [r3, #0]
10003162:	1c10      	adds	r0, r2, #0
10003164:	1c19      	adds	r1, r3, #0
10003166:	f7ff fcef 	bl	10002b48 <XMC_CCU4_SLICE_SetTimerCompareMatch>
        XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
1000316a:	687b      	ldr	r3, [r7, #4]
1000316c:	685a      	ldr	r2, [r3, #4]
1000316e:	687b      	ldr	r3, [r7, #4]
10003170:	691b      	ldr	r3, [r3, #16]
10003172:	1c10      	adds	r0, r2, #0
10003174:	1c19      	adds	r1, r3, #0
10003176:	f7ff fcf5 	bl	10002b64 <XMC_CCU4_EnableShadowTransfer>
        XMC_DEBUG("PWM_CCU4_SetFreq:frequency set");
        status = PWM_CCU4_STATUS_SUCCESS;
1000317a:	231f      	movs	r3, #31
1000317c:	18fb      	adds	r3, r7, r3
1000317e:	2200      	movs	r2, #0
10003180:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return (status);
10003182:	231f      	movs	r3, #31
10003184:	18fb      	adds	r3, r7, r3
10003186:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU4_SetFreqSymmetric() api */
10003188:	1c18      	adds	r0, r3, #0
1000318a:	46bd      	mov	sp, r7
1000318c:	b008      	add	sp, #32
1000318e:	bd80      	pop	{r7, pc}
10003190:	0000ffff 	.word	0x0000ffff
10003194:	00002710 	.word	0x00002710

10003198 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003198:	b580      	push	{r7, lr}
1000319a:	b082      	sub	sp, #8
1000319c:	af00      	add	r7, sp, #0
1000319e:	6078      	str	r0, [r7, #4]
100031a0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100031a2:	687b      	ldr	r3, [r7, #4]
100031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100031a6:	683a      	ldr	r2, [r7, #0]
100031a8:	43d2      	mvns	r2, r2
100031aa:	401a      	ands	r2, r3
100031ac:	687b      	ldr	r3, [r7, #4]
100031ae:	641a      	str	r2, [r3, #64]	; 0x40
}
100031b0:	46bd      	mov	sp, r7
100031b2:	b002      	add	sp, #8
100031b4:	bd80      	pop	{r7, pc}
100031b6:	46c0      	nop			; (mov r8, r8)

100031b8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100031b8:	b580      	push	{r7, lr}
100031ba:	b082      	sub	sp, #8
100031bc:	af00      	add	r7, sp, #0
100031be:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100031c0:	687b      	ldr	r3, [r7, #4]
100031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100031c4:	b2db      	uxtb	r3, r3
100031c6:	227f      	movs	r2, #127	; 0x7f
100031c8:	4393      	bics	r3, r2
100031ca:	b2db      	uxtb	r3, r3
}
100031cc:	1c18      	adds	r0, r3, #0
100031ce:	46bd      	mov	sp, r7
100031d0:	b002      	add	sp, #8
100031d2:	bd80      	pop	{r7, pc}

100031d4 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
100031d4:	b580      	push	{r7, lr}
100031d6:	b082      	sub	sp, #8
100031d8:	af00      	add	r7, sp, #0
100031da:	6078      	str	r0, [r7, #4]
100031dc:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
100031de:	683b      	ldr	r3, [r7, #0]
100031e0:	2280      	movs	r2, #128	; 0x80
100031e2:	0252      	lsls	r2, r2, #9
100031e4:	409a      	lsls	r2, r3
100031e6:	687b      	ldr	r3, [r7, #4]
100031e8:	669a      	str	r2, [r3, #104]	; 0x68
}
100031ea:	46bd      	mov	sp, r7
100031ec:	b002      	add	sp, #8
100031ee:	bd80      	pop	{r7, pc}

100031f0 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100031f0:	b580      	push	{r7, lr}
100031f2:	b082      	sub	sp, #8
100031f4:	af00      	add	r7, sp, #0
100031f6:	6078      	str	r0, [r7, #4]
100031f8:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
100031fa:	687a      	ldr	r2, [r7, #4]
100031fc:	2384      	movs	r3, #132	; 0x84
100031fe:	005b      	lsls	r3, r3, #1
10003200:	58d2      	ldr	r2, [r2, r3]
10003202:	683b      	ldr	r3, [r7, #0]
10003204:	431a      	orrs	r2, r3
10003206:	1c11      	adds	r1, r2, #0
10003208:	687a      	ldr	r2, [r7, #4]
1000320a:	2384      	movs	r3, #132	; 0x84
1000320c:	005b      	lsls	r3, r3, #1
1000320e:	50d1      	str	r1, [r2, r3]
}
10003210:	46bd      	mov	sp, r7
10003212:	b002      	add	sp, #8
10003214:	bd80      	pop	{r7, pc}
10003216:	46c0      	nop			; (mov r8, r8)

10003218 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003218:	b580      	push	{r7, lr}
1000321a:	b082      	sub	sp, #8
1000321c:	af00      	add	r7, sp, #0
1000321e:	6078      	str	r0, [r7, #4]
10003220:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10003222:	687a      	ldr	r2, [r7, #4]
10003224:	2384      	movs	r3, #132	; 0x84
10003226:	005b      	lsls	r3, r3, #1
10003228:	58d3      	ldr	r3, [r2, r3]
1000322a:	683a      	ldr	r2, [r7, #0]
1000322c:	43d2      	mvns	r2, r2
1000322e:	401a      	ands	r2, r3
10003230:	1c11      	adds	r1, r2, #0
10003232:	687a      	ldr	r2, [r7, #4]
10003234:	2384      	movs	r3, #132	; 0x84
10003236:	005b      	lsls	r3, r3, #1
10003238:	50d1      	str	r1, [r2, r3]
}
1000323a:	46bd      	mov	sp, r7
1000323c:	b002      	add	sp, #8
1000323e:	bd80      	pop	{r7, pc}

10003240 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003240:	b580      	push	{r7, lr}
10003242:	b082      	sub	sp, #8
10003244:	af00      	add	r7, sp, #0
10003246:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10003248:	687a      	ldr	r2, [r7, #4]
1000324a:	238a      	movs	r3, #138	; 0x8a
1000324c:	005b      	lsls	r3, r3, #1
1000324e:	58d2      	ldr	r2, [r2, r3]
10003250:	2380      	movs	r3, #128	; 0x80
10003252:	015b      	lsls	r3, r3, #5
10003254:	4013      	ands	r3, r2
10003256:	1e5a      	subs	r2, r3, #1
10003258:	4193      	sbcs	r3, r2
1000325a:	b2db      	uxtb	r3, r3
}
1000325c:	1c18      	adds	r0, r3, #0
1000325e:	46bd      	mov	sp, r7
10003260:	b002      	add	sp, #8
10003262:	bd80      	pop	{r7, pc}

10003264 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003264:	b580      	push	{r7, lr}
10003266:	b082      	sub	sp, #8
10003268:	af00      	add	r7, sp, #0
1000326a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000326c:	687a      	ldr	r2, [r7, #4]
1000326e:	238a      	movs	r3, #138	; 0x8a
10003270:	005b      	lsls	r3, r3, #1
10003272:	58d2      	ldr	r2, [r2, r3]
10003274:	2380      	movs	r3, #128	; 0x80
10003276:	011b      	lsls	r3, r3, #4
10003278:	4013      	ands	r3, r2
1000327a:	1e5a      	subs	r2, r3, #1
1000327c:	4193      	sbcs	r3, r2
1000327e:	b2db      	uxtb	r3, r3
}
10003280:	1c18      	adds	r0, r3, #0
10003282:	46bd      	mov	sp, r7
10003284:	b002      	add	sp, #8
10003286:	bd80      	pop	{r7, pc}

10003288 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003288:	b580      	push	{r7, lr}
1000328a:	b082      	sub	sp, #8
1000328c:	af00      	add	r7, sp, #0
1000328e:	6078      	str	r0, [r7, #4]
10003290:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
10003292:	687a      	ldr	r2, [r7, #4]
10003294:	2386      	movs	r3, #134	; 0x86
10003296:	005b      	lsls	r3, r3, #1
10003298:	58d3      	ldr	r3, [r2, r3]
1000329a:	683a      	ldr	r2, [r7, #0]
1000329c:	43d2      	mvns	r2, r2
1000329e:	401a      	ands	r2, r3
100032a0:	1c11      	adds	r1, r2, #0
100032a2:	687a      	ldr	r2, [r7, #4]
100032a4:	2386      	movs	r3, #134	; 0x86
100032a6:	005b      	lsls	r3, r3, #1
100032a8:	50d1      	str	r1, [r2, r3]
}
100032aa:	46bd      	mov	sp, r7
100032ac:	b002      	add	sp, #8
100032ae:	bd80      	pop	{r7, pc}

100032b0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100032b0:	b580      	push	{r7, lr}
100032b2:	b082      	sub	sp, #8
100032b4:	af00      	add	r7, sp, #0
100032b6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
100032b8:	687a      	ldr	r2, [r7, #4]
100032ba:	238a      	movs	r3, #138	; 0x8a
100032bc:	005b      	lsls	r3, r3, #1
100032be:	58d3      	ldr	r3, [r2, r3]
100032c0:	2208      	movs	r2, #8
100032c2:	4013      	ands	r3, r2
100032c4:	1e5a      	subs	r2, r3, #1
100032c6:	4193      	sbcs	r3, r2
100032c8:	b2db      	uxtb	r3, r3
}
100032ca:	1c18      	adds	r0, r3, #0
100032cc:	46bd      	mov	sp, r7
100032ce:	b002      	add	sp, #8
100032d0:	bd80      	pop	{r7, pc}
100032d2:	46c0      	nop			; (mov r8, r8)

100032d4 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
100032d4:	b580      	push	{r7, lr}
100032d6:	b082      	sub	sp, #8
100032d8:	af00      	add	r7, sp, #0
100032da:	6078      	str	r0, [r7, #4]
100032dc:	1c0a      	adds	r2, r1, #0
100032de:	1cfb      	adds	r3, r7, #3
100032e0:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
100032e2:	1cfb      	adds	r3, r7, #3
100032e4:	781b      	ldrb	r3, [r3, #0]
100032e6:	687a      	ldr	r2, [r7, #4]
100032e8:	1c10      	adds	r0, r2, #0
100032ea:	2110      	movs	r1, #16
100032ec:	1c1a      	adds	r2, r3, #0
100032ee:	f7fe ffd1 	bl	10002294 <XMC_USIC_CH_SetInterruptNodePointer>
}
100032f2:	46bd      	mov	sp, r7
100032f4:	b002      	add	sp, #8
100032f6:	bd80      	pop	{r7, pc}

100032f8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
100032f8:	b580      	push	{r7, lr}
100032fa:	b082      	sub	sp, #8
100032fc:	af00      	add	r7, sp, #0
100032fe:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
10003300:	687b      	ldr	r3, [r7, #4]
10003302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
10003304:	1c18      	adds	r0, r3, #0
10003306:	46bd      	mov	sp, r7
10003308:	b002      	add	sp, #8
1000330a:	bd80      	pop	{r7, pc}

1000330c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
1000330c:	b580      	push	{r7, lr}
1000330e:	b082      	sub	sp, #8
10003310:	af00      	add	r7, sp, #0
10003312:	6078      	str	r0, [r7, #4]
10003314:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10003316:	687b      	ldr	r3, [r7, #4]
10003318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000331a:	683b      	ldr	r3, [r7, #0]
1000331c:	431a      	orrs	r2, r3
1000331e:	687b      	ldr	r3, [r7, #4]
10003320:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003322:	46bd      	mov	sp, r7
10003324:	b002      	add	sp, #8
10003326:	bd80      	pop	{r7, pc}

10003328 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
10003328:	b580      	push	{r7, lr}
1000332a:	b084      	sub	sp, #16
1000332c:	af00      	add	r7, sp, #0
1000332e:	60f8      	str	r0, [r7, #12]
10003330:	60b9      	str	r1, [r7, #8]
10003332:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
10003334:	68fb      	ldr	r3, [r7, #12]
10003336:	6819      	ldr	r1, [r3, #0]
10003338:	68bb      	ldr	r3, [r7, #8]
1000333a:	b2da      	uxtb	r2, r3
1000333c:	687b      	ldr	r3, [r7, #4]
1000333e:	1c08      	adds	r0, r1, #0
10003340:	1c11      	adds	r1, r2, #0
10003342:	1c1a      	adds	r2, r3, #0
10003344:	f7fe ff78 	bl	10002238 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
10003348:	46bd      	mov	sp, r7
1000334a:	b004      	add	sp, #16
1000334c:	bd80      	pop	{r7, pc}
1000334e:	46c0      	nop			; (mov r8, r8)

10003350 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
10003350:	b580      	push	{r7, lr}
10003352:	b082      	sub	sp, #8
10003354:	af00      	add	r7, sp, #0
10003356:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
10003358:	687b      	ldr	r3, [r7, #4]
1000335a:	681b      	ldr	r3, [r3, #0]
1000335c:	1c18      	adds	r0, r3, #0
1000335e:	f7ff ff6f 	bl	10003240 <XMC_USIC_CH_TXFIFO_IsFull>
10003362:	1c03      	adds	r3, r0, #0
}
10003364:	1c18      	adds	r0, r3, #0
10003366:	46bd      	mov	sp, r7
10003368:	b002      	add	sp, #8
1000336a:	bd80      	pop	{r7, pc}

1000336c <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
1000336c:	b580      	push	{r7, lr}
1000336e:	b082      	sub	sp, #8
10003370:	af00      	add	r7, sp, #0
10003372:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
10003374:	687b      	ldr	r3, [r7, #4]
10003376:	681b      	ldr	r3, [r3, #0]
10003378:	1c18      	adds	r0, r3, #0
1000337a:	f7ff ff99 	bl	100032b0 <XMC_USIC_CH_RXFIFO_IsEmpty>
1000337e:	1c03      	adds	r3, r0, #0
}
10003380:	1c18      	adds	r0, r3, #0
10003382:	46bd      	mov	sp, r7
10003384:	b002      	add	sp, #8
10003386:	bd80      	pop	{r7, pc}

10003388 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
10003388:	b580      	push	{r7, lr}
1000338a:	b082      	sub	sp, #8
1000338c:	af00      	add	r7, sp, #0
1000338e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
10003390:	687b      	ldr	r3, [r7, #4]
10003392:	681b      	ldr	r3, [r3, #0]
10003394:	1c18      	adds	r0, r3, #0
10003396:	f7fe fdf7 	bl	10001f88 <XMC_I2C_CH_GetReceivedData>
1000339a:	1c03      	adds	r3, r0, #0
}
1000339c:	1c18      	adds	r0, r3, #0
1000339e:	46bd      	mov	sp, r7
100033a0:	b002      	add	sp, #8
100033a2:	bd80      	pop	{r7, pc}

100033a4 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
100033a4:	b580      	push	{r7, lr}
100033a6:	b082      	sub	sp, #8
100033a8:	af00      	add	r7, sp, #0
100033aa:	6078      	str	r0, [r7, #4]
100033ac:	1c0a      	adds	r2, r1, #0
100033ae:	1cfb      	adds	r3, r7, #3
100033b0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
100033b2:	687b      	ldr	r3, [r7, #4]
100033b4:	681a      	ldr	r2, [r3, #0]
100033b6:	1cfb      	adds	r3, r7, #3
100033b8:	781b      	ldrb	r3, [r3, #0]
100033ba:	1c10      	adds	r0, r2, #0
100033bc:	1c19      	adds	r1, r3, #0
100033be:	f7fe fd61 	bl	10001e84 <XMC_I2C_CH_MasterTransmit>
}
100033c2:	46bd      	mov	sp, r7
100033c4:	b002      	add	sp, #8
100033c6:	bd80      	pop	{r7, pc}

100033c8 <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
100033c8:	b580      	push	{r7, lr}
100033ca:	b082      	sub	sp, #8
100033cc:	af00      	add	r7, sp, #0
100033ce:	6078      	str	r0, [r7, #4]
100033d0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
100033d2:	687b      	ldr	r3, [r7, #4]
100033d4:	681a      	ldr	r2, [r3, #0]
100033d6:	683b      	ldr	r3, [r7, #0]
100033d8:	1c10      	adds	r0, r2, #0
100033da:	1c19      	adds	r1, r3, #0
100033dc:	f7fe fdf4 	bl	10001fc8 <XMC_I2C_CH_EnableEvent>
}
100033e0:	46bd      	mov	sp, r7
100033e2:	b002      	add	sp, #8
100033e4:	bd80      	pop	{r7, pc}
100033e6:	46c0      	nop			; (mov r8, r8)

100033e8 <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
100033e8:	b580      	push	{r7, lr}
100033ea:	b082      	sub	sp, #8
100033ec:	af00      	add	r7, sp, #0
100033ee:	6078      	str	r0, [r7, #4]
100033f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
100033f2:	687b      	ldr	r3, [r7, #4]
100033f4:	681a      	ldr	r2, [r3, #0]
100033f6:	683b      	ldr	r3, [r7, #0]
100033f8:	1c10      	adds	r0, r2, #0
100033fa:	1c19      	adds	r1, r3, #0
100033fc:	f7fe fe00 	bl	10002000 <XMC_I2C_CH_DisableEvent>
}
10003400:	46bd      	mov	sp, r7
10003402:	b002      	add	sp, #8
10003404:	bd80      	pop	{r7, pc}
10003406:	46c0      	nop			; (mov r8, r8)

10003408 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
10003408:	b580      	push	{r7, lr}
1000340a:	b082      	sub	sp, #8
1000340c:	af00      	add	r7, sp, #0
1000340e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
10003410:	687b      	ldr	r3, [r7, #4]
10003412:	681b      	ldr	r3, [r3, #0]
10003414:	1c18      	adds	r0, r3, #0
10003416:	f7fe fd63 	bl	10001ee0 <XMC_I2C_CH_MasterReceiveAck>
}
1000341a:	46bd      	mov	sp, r7
1000341c:	b002      	add	sp, #8
1000341e:	bd80      	pop	{r7, pc}

10003420 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
10003420:	b580      	push	{r7, lr}
10003422:	b082      	sub	sp, #8
10003424:	af00      	add	r7, sp, #0
10003426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
10003428:	687b      	ldr	r3, [r7, #4]
1000342a:	681b      	ldr	r3, [r3, #0]
1000342c:	1c18      	adds	r0, r3, #0
1000342e:	f7fe fd81 	bl	10001f34 <XMC_I2C_CH_MasterReceiveNack>
}
10003432:	46bd      	mov	sp, r7
10003434:	b002      	add	sp, #8
10003436:	bd80      	pop	{r7, pc}

10003438 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
10003438:	b580      	push	{r7, lr}
1000343a:	b082      	sub	sp, #8
1000343c:	af00      	add	r7, sp, #0
1000343e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterStop(handle->channel);
10003440:	687b      	ldr	r3, [r7, #4]
10003442:	681b      	ldr	r3, [r3, #0]
10003444:	1c18      	adds	r0, r3, #0
10003446:	f7fe fcf3 	bl	10001e30 <XMC_I2C_CH_MasterStop>
}
1000344a:	46bd      	mov	sp, r7
1000344c:	b002      	add	sp, #8
1000344e:	bd80      	pop	{r7, pc}

10003450 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
10003450:	b580      	push	{r7, lr}
10003452:	b084      	sub	sp, #16
10003454:	af00      	add	r7, sp, #0
10003456:	60f8      	str	r0, [r7, #12]
10003458:	60b9      	str	r1, [r7, #8]
1000345a:	1dfb      	adds	r3, r7, #7
1000345c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1000345e:	68fb      	ldr	r3, [r7, #12]
10003460:	6819      	ldr	r1, [r3, #0]
10003462:	68bb      	ldr	r3, [r7, #8]
10003464:	b29a      	uxth	r2, r3
10003466:	1dfb      	adds	r3, r7, #7
10003468:	781b      	ldrb	r3, [r3, #0]
1000346a:	1c08      	adds	r0, r1, #0
1000346c:	1c11      	adds	r1, r2, #0
1000346e:	1c1a      	adds	r2, r3, #0
10003470:	f7fe fc5e 	bl	10001d30 <XMC_I2C_CH_MasterStart>
}
10003474:	46bd      	mov	sp, r7
10003476:	b004      	add	sp, #16
10003478:	bd80      	pop	{r7, pc}
1000347a:	46c0      	nop			; (mov r8, r8)

1000347c <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
1000347c:	b580      	push	{r7, lr}
1000347e:	b084      	sub	sp, #16
10003480:	af00      	add	r7, sp, #0
10003482:	60f8      	str	r0, [r7, #12]
10003484:	60b9      	str	r1, [r7, #8]
10003486:	1dfb      	adds	r3, r7, #7
10003488:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1000348a:	68fb      	ldr	r3, [r7, #12]
1000348c:	6819      	ldr	r1, [r3, #0]
1000348e:	68bb      	ldr	r3, [r7, #8]
10003490:	b29a      	uxth	r2, r3
10003492:	1dfb      	adds	r3, r7, #7
10003494:	781b      	ldrb	r3, [r3, #0]
10003496:	1c08      	adds	r0, r1, #0
10003498:	1c11      	adds	r1, r2, #0
1000349a:	1c1a      	adds	r2, r3, #0
1000349c:	f7fe fc88 	bl	10001db0 <XMC_I2C_CH_MasterRepeatedStart>
}
100034a0:	46bd      	mov	sp, r7
100034a2:	b004      	add	sp, #16
100034a4:	bd80      	pop	{r7, pc}
100034a6:	46c0      	nop			; (mov r8, r8)

100034a8 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
100034a8:	b580      	push	{r7, lr}
100034aa:	b084      	sub	sp, #16
100034ac:	af00      	add	r7, sp, #0
100034ae:	6078      	str	r0, [r7, #4]
100034b0:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
100034b2:	687a      	ldr	r2, [r7, #4]
100034b4:	683b      	ldr	r3, [r7, #0]
100034b6:	429a      	cmp	r2, r3
100034b8:	d202      	bcs.n	100034c0 <calculate_minfifosize+0x18>
  {
    result = a;
100034ba:	687b      	ldr	r3, [r7, #4]
100034bc:	60fb      	str	r3, [r7, #12]
100034be:	e001      	b.n	100034c4 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
100034c0:	683b      	ldr	r3, [r7, #0]
100034c2:	60fb      	str	r3, [r7, #12]
  }
  return (result);
100034c4:	68fb      	ldr	r3, [r7, #12]
}
100034c6:	1c18      	adds	r0, r3, #0
100034c8:	46bd      	mov	sp, r7
100034ca:	b004      	add	sp, #16
100034cc:	bd80      	pop	{r7, pc}
100034ce:	46c0      	nop			; (mov r8, r8)

100034d0 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
100034d0:	b580      	push	{r7, lr}
100034d2:	b084      	sub	sp, #16
100034d4:	af00      	add	r7, sp, #0
100034d6:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
100034d8:	687b      	ldr	r3, [r7, #4]
100034da:	2b00      	cmp	r3, #0
100034dc:	d008      	beq.n	100034f0 <I2C_MASTER_Init+0x20>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
100034de:	687b      	ldr	r3, [r7, #4]
100034e0:	685b      	ldr	r3, [r3, #4]
100034e2:	685b      	ldr	r3, [r3, #4]
100034e4:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
100034e6:	230f      	movs	r3, #15
100034e8:	18fb      	adds	r3, r7, r3
100034ea:	2200      	movs	r2, #0
100034ec:	701a      	strb	r2, [r3, #0]
100034ee:	e003      	b.n	100034f8 <I2C_MASTER_Init+0x28>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
100034f0:	230f      	movs	r3, #15
100034f2:	18fb      	adds	r3, r7, r3
100034f4:	2201      	movs	r2, #1
100034f6:	701a      	strb	r2, [r3, #0]
  }
  return (status);
100034f8:	230f      	movs	r3, #15
100034fa:	18fb      	adds	r3, r7, r3
100034fc:	781b      	ldrb	r3, [r3, #0]
}
100034fe:	1c18      	adds	r0, r3, #0
10003500:	46bd      	mov	sp, r7
10003502:	b004      	add	sp, #16
10003504:	bd80      	pop	{r7, pc}
10003506:	46c0      	nop			; (mov r8, r8)

10003508 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
10003508:	b580      	push	{r7, lr}
1000350a:	b084      	sub	sp, #16
1000350c:	af00      	add	r7, sp, #0
1000350e:	6078      	str	r0, [r7, #4]
10003510:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
10003512:	687b      	ldr	r3, [r7, #4]
10003514:	681b      	ldr	r3, [r3, #0]
10003516:	1c18      	adds	r0, r3, #0
10003518:	f7ff feee 	bl	100032f8 <XMC_I2C_CH_GetStatusFlag>
1000351c:	1c03      	adds	r3, r0, #0
1000351e:	60fb      	str	r3, [r7, #12]

  return (status & flagtype);
10003520:	68fb      	ldr	r3, [r7, #12]
10003522:	683a      	ldr	r2, [r7, #0]
10003524:	4013      	ands	r3, r2
}
10003526:	1c18      	adds	r0, r3, #0
10003528:	46bd      	mov	sp, r7
1000352a:	b004      	add	sp, #16
1000352c:	bd80      	pop	{r7, pc}
1000352e:	46c0      	nop			; (mov r8, r8)

10003530 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
10003530:	b580      	push	{r7, lr}
10003532:	b082      	sub	sp, #8
10003534:	af00      	add	r7, sp, #0
10003536:	6078      	str	r0, [r7, #4]
10003538:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
1000353a:	687b      	ldr	r3, [r7, #4]
1000353c:	681a      	ldr	r2, [r3, #0]
1000353e:	683b      	ldr	r3, [r7, #0]
10003540:	1c10      	adds	r0, r2, #0
10003542:	1c19      	adds	r1, r3, #0
10003544:	f7ff fee2 	bl	1000330c <XMC_I2C_CH_ClearStatusFlag>
}
10003548:	46bd      	mov	sp, r7
1000354a:	b002      	add	sp, #8
1000354c:	bd80      	pop	{r7, pc}
1000354e:	46c0      	nop			; (mov r8, r8)

10003550 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
10003550:	b5b0      	push	{r4, r5, r7, lr}
10003552:	b088      	sub	sp, #32
10003554:	af02      	add	r7, sp, #8
10003556:	60f8      	str	r0, [r7, #12]
10003558:	607a      	str	r2, [r7, #4]
1000355a:	603b      	str	r3, [r7, #0]
1000355c:	230b      	movs	r3, #11
1000355e:	18fb      	adds	r3, r7, r3
10003560:	1c0a      	adds	r2, r1, #0
10003562:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
10003564:	2317      	movs	r3, #23
10003566:	18fb      	adds	r3, r7, r3
10003568:	2202      	movs	r2, #2
1000356a:	701a      	strb	r2, [r3, #0]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000356c:	68fb      	ldr	r3, [r7, #12]
1000356e:	685b      	ldr	r3, [r3, #4]
10003570:	7f1b      	ldrb	r3, [r3, #28]
10003572:	2b00      	cmp	r3, #0
10003574:	d112      	bne.n	1000359c <I2C_MASTER_Transmit+0x4c>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
10003576:	2317      	movs	r3, #23
10003578:	18fc      	adds	r4, r7, r3
1000357a:	68f8      	ldr	r0, [r7, #12]
1000357c:	230b      	movs	r3, #11
1000357e:	18fb      	adds	r3, r7, r3
10003580:	7819      	ldrb	r1, [r3, #0]
10003582:	687a      	ldr	r2, [r7, #4]
10003584:	683d      	ldr	r5, [r7, #0]
10003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003588:	9300      	str	r3, [sp, #0]
1000358a:	232c      	movs	r3, #44	; 0x2c
1000358c:	18fb      	adds	r3, r7, r3
1000358e:	781b      	ldrb	r3, [r3, #0]
10003590:	9301      	str	r3, [sp, #4]
10003592:	1c2b      	adds	r3, r5, #0
10003594:	f000 f9aa 	bl	100038ec <I2C_MASTER_StartTransmitIRQ>
10003598:	1c03      	adds	r3, r0, #0
1000359a:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
1000359c:	2317      	movs	r3, #23
1000359e:	18fb      	adds	r3, r7, r3
100035a0:	781b      	ldrb	r3, [r3, #0]
} /* end of function */
100035a2:	1c18      	adds	r0, r3, #0
100035a4:	46bd      	mov	sp, r7
100035a6:	b006      	add	sp, #24
100035a8:	bdb0      	pop	{r4, r5, r7, pc}
100035aa:	46c0      	nop			; (mov r8, r8)

100035ac <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
100035ac:	b580      	push	{r7, lr}
100035ae:	b084      	sub	sp, #16
100035b0:	af00      	add	r7, sp, #0
100035b2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
100035b4:	687b      	ldr	r3, [r7, #4]
100035b6:	689b      	ldr	r3, [r3, #8]
100035b8:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
100035ba:	230f      	movs	r3, #15
100035bc:	18fb      	adds	r3, r7, r3
100035be:	2200      	movs	r2, #0
100035c0:	701a      	strb	r2, [r3, #0]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
100035c2:	687a      	ldr	r2, [r7, #4]
100035c4:	23b1      	movs	r3, #177	; 0xb1
100035c6:	005b      	lsls	r3, r3, #1
100035c8:	1c10      	adds	r0, r2, #0
100035ca:	1c19      	adds	r1, r3, #0
100035cc:	f7ff ff9c 	bl	10003508 <I2C_MASTER_GetFlagStatus>
100035d0:	1e03      	subs	r3, r0, #0
100035d2:	d014      	beq.n	100035fe <I2C_MASTER_TransmitHandler+0x52>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
										(uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
100035d4:	687b      	ldr	r3, [r7, #4]
100035d6:	681a      	ldr	r2, [r3, #0]
100035d8:	2380      	movs	r3, #128	; 0x80
100035da:	05db      	lsls	r3, r3, #23
100035dc:	1c10      	adds	r0, r2, #0
100035de:	1c19      	adds	r1, r3, #0
100035e0:	f7ff fe1a 	bl	10003218 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
100035e4:	687b      	ldr	r3, [r7, #4]
100035e6:	681a      	ldr	r2, [r3, #0]
100035e8:	2380      	movs	r3, #128	; 0x80
100035ea:	019b      	lsls	r3, r3, #6
100035ec:	1c10      	adds	r0, r2, #0
100035ee:	1c19      	adds	r1, r3, #0
100035f0:	f7ff fdd2 	bl	10003198 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
100035f4:	687b      	ldr	r3, [r7, #4]
100035f6:	1c18      	adds	r0, r3, #0
100035f8:	f000 fb74 	bl	10003ce4 <I2C_MASTER_ProtocolHandler>
100035fc:	e112      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
100035fe:	68bb      	ldr	r3, [r7, #8]
10003600:	699b      	ldr	r3, [r3, #24]
10003602:	2b00      	cmp	r3, #0
10003604:	d000      	beq.n	10003608 <I2C_MASTER_TransmitHandler+0x5c>
10003606:	e083      	b.n	10003710 <I2C_MASTER_TransmitHandler+0x164>
  {
    if (handle->config->txFIFO_size > 0)
10003608:	687b      	ldr	r3, [r7, #4]
1000360a:	685b      	ldr	r3, [r3, #4]
1000360c:	7f9b      	ldrb	r3, [r3, #30]
1000360e:	2b00      	cmp	r3, #0
10003610:	d05b      	beq.n	100036ca <I2C_MASTER_TransmitHandler+0x11e>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003612:	68bb      	ldr	r3, [r7, #8]
10003614:	68da      	ldr	r2, [r3, #12]
10003616:	68bb      	ldr	r3, [r7, #8]
10003618:	689b      	ldr	r3, [r3, #8]
1000361a:	429a      	cmp	r2, r3
1000361c:	d234      	bcs.n	10003688 <I2C_MASTER_TransmitHandler+0xdc>
      {
    	I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
1000361e:	687a      	ldr	r2, [r7, #4]
10003620:	2380      	movs	r3, #128	; 0x80
10003622:	05db      	lsls	r3, r3, #23
10003624:	1c10      	adds	r0, r2, #0
10003626:	1c19      	adds	r1, r3, #0
10003628:	f7ff fede 	bl	100033e8 <I2C_MASTER_DisableEvent>
    	XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
1000362c:	687b      	ldr	r3, [r7, #4]
1000362e:	681a      	ldr	r2, [r3, #0]
10003630:	2380      	movs	r3, #128	; 0x80
10003632:	05db      	lsls	r3, r3, #23
10003634:	1c10      	adds	r0, r2, #0
10003636:	1c19      	adds	r1, r3, #0
10003638:	f7ff fdda 	bl	100031f0 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000363c:	e018      	b.n	10003670 <I2C_MASTER_TransmitHandler+0xc4>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000363e:	68bb      	ldr	r3, [r7, #8]
10003640:	68da      	ldr	r2, [r3, #12]
10003642:	68bb      	ldr	r3, [r7, #8]
10003644:	689b      	ldr	r3, [r3, #8]
10003646:	429a      	cmp	r2, r3
10003648:	d210      	bcs.n	1000366c <I2C_MASTER_TransmitHandler+0xc0>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000364a:	68bb      	ldr	r3, [r7, #8]
1000364c:	681a      	ldr	r2, [r3, #0]
1000364e:	68bb      	ldr	r3, [r7, #8]
10003650:	68db      	ldr	r3, [r3, #12]
10003652:	18d3      	adds	r3, r2, r3
10003654:	781b      	ldrb	r3, [r3, #0]
10003656:	687a      	ldr	r2, [r7, #4]
10003658:	1c10      	adds	r0, r2, #0
1000365a:	1c19      	adds	r1, r3, #0
1000365c:	f7ff fea2 	bl	100033a4 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
10003660:	68bb      	ldr	r3, [r7, #8]
10003662:	68db      	ldr	r3, [r3, #12]
10003664:	1c5a      	adds	r2, r3, #1
10003666:	68bb      	ldr	r3, [r7, #8]
10003668:	60da      	str	r2, [r3, #12]
1000366a:	e001      	b.n	10003670 <I2C_MASTER_TransmitHandler+0xc4>
          }
          else
          {
            break;
1000366c:	46c0      	nop			; (mov r8, r8)
1000366e:	e0d9      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
    	I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
    	XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003670:	687b      	ldr	r3, [r7, #4]
10003672:	1c18      	adds	r0, r3, #0
10003674:	f7ff fe6c 	bl	10003350 <I2C_MASTER_IsTXFIFOFull>
10003678:	1c03      	adds	r3, r0, #0
1000367a:	1c1a      	adds	r2, r3, #0
1000367c:	2301      	movs	r3, #1
1000367e:	4053      	eors	r3, r2
10003680:	b2db      	uxtb	r3, r3
10003682:	2b00      	cmp	r3, #0
10003684:	d1db      	bne.n	1000363e <I2C_MASTER_TransmitHandler+0x92>
10003686:	e0cd      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
    	  XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003688:	687b      	ldr	r3, [r7, #4]
1000368a:	681a      	ldr	r2, [r3, #0]
1000368c:	2380      	movs	r3, #128	; 0x80
1000368e:	05db      	lsls	r3, r3, #23
10003690:	1c10      	adds	r0, r2, #0
10003692:	1c19      	adds	r1, r3, #0
10003694:	f7ff fdc0 	bl	10003218 <XMC_USIC_CH_TXFIFO_DisableEvent>
    	  /*make sure data is transmitted in FIFO*/
    	  while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
10003698:	46c0      	nop			; (mov r8, r8)
1000369a:	687b      	ldr	r3, [r7, #4]
1000369c:	681b      	ldr	r3, [r3, #0]
1000369e:	1c18      	adds	r0, r3, #0
100036a0:	f7ff fde0 	bl	10003264 <XMC_USIC_CH_TXFIFO_IsEmpty>
100036a4:	1c03      	adds	r3, r0, #0
100036a6:	1c1a      	adds	r2, r3, #0
100036a8:	2301      	movs	r3, #1
100036aa:	4053      	eors	r3, r2
100036ac:	b2db      	uxtb	r3, r3
100036ae:	2b00      	cmp	r3, #0
100036b0:	d1f3      	bne.n	1000369a <I2C_MASTER_TransmitHandler+0xee>

          if (ptr_runtime->bus_acquired == true)
100036b2:	68bb      	ldr	r3, [r7, #8]
100036b4:	2228      	movs	r2, #40	; 0x28
100036b6:	5c9b      	ldrb	r3, [r3, r2]
100036b8:	b2db      	uxtb	r3, r3
100036ba:	2b00      	cmp	r3, #0
100036bc:	d100      	bne.n	100036c0 <I2C_MASTER_TransmitHandler+0x114>
100036be:	e0b1      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
100036c0:	687b      	ldr	r3, [r7, #4]
100036c2:	1c18      	adds	r0, r3, #0
100036c4:	f000 f8b2 	bl	1000382c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
100036c8:	e0ac      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
100036ca:	68bb      	ldr	r3, [r7, #8]
100036cc:	68da      	ldr	r2, [r3, #12]
100036ce:	68bb      	ldr	r3, [r7, #8]
100036d0:	689b      	ldr	r3, [r3, #8]
100036d2:	429a      	cmp	r2, r3
100036d4:	d210      	bcs.n	100036f8 <I2C_MASTER_TransmitHandler+0x14c>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
100036d6:	68bb      	ldr	r3, [r7, #8]
100036d8:	681a      	ldr	r2, [r3, #0]
100036da:	68bb      	ldr	r3, [r7, #8]
100036dc:	68db      	ldr	r3, [r3, #12]
100036de:	18d3      	adds	r3, r2, r3
100036e0:	781b      	ldrb	r3, [r3, #0]
100036e2:	687a      	ldr	r2, [r7, #4]
100036e4:	1c10      	adds	r0, r2, #0
100036e6:	1c19      	adds	r1, r3, #0
100036e8:	f7ff fe5c 	bl	100033a4 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
100036ec:	68bb      	ldr	r3, [r7, #8]
100036ee:	68db      	ldr	r3, [r3, #12]
100036f0:	1c5a      	adds	r2, r3, #1
100036f2:	68bb      	ldr	r3, [r7, #8]
100036f4:	60da      	str	r2, [r3, #12]
100036f6:	e095      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
100036f8:	68bb      	ldr	r3, [r7, #8]
100036fa:	2228      	movs	r2, #40	; 0x28
100036fc:	5c9b      	ldrb	r3, [r3, r2]
100036fe:	b2db      	uxtb	r3, r3
10003700:	2b00      	cmp	r3, #0
10003702:	d100      	bne.n	10003706 <I2C_MASTER_TransmitHandler+0x15a>
10003704:	e08e      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
10003706:	687b      	ldr	r3, [r7, #4]
10003708:	1c18      	adds	r0, r3, #0
1000370a:	f000 f88f 	bl	1000382c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
1000370e:	e089      	b.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
10003710:	687b      	ldr	r3, [r7, #4]
10003712:	685b      	ldr	r3, [r3, #4]
10003714:	7f9b      	ldrb	r3, [r3, #30]
10003716:	2b00      	cmp	r3, #0
10003718:	d05c      	beq.n	100037d4 <I2C_MASTER_TransmitHandler+0x228>
    {
      if ((handle->config->rxFIFO_size > 0))
1000371a:	687b      	ldr	r3, [r7, #4]
1000371c:	685b      	ldr	r3, [r3, #4]
1000371e:	7fdb      	ldrb	r3, [r3, #31]
10003720:	2b00      	cmp	r3, #0
10003722:	d015      	beq.n	10003750 <I2C_MASTER_TransmitHandler+0x1a4>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003724:	687b      	ldr	r3, [r7, #4]
10003726:	685b      	ldr	r3, [r3, #4]
10003728:	7f9b      	ldrb	r3, [r3, #30]
1000372a:	1c1a      	adds	r2, r3, #0
1000372c:	2301      	movs	r3, #1
1000372e:	4093      	lsls	r3, r2
10003730:	1c1a      	adds	r2, r3, #0
        		                                  ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003732:	687b      	ldr	r3, [r7, #4]
10003734:	685b      	ldr	r3, [r3, #4]
10003736:	7fdb      	ldrb	r3, [r3, #31]
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003738:	1c19      	adds	r1, r3, #0
1000373a:	2301      	movs	r3, #1
1000373c:	408b      	lsls	r3, r1
1000373e:	1c10      	adds	r0, r2, #0
10003740:	1c19      	adds	r1, r3, #0
10003742:	f7ff feb1 	bl	100034a8 <calculate_minfifosize>
10003746:	1c02      	adds	r2, r0, #0
10003748:	230f      	movs	r3, #15
1000374a:	18fb      	adds	r3, r7, r3
1000374c:	701a      	strb	r2, [r3, #0]
1000374e:	e003      	b.n	10003758 <I2C_MASTER_TransmitHandler+0x1ac>
        		                                  ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
10003750:	230f      	movs	r3, #15
10003752:	18fb      	adds	r3, r7, r3
10003754:	2202      	movs	r2, #2
10003756:	701a      	strb	r2, [r3, #0]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003758:	687b      	ldr	r3, [r7, #4]
1000375a:	681a      	ldr	r2, [r3, #0]
1000375c:	2380      	movs	r3, #128	; 0x80
1000375e:	05db      	lsls	r3, r3, #23
10003760:	1c10      	adds	r0, r2, #0
10003762:	1c19      	adds	r1, r3, #0
10003764:	f7ff fd58 	bl	10003218 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003768:	e027      	b.n	100037ba <I2C_MASTER_TransmitHandler+0x20e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000376a:	68bb      	ldr	r3, [r7, #8]
1000376c:	68da      	ldr	r2, [r3, #12]
1000376e:	68bb      	ldr	r3, [r7, #8]
10003770:	689b      	ldr	r3, [r3, #8]
10003772:	429a      	cmp	r2, r3
10003774:	d220      	bcs.n	100037b8 <I2C_MASTER_TransmitHandler+0x20c>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003776:	68bb      	ldr	r3, [r7, #8]
10003778:	68db      	ldr	r3, [r3, #12]
1000377a:	1c5a      	adds	r2, r3, #1
1000377c:	68bb      	ldr	r3, [r7, #8]
1000377e:	689b      	ldr	r3, [r3, #8]
10003780:	429a      	cmp	r2, r3
10003782:	d108      	bne.n	10003796 <I2C_MASTER_TransmitHandler+0x1ea>
10003784:	68bb      	ldr	r3, [r7, #8]
10003786:	6a1b      	ldr	r3, [r3, #32]
10003788:	2b01      	cmp	r3, #1
1000378a:	d104      	bne.n	10003796 <I2C_MASTER_TransmitHandler+0x1ea>
          {
            I2C_MASTER_ReceiveNACK(handle);
1000378c:	687b      	ldr	r3, [r7, #4]
1000378e:	1c18      	adds	r0, r3, #0
10003790:	f7ff fe46 	bl	10003420 <I2C_MASTER_ReceiveNACK>
10003794:	e003      	b.n	1000379e <I2C_MASTER_TransmitHandler+0x1f2>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003796:	687b      	ldr	r3, [r7, #4]
10003798:	1c18      	adds	r0, r3, #0
1000379a:	f7ff fe35 	bl	10003408 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
1000379e:	68bb      	ldr	r3, [r7, #8]
100037a0:	68db      	ldr	r3, [r3, #12]
100037a2:	1c5a      	adds	r2, r3, #1
100037a4:	68bb      	ldr	r3, [r7, #8]
100037a6:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
100037a8:	68bb      	ldr	r3, [r7, #8]
100037aa:	68da      	ldr	r2, [r3, #12]
100037ac:	230f      	movs	r3, #15
100037ae:	18fb      	adds	r3, r7, r3
100037b0:	781b      	ldrb	r3, [r3, #0]
100037b2:	429a      	cmp	r2, r3
100037b4:	d301      	bcc.n	100037ba <I2C_MASTER_TransmitHandler+0x20e>
          {
            break;
100037b6:	e00c      	b.n	100037d2 <I2C_MASTER_TransmitHandler+0x226>
          }
        }
        else
        {
          break;
100037b8:	e00b      	b.n	100037d2 <I2C_MASTER_TransmitHandler+0x226>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100037ba:	687b      	ldr	r3, [r7, #4]
100037bc:	1c18      	adds	r0, r3, #0
100037be:	f7ff fdc7 	bl	10003350 <I2C_MASTER_IsTXFIFOFull>
100037c2:	1c03      	adds	r3, r0, #0
100037c4:	1c1a      	adds	r2, r3, #0
100037c6:	2301      	movs	r3, #1
100037c8:	4053      	eors	r3, r2
100037ca:	b2db      	uxtb	r3, r3
100037cc:	2b00      	cmp	r3, #0
100037ce:	d1cc      	bne.n	1000376a <I2C_MASTER_TransmitHandler+0x1be>
100037d0:	e019      	b.n	10003806 <I2C_MASTER_TransmitHandler+0x25a>
100037d2:	e018      	b.n	10003806 <I2C_MASTER_TransmitHandler+0x25a>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
100037d4:	68bb      	ldr	r3, [r7, #8]
100037d6:	68db      	ldr	r3, [r3, #12]
100037d8:	1c5a      	adds	r2, r3, #1
100037da:	68bb      	ldr	r3, [r7, #8]
100037dc:	689b      	ldr	r3, [r3, #8]
100037de:	429a      	cmp	r2, r3
100037e0:	d108      	bne.n	100037f4 <I2C_MASTER_TransmitHandler+0x248>
100037e2:	68bb      	ldr	r3, [r7, #8]
100037e4:	6a1b      	ldr	r3, [r3, #32]
100037e6:	2b01      	cmp	r3, #1
100037e8:	d104      	bne.n	100037f4 <I2C_MASTER_TransmitHandler+0x248>
      {
        I2C_MASTER_ReceiveNACK(handle);
100037ea:	687b      	ldr	r3, [r7, #4]
100037ec:	1c18      	adds	r0, r3, #0
100037ee:	f7ff fe17 	bl	10003420 <I2C_MASTER_ReceiveNACK>
100037f2:	e003      	b.n	100037fc <I2C_MASTER_TransmitHandler+0x250>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
100037f4:	687b      	ldr	r3, [r7, #4]
100037f6:	1c18      	adds	r0, r3, #0
100037f8:	f7ff fe06 	bl	10003408 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
100037fc:	68bb      	ldr	r3, [r7, #8]
100037fe:	68db      	ldr	r3, [r3, #12]
10003800:	1c5a      	adds	r2, r3, #1
10003802:	68bb      	ldr	r3, [r7, #8]
10003804:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
10003806:	687b      	ldr	r3, [r7, #4]
10003808:	689b      	ldr	r3, [r3, #8]
1000380a:	68da      	ldr	r2, [r3, #12]
1000380c:	687b      	ldr	r3, [r7, #4]
1000380e:	689b      	ldr	r3, [r3, #8]
10003810:	689b      	ldr	r3, [r3, #8]
10003812:	429a      	cmp	r2, r3
10003814:	d106      	bne.n	10003824 <I2C_MASTER_TransmitHandler+0x278>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
10003816:	687a      	ldr	r2, [r7, #4]
10003818:	2380      	movs	r3, #128	; 0x80
1000381a:	05db      	lsls	r3, r3, #23
1000381c:	1c10      	adds	r0, r2, #0
1000381e:	1c19      	adds	r1, r3, #0
10003820:	f7ff fde2 	bl	100033e8 <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
10003824:	46bd      	mov	sp, r7
10003826:	b004      	add	sp, #16
10003828:	bd80      	pop	{r7, pc}
1000382a:	46c0      	nop			; (mov r8, r8)

1000382c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
1000382c:	b580      	push	{r7, lr}
1000382e:	b084      	sub	sp, #16
10003830:	af00      	add	r7, sp, #0
10003832:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003834:	687b      	ldr	r3, [r7, #4]
10003836:	689b      	ldr	r3, [r3, #8]
10003838:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
1000383a:	687a      	ldr	r2, [r7, #4]
1000383c:	2380      	movs	r3, #128	; 0x80
1000383e:	05db      	lsls	r3, r3, #23
10003840:	1c10      	adds	r0, r2, #0
10003842:	1c19      	adds	r1, r3, #0
10003844:	f7ff fdd0 	bl	100033e8 <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
10003848:	68fb      	ldr	r3, [r7, #12]
1000384a:	69db      	ldr	r3, [r3, #28]
1000384c:	2b01      	cmp	r3, #1
1000384e:	d107      	bne.n	10003860 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x34>
  {
    ptr_runtime->bus_acquired = false;
10003850:	68fb      	ldr	r3, [r7, #12]
10003852:	2228      	movs	r2, #40	; 0x28
10003854:	2100      	movs	r1, #0
10003856:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStop(handle);
10003858:	687b      	ldr	r3, [r7, #4]
1000385a:	1c18      	adds	r0, r3, #0
1000385c:	f7ff fdec 	bl	10003438 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003860:	46c0      	nop			; (mov r8, r8)
10003862:	687b      	ldr	r3, [r7, #4]
10003864:	681b      	ldr	r3, [r3, #0]
10003866:	1c18      	adds	r0, r3, #0
10003868:	f7ff fca6 	bl	100031b8 <XMC_USIC_CH_GetTransmitBufferStatus>
1000386c:	1e03      	subs	r3, r0, #0
1000386e:	2b80      	cmp	r3, #128	; 0x80
10003870:	d0f7      	beq.n	10003862 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x36>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
10003872:	68fb      	ldr	r3, [r7, #12]
10003874:	2226      	movs	r2, #38	; 0x26
10003876:	2100      	movs	r1, #0
10003878:	5499      	strb	r1, [r3, r2]

  if (handle->config->tx_cbhandler != NULL)
1000387a:	687b      	ldr	r3, [r7, #4]
1000387c:	685b      	ldr	r3, [r3, #4]
1000387e:	689b      	ldr	r3, [r3, #8]
10003880:	2b00      	cmp	r3, #0
10003882:	d003      	beq.n	1000388c <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x60>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
10003884:	687b      	ldr	r3, [r7, #4]
10003886:	685b      	ldr	r3, [r3, #4]
10003888:	689b      	ldr	r3, [r3, #8]
1000388a:	4798      	blx	r3
  }
}
1000388c:	46bd      	mov	sp, r7
1000388e:	b004      	add	sp, #16
10003890:	bd80      	pop	{r7, pc}
10003892:	46c0      	nop			; (mov r8, r8)

10003894 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
		(I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
		                                           const XMC_I2C_CH_CMD_t cmd)
{
10003894:	b580      	push	{r7, lr}
10003896:	b084      	sub	sp, #16
10003898:	af00      	add	r7, sp, #0
1000389a:	60f8      	str	r0, [r7, #12]
1000389c:	60b9      	str	r1, [r7, #8]
1000389e:	1dfb      	adds	r3, r7, #7
100038a0:	701a      	strb	r2, [r3, #0]
  if (handle->runtime->bus_acquired == true)
100038a2:	68fb      	ldr	r3, [r7, #12]
100038a4:	689b      	ldr	r3, [r3, #8]
100038a6:	2228      	movs	r2, #40	; 0x28
100038a8:	5c9b      	ldrb	r3, [r3, r2]
100038aa:	b2db      	uxtb	r3, r3
100038ac:	2b00      	cmp	r3, #0
100038ae:	d00a      	beq.n	100038c6 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x32>
  {
	I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
100038b0:	68bb      	ldr	r3, [r7, #8]
100038b2:	b29b      	uxth	r3, r3
100038b4:	1c19      	adds	r1, r3, #0
100038b6:	68fa      	ldr	r2, [r7, #12]
100038b8:	1dfb      	adds	r3, r7, #7
100038ba:	781b      	ldrb	r3, [r3, #0]
100038bc:	1c10      	adds	r0, r2, #0
100038be:	1c1a      	adds	r2, r3, #0
100038c0:	f7ff fddc 	bl	1000347c <I2C_MASTER_SendRepeatedStart>
100038c4:	e00e      	b.n	100038e4 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x50>
  }
  else
  {
    handle->runtime->bus_acquired = true;
100038c6:	68fb      	ldr	r3, [r7, #12]
100038c8:	689b      	ldr	r3, [r3, #8]
100038ca:	2228      	movs	r2, #40	; 0x28
100038cc:	2101      	movs	r1, #1
100038ce:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
100038d0:	68bb      	ldr	r3, [r7, #8]
100038d2:	b29b      	uxth	r3, r3
100038d4:	1c19      	adds	r1, r3, #0
100038d6:	68fa      	ldr	r2, [r7, #12]
100038d8:	1dfb      	adds	r3, r7, #7
100038da:	781b      	ldrb	r3, [r3, #0]
100038dc:	1c10      	adds	r0, r2, #0
100038de:	1c1a      	adds	r2, r3, #0
100038e0:	f7ff fdb6 	bl	10003450 <I2C_MASTER_SendStart>
  }
}
100038e4:	46bd      	mov	sp, r7
100038e6:	b004      	add	sp, #16
100038e8:	bd80      	pop	{r7, pc}
100038ea:	46c0      	nop			; (mov r8, r8)

100038ec <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
100038ec:	b580      	push	{r7, lr}
100038ee:	b086      	sub	sp, #24
100038f0:	af00      	add	r7, sp, #0
100038f2:	60f8      	str	r0, [r7, #12]
100038f4:	607a      	str	r2, [r7, #4]
100038f6:	603b      	str	r3, [r7, #0]
100038f8:	230b      	movs	r3, #11
100038fa:	18fb      	adds	r3, r7, r3
100038fc:	1c0a      	adds	r2, r1, #0
100038fe:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10003900:	2317      	movs	r3, #23
10003902:	18fb      	adds	r3, r7, r3
10003904:	2202      	movs	r2, #2
10003906:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
10003908:	68fb      	ldr	r3, [r7, #12]
1000390a:	689b      	ldr	r3, [r3, #8]
1000390c:	613b      	str	r3, [r7, #16]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
	 If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000390e:	230b      	movs	r3, #11
10003910:	18fb      	adds	r3, r7, r3
10003912:	781b      	ldrb	r3, [r3, #0]
10003914:	2201      	movs	r2, #1
10003916:	4053      	eors	r3, r2
10003918:	b2db      	uxtb	r3, r3
1000391a:	2b00      	cmp	r3, #0
1000391c:	d009      	beq.n	10003932 <I2C_MASTER_StartTransmitIRQ+0x46>
1000391e:	68fb      	ldr	r3, [r7, #12]
10003920:	689b      	ldr	r3, [r3, #8]
10003922:	2228      	movs	r2, #40	; 0x28
10003924:	5c9b      	ldrb	r3, [r3, r2]
10003926:	b2db      	uxtb	r3, r3
10003928:	2201      	movs	r2, #1
1000392a:	4053      	eors	r3, r2
1000392c:	b2db      	uxtb	r3, r3
1000392e:	2b00      	cmp	r3, #0
10003930:	d105      	bne.n	1000393e <I2C_MASTER_StartTransmitIRQ+0x52>
10003932:	683b      	ldr	r3, [r7, #0]
10003934:	2b00      	cmp	r3, #0
10003936:	d002      	beq.n	1000393e <I2C_MASTER_StartTransmitIRQ+0x52>
10003938:	6a3b      	ldr	r3, [r7, #32]
1000393a:	2b00      	cmp	r3, #0
1000393c:	d104      	bne.n	10003948 <I2C_MASTER_StartTransmitIRQ+0x5c>
  {
	status = I2C_MASTER_STATUS_FAILURE;
1000393e:	2317      	movs	r3, #23
10003940:	18fb      	adds	r3, r7, r3
10003942:	2201      	movs	r2, #1
10003944:	701a      	strb	r2, [r3, #0]
10003946:	e047      	b.n	100039d8 <I2C_MASTER_StartTransmitIRQ+0xec>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
10003948:	693b      	ldr	r3, [r7, #16]
1000394a:	2200      	movs	r2, #0
1000394c:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
1000394e:	693b      	ldr	r3, [r7, #16]
10003950:	2226      	movs	r2, #38	; 0x26
10003952:	5c9b      	ldrb	r3, [r3, r2]
10003954:	b2db      	uxtb	r3, r3
10003956:	2201      	movs	r2, #1
10003958:	4053      	eors	r3, r2
1000395a:	b2db      	uxtb	r3, r3
1000395c:	2b00      	cmp	r3, #0
1000395e:	d03b      	beq.n	100039d8 <I2C_MASTER_StartTransmitIRQ+0xec>
    {
	  /*If there is no transmission in progress, obtain the address of data, size of data*/
	  ptr_runtime->tx_data = data;
10003960:	693b      	ldr	r3, [r7, #16]
10003962:	683a      	ldr	r2, [r7, #0]
10003964:	601a      	str	r2, [r3, #0]
	  ptr_runtime->tx_data_count = size;
10003966:	693b      	ldr	r3, [r7, #16]
10003968:	6a3a      	ldr	r2, [r7, #32]
1000396a:	609a      	str	r2, [r3, #8]

	  /*Initialize to first index and set the busy flag*/
	  ptr_runtime->tx_data_index = 0U;
1000396c:	693b      	ldr	r3, [r7, #16]
1000396e:	2200      	movs	r2, #0
10003970:	60da      	str	r2, [r3, #12]
	  ptr_runtime->tx_busy = true;
10003972:	693b      	ldr	r3, [r7, #16]
10003974:	2226      	movs	r2, #38	; 0x26
10003976:	2101      	movs	r1, #1
10003978:	5499      	strb	r1, [r3, r2]
	  ptr_runtime->send_stop = send_stop;
1000397a:	2324      	movs	r3, #36	; 0x24
1000397c:	18fb      	adds	r3, r7, r3
1000397e:	781a      	ldrb	r2, [r3, #0]
10003980:	693b      	ldr	r3, [r7, #16]
10003982:	61da      	str	r2, [r3, #28]

	  /* Enable ACK event */
	  I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
10003984:	68fa      	ldr	r2, [r7, #12]
10003986:	2380      	movs	r3, #128	; 0x80
10003988:	05db      	lsls	r3, r3, #23
1000398a:	1c10      	adds	r0, r2, #0
1000398c:	1c19      	adds	r1, r3, #0
1000398e:	f7ff fd1b 	bl	100033c8 <I2C_MASTER_EnableEvent>
	  XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
10003992:	68fb      	ldr	r3, [r7, #12]
10003994:	6819      	ldr	r1, [r3, #0]
10003996:	693b      	ldr	r3, [r7, #16]
10003998:	2224      	movs	r2, #36	; 0x24
1000399a:	5c9b      	ldrb	r3, [r3, r2]
1000399c:	1c08      	adds	r0, r1, #0
1000399e:	1c19      	adds	r1, r3, #0
100039a0:	f7ff fc98 	bl	100032d4 <XMC_I2C_CH_SetInterruptNodePointer>

	  if (send_start == true)
100039a4:	230b      	movs	r3, #11
100039a6:	18fb      	adds	r3, r7, r3
100039a8:	781b      	ldrb	r3, [r3, #0]
100039aa:	2b00      	cmp	r3, #0
100039ac:	d007      	beq.n	100039be <I2C_MASTER_StartTransmitIRQ+0xd2>
	  {
	    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
100039ae:	68fa      	ldr	r2, [r7, #12]
100039b0:	687b      	ldr	r3, [r7, #4]
100039b2:	1c10      	adds	r0, r2, #0
100039b4:	1c19      	adds	r1, r3, #0
100039b6:	2200      	movs	r2, #0
100039b8:	f7ff ff6c 	bl	10003894 <I2C_MASTER_lSendStart_Or_RepeatedStart>
100039bc:	e008      	b.n	100039d0 <I2C_MASTER_StartTransmitIRQ+0xe4>
	  }
	  else
	  {
	    /*Trigger the Ack interrupt*/
	    XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
100039be:	68fb      	ldr	r3, [r7, #12]
100039c0:	6819      	ldr	r1, [r3, #0]
100039c2:	693b      	ldr	r3, [r7, #16]
100039c4:	2224      	movs	r2, #36	; 0x24
100039c6:	5c9b      	ldrb	r3, [r3, r2]
100039c8:	1c08      	adds	r0, r1, #0
100039ca:	1c19      	adds	r1, r3, #0
100039cc:	f7ff fc02 	bl	100031d4 <XMC_USIC_CH_TriggerServiceRequest>
	  }

	  status = I2C_MASTER_STATUS_SUCCESS;
100039d0:	2317      	movs	r3, #23
100039d2:	18fb      	adds	r3, r7, r3
100039d4:	2200      	movs	r2, #0
100039d6:	701a      	strb	r2, [r3, #0]
	}
  }
  return (status);
100039d8:	2317      	movs	r3, #23
100039da:	18fb      	adds	r3, r7, r3
100039dc:	781b      	ldrb	r3, [r3, #0]
}
100039de:	1c18      	adds	r0, r3, #0
100039e0:	46bd      	mov	sp, r7
100039e2:	b006      	add	sp, #24
100039e4:	bd80      	pop	{r7, pc}
100039e6:	46c0      	nop			; (mov r8, r8)

100039e8 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
100039e8:	b590      	push	{r4, r7, lr}
100039ea:	b085      	sub	sp, #20
100039ec:	af00      	add	r7, sp, #0
100039ee:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
100039f0:	687b      	ldr	r3, [r7, #4]
100039f2:	689b      	ldr	r3, [r3, #8]
100039f4:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
100039f6:	230f      	movs	r3, #15
100039f8:	18fb      	adds	r3, r7, r3
100039fa:	2200      	movs	r2, #0
100039fc:	701a      	strb	r2, [r3, #0]

  if (ptr_runtime->rx_busy == true)
100039fe:	68bb      	ldr	r3, [r7, #8]
10003a00:	2227      	movs	r2, #39	; 0x27
10003a02:	5c9b      	ldrb	r3, [r3, r2]
10003a04:	b2db      	uxtb	r3, r3
10003a06:	2b00      	cmp	r3, #0
10003a08:	d100      	bne.n	10003a0c <I2C_MASTER_ReceiveHandler+0x24>
10003a0a:	e12d      	b.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
  {
    if (handle->config->rxFIFO_size > 0)
10003a0c:	687b      	ldr	r3, [r7, #4]
10003a0e:	685b      	ldr	r3, [r3, #4]
10003a10:	7fdb      	ldrb	r3, [r3, #31]
10003a12:	2b00      	cmp	r3, #0
10003a14:	d100      	bne.n	10003a18 <I2C_MASTER_ReceiveHandler+0x30>
10003a16:	e0df      	b.n	10003bd8 <I2C_MASTER_ReceiveHandler+0x1f0>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
10003a18:	e022      	b.n	10003a60 <I2C_MASTER_ReceiveHandler+0x78>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10003a1a:	68bb      	ldr	r3, [r7, #8]
10003a1c:	685a      	ldr	r2, [r3, #4]
10003a1e:	68bb      	ldr	r3, [r7, #8]
10003a20:	695b      	ldr	r3, [r3, #20]
10003a22:	18d4      	adds	r4, r2, r3
10003a24:	687b      	ldr	r3, [r7, #4]
10003a26:	1c18      	adds	r0, r3, #0
10003a28:	f7ff fcae 	bl	10003388 <I2C_MASTER_GetReceivedByte>
10003a2c:	1c03      	adds	r3, r0, #0
10003a2e:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
10003a30:	68bb      	ldr	r3, [r7, #8]
10003a32:	695b      	ldr	r3, [r3, #20]
10003a34:	1c5a      	adds	r2, r3, #1
10003a36:	68bb      	ldr	r3, [r7, #8]
10003a38:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10003a3a:	68bb      	ldr	r3, [r7, #8]
10003a3c:	695a      	ldr	r2, [r3, #20]
10003a3e:	68bb      	ldr	r3, [r7, #8]
10003a40:	691b      	ldr	r3, [r3, #16]
10003a42:	429a      	cmp	r2, r3
10003a44:	d10c      	bne.n	10003a60 <I2C_MASTER_ReceiveHandler+0x78>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
10003a46:	68bb      	ldr	r3, [r7, #8]
10003a48:	2227      	movs	r2, #39	; 0x27
10003a4a:	2100      	movs	r1, #0
10003a4c:	5499      	strb	r1, [r3, r2]

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
10003a4e:	687b      	ldr	r3, [r7, #4]
10003a50:	681a      	ldr	r2, [r3, #0]
10003a52:	23c0      	movs	r3, #192	; 0xc0
10003a54:	05db      	lsls	r3, r3, #23
10003a56:	1c10      	adds	r0, r2, #0
10003a58:	1c19      	adds	r1, r3, #0
10003a5a:	f7ff fc15 	bl	10003288 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
10003a5e:	e00a      	b.n	10003a76 <I2C_MASTER_ReceiveHandler+0x8e>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
10003a60:	687b      	ldr	r3, [r7, #4]
10003a62:	1c18      	adds	r0, r3, #0
10003a64:	f7ff fc82 	bl	1000336c <I2C_MASTER_IsRXFIFOEmpty>
10003a68:	1c03      	adds	r3, r0, #0
10003a6a:	1c1a      	adds	r2, r3, #0
10003a6c:	2301      	movs	r3, #1
10003a6e:	4053      	eors	r3, r2
10003a70:	b2db      	uxtb	r3, r3
10003a72:	2b00      	cmp	r3, #0
10003a74:	d1d1      	bne.n	10003a1a <I2C_MASTER_ReceiveHandler+0x32>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10003a76:	68bb      	ldr	r3, [r7, #8]
10003a78:	695a      	ldr	r2, [r3, #20]
10003a7a:	68bb      	ldr	r3, [r7, #8]
10003a7c:	691b      	ldr	r3, [r3, #16]
10003a7e:	429a      	cmp	r2, r3
10003a80:	d300      	bcc.n	10003a84 <I2C_MASTER_ReceiveHandler+0x9c>
10003a82:	e088      	b.n	10003b96 <I2C_MASTER_ReceiveHandler+0x1ae>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
10003a84:	68bb      	ldr	r3, [r7, #8]
10003a86:	691a      	ldr	r2, [r3, #16]
10003a88:	68bb      	ldr	r3, [r7, #8]
10003a8a:	695b      	ldr	r3, [r3, #20]
10003a8c:	1ad3      	subs	r3, r2, r3
10003a8e:	687a      	ldr	r2, [r7, #4]
10003a90:	1c10      	adds	r0, r2, #0
10003a92:	1c19      	adds	r1, r3, #0
10003a94:	f000 f96e 	bl	10003d74 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
10003a98:	687b      	ldr	r3, [r7, #4]
10003a9a:	685b      	ldr	r3, [r3, #4]
10003a9c:	7f9b      	ldrb	r3, [r3, #30]
10003a9e:	2b00      	cmp	r3, #0
10003aa0:	d015      	beq.n	10003ace <I2C_MASTER_ReceiveHandler+0xe6>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003aa2:	687b      	ldr	r3, [r7, #4]
10003aa4:	685b      	ldr	r3, [r3, #4]
10003aa6:	7f9b      	ldrb	r3, [r3, #30]
10003aa8:	1c1a      	adds	r2, r3, #0
10003aaa:	2301      	movs	r3, #1
10003aac:	4093      	lsls	r3, r2
10003aae:	1c1a      	adds	r2, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003ab0:	687b      	ldr	r3, [r7, #4]
10003ab2:	685b      	ldr	r3, [r3, #4]
10003ab4:	7fdb      	ldrb	r3, [r3, #31]
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003ab6:	1c19      	adds	r1, r3, #0
10003ab8:	2301      	movs	r3, #1
10003aba:	408b      	lsls	r3, r1
10003abc:	1c10      	adds	r0, r2, #0
10003abe:	1c19      	adds	r1, r3, #0
10003ac0:	f7ff fcf2 	bl	100034a8 <calculate_minfifosize>
10003ac4:	1c02      	adds	r2, r0, #0
10003ac6:	230e      	movs	r3, #14
10003ac8:	18fb      	adds	r3, r7, r3
10003aca:	701a      	strb	r2, [r3, #0]
10003acc:	e003      	b.n	10003ad6 <I2C_MASTER_ReceiveHandler+0xee>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
10003ace:	230e      	movs	r3, #14
10003ad0:	18fb      	adds	r3, r7, r3
10003ad2:	2202      	movs	r2, #2
10003ad4:	701a      	strb	r2, [r3, #0]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
10003ad6:	687b      	ldr	r3, [r7, #4]
10003ad8:	685b      	ldr	r3, [r3, #4]
10003ada:	7f9b      	ldrb	r3, [r3, #30]
10003adc:	2b00      	cmp	r3, #0
10003ade:	d041      	beq.n	10003b64 <I2C_MASTER_ReceiveHandler+0x17c>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003ae0:	e033      	b.n	10003b4a <I2C_MASTER_ReceiveHandler+0x162>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003ae2:	68bb      	ldr	r3, [r7, #8]
10003ae4:	68da      	ldr	r2, [r3, #12]
10003ae6:	68bb      	ldr	r3, [r7, #8]
10003ae8:	689b      	ldr	r3, [r3, #8]
10003aea:	429a      	cmp	r2, r3
10003aec:	d22c      	bcs.n	10003b48 <I2C_MASTER_ReceiveHandler+0x160>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003aee:	68bb      	ldr	r3, [r7, #8]
10003af0:	68db      	ldr	r3, [r3, #12]
10003af2:	1c5a      	adds	r2, r3, #1
10003af4:	68bb      	ldr	r3, [r7, #8]
10003af6:	689b      	ldr	r3, [r3, #8]
10003af8:	429a      	cmp	r2, r3
10003afa:	d108      	bne.n	10003b0e <I2C_MASTER_ReceiveHandler+0x126>
10003afc:	68bb      	ldr	r3, [r7, #8]
10003afe:	6a1b      	ldr	r3, [r3, #32]
10003b00:	2b01      	cmp	r3, #1
10003b02:	d104      	bne.n	10003b0e <I2C_MASTER_ReceiveHandler+0x126>
              {
                I2C_MASTER_ReceiveNACK(handle);
10003b04:	687b      	ldr	r3, [r7, #4]
10003b06:	1c18      	adds	r0, r3, #0
10003b08:	f7ff fc8a 	bl	10003420 <I2C_MASTER_ReceiveNACK>
10003b0c:	e003      	b.n	10003b16 <I2C_MASTER_ReceiveHandler+0x12e>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
10003b0e:	687b      	ldr	r3, [r7, #4]
10003b10:	1c18      	adds	r0, r3, #0
10003b12:	f7ff fc79 	bl	10003408 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
10003b16:	68bb      	ldr	r3, [r7, #8]
10003b18:	68db      	ldr	r3, [r3, #12]
10003b1a:	1c5a      	adds	r2, r3, #1
10003b1c:	68bb      	ldr	r3, [r7, #8]
10003b1e:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
10003b20:	230f      	movs	r3, #15
10003b22:	18fb      	adds	r3, r7, r3
10003b24:	220f      	movs	r2, #15
10003b26:	18ba      	adds	r2, r7, r2
10003b28:	7812      	ldrb	r2, [r2, #0]
10003b2a:	3201      	adds	r2, #1
10003b2c:	701a      	strb	r2, [r3, #0]
10003b2e:	230f      	movs	r3, #15
10003b30:	18fa      	adds	r2, r7, r3
10003b32:	230e      	movs	r3, #14
10003b34:	18fb      	adds	r3, r7, r3
10003b36:	7812      	ldrb	r2, [r2, #0]
10003b38:	781b      	ldrb	r3, [r3, #0]
10003b3a:	429a      	cmp	r2, r3
10003b3c:	d305      	bcc.n	10003b4a <I2C_MASTER_ReceiveHandler+0x162>
              {
                fifo_lindex = 0U;
10003b3e:	230f      	movs	r3, #15
10003b40:	18fb      	adds	r3, r7, r3
10003b42:	2200      	movs	r2, #0
10003b44:	701a      	strb	r2, [r3, #0]
                break;
10003b46:	e00c      	b.n	10003b62 <I2C_MASTER_ReceiveHandler+0x17a>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
10003b48:	e00b      	b.n	10003b62 <I2C_MASTER_ReceiveHandler+0x17a>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003b4a:	687b      	ldr	r3, [r7, #4]
10003b4c:	1c18      	adds	r0, r3, #0
10003b4e:	f7ff fbff 	bl	10003350 <I2C_MASTER_IsTXFIFOFull>
10003b52:	1c03      	adds	r3, r0, #0
10003b54:	1c1a      	adds	r2, r3, #0
10003b56:	2301      	movs	r3, #1
10003b58:	4053      	eors	r3, r2
10003b5a:	b2db      	uxtb	r3, r3
10003b5c:	2b00      	cmp	r3, #0
10003b5e:	d1c0      	bne.n	10003ae2 <I2C_MASTER_ReceiveHandler+0xfa>
10003b60:	e019      	b.n	10003b96 <I2C_MASTER_ReceiveHandler+0x1ae>
10003b62:	e018      	b.n	10003b96 <I2C_MASTER_ReceiveHandler+0x1ae>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003b64:	68bb      	ldr	r3, [r7, #8]
10003b66:	68db      	ldr	r3, [r3, #12]
10003b68:	1c5a      	adds	r2, r3, #1
10003b6a:	68bb      	ldr	r3, [r7, #8]
10003b6c:	689b      	ldr	r3, [r3, #8]
10003b6e:	429a      	cmp	r2, r3
10003b70:	d108      	bne.n	10003b84 <I2C_MASTER_ReceiveHandler+0x19c>
10003b72:	68bb      	ldr	r3, [r7, #8]
10003b74:	6a1b      	ldr	r3, [r3, #32]
10003b76:	2b01      	cmp	r3, #1
10003b78:	d104      	bne.n	10003b84 <I2C_MASTER_ReceiveHandler+0x19c>
         {
           I2C_MASTER_ReceiveNACK(handle);
10003b7a:	687b      	ldr	r3, [r7, #4]
10003b7c:	1c18      	adds	r0, r3, #0
10003b7e:	f7ff fc4f 	bl	10003420 <I2C_MASTER_ReceiveNACK>
10003b82:	e003      	b.n	10003b8c <I2C_MASTER_ReceiveHandler+0x1a4>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
10003b84:	687b      	ldr	r3, [r7, #4]
10003b86:	1c18      	adds	r0, r3, #0
10003b88:	f7ff fc3e 	bl	10003408 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
10003b8c:	68bb      	ldr	r3, [r7, #8]
10003b8e:	68db      	ldr	r3, [r3, #12]
10003b90:	1c5a      	adds	r2, r3, #1
10003b92:	68bb      	ldr	r3, [r7, #8]
10003b94:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10003b96:	68bb      	ldr	r3, [r7, #8]
10003b98:	695a      	ldr	r2, [r3, #20]
10003b9a:	68bb      	ldr	r3, [r7, #8]
10003b9c:	691b      	ldr	r3, [r3, #16]
10003b9e:	429a      	cmp	r2, r3
10003ba0:	d162      	bne.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
10003ba2:	687b      	ldr	r3, [r7, #4]
10003ba4:	681a      	ldr	r2, [r3, #0]
10003ba6:	23c0      	movs	r3, #192	; 0xc0
10003ba8:	05db      	lsls	r3, r3, #23
10003baa:	1c10      	adds	r0, r2, #0
10003bac:	1c19      	adds	r1, r3, #0
10003bae:	f7ff fb6b 	bl	10003288 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10003bb2:	687b      	ldr	r3, [r7, #4]
10003bb4:	681a      	ldr	r2, [r3, #0]
10003bb6:	23c0      	movs	r3, #192	; 0xc0
10003bb8:	021b      	lsls	r3, r3, #8
10003bba:	1c10      	adds	r0, r2, #0
10003bbc:	1c19      	adds	r1, r3, #0
10003bbe:	f7ff faeb 	bl	10003198 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
10003bc2:	68bb      	ldr	r3, [r7, #8]
10003bc4:	2228      	movs	r2, #40	; 0x28
10003bc6:	5c9b      	ldrb	r3, [r3, r2]
10003bc8:	b2db      	uxtb	r3, r3
10003bca:	2b00      	cmp	r3, #0
10003bcc:	d04c      	beq.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
10003bce:	687b      	ldr	r3, [r7, #4]
10003bd0:	1c18      	adds	r0, r3, #0
10003bd2:	f000 f84d 	bl	10003c70 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
10003bd6:	e047      	b.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10003bd8:	68bb      	ldr	r3, [r7, #8]
10003bda:	685a      	ldr	r2, [r3, #4]
10003bdc:	68bb      	ldr	r3, [r7, #8]
10003bde:	695b      	ldr	r3, [r3, #20]
10003be0:	18d4      	adds	r4, r2, r3
10003be2:	687b      	ldr	r3, [r7, #4]
10003be4:	1c18      	adds	r0, r3, #0
10003be6:	f7ff fbcf 	bl	10003388 <I2C_MASTER_GetReceivedByte>
10003bea:	1c03      	adds	r3, r0, #0
10003bec:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
10003bee:	68bb      	ldr	r3, [r7, #8]
10003bf0:	695b      	ldr	r3, [r3, #20]
10003bf2:	1c5a      	adds	r2, r3, #1
10003bf4:	68bb      	ldr	r3, [r7, #8]
10003bf6:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10003bf8:	68bb      	ldr	r3, [r7, #8]
10003bfa:	695a      	ldr	r2, [r3, #20]
10003bfc:	68bb      	ldr	r3, [r7, #8]
10003bfe:	691b      	ldr	r3, [r3, #16]
10003c00:	429a      	cmp	r2, r3
10003c02:	d21f      	bcs.n	10003c44 <I2C_MASTER_ReceiveHandler+0x25c>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003c04:	68bb      	ldr	r3, [r7, #8]
10003c06:	68da      	ldr	r2, [r3, #12]
10003c08:	68bb      	ldr	r3, [r7, #8]
10003c0a:	689b      	ldr	r3, [r3, #8]
10003c0c:	429a      	cmp	r2, r3
10003c0e:	d22b      	bcs.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
10003c10:	68bb      	ldr	r3, [r7, #8]
10003c12:	68da      	ldr	r2, [r3, #12]
10003c14:	68bb      	ldr	r3, [r7, #8]
10003c16:	689b      	ldr	r3, [r3, #8]
10003c18:	3b01      	subs	r3, #1
10003c1a:	429a      	cmp	r2, r3
10003c1c:	d108      	bne.n	10003c30 <I2C_MASTER_ReceiveHandler+0x248>
10003c1e:	68bb      	ldr	r3, [r7, #8]
10003c20:	6a1b      	ldr	r3, [r3, #32]
10003c22:	2b01      	cmp	r3, #1
10003c24:	d104      	bne.n	10003c30 <I2C_MASTER_ReceiveHandler+0x248>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003c26:	687b      	ldr	r3, [r7, #4]
10003c28:	1c18      	adds	r0, r3, #0
10003c2a:	f7ff fbf9 	bl	10003420 <I2C_MASTER_ReceiveNACK>
10003c2e:	e003      	b.n	10003c38 <I2C_MASTER_ReceiveHandler+0x250>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003c30:	687b      	ldr	r3, [r7, #4]
10003c32:	1c18      	adds	r0, r3, #0
10003c34:	f7ff fbe8 	bl	10003408 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003c38:	68bb      	ldr	r3, [r7, #8]
10003c3a:	68db      	ldr	r3, [r3, #12]
10003c3c:	1c5a      	adds	r2, r3, #1
10003c3e:	68bb      	ldr	r3, [r7, #8]
10003c40:	60da      	str	r2, [r3, #12]
10003c42:	e011      	b.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10003c44:	687b      	ldr	r3, [r7, #4]
10003c46:	681a      	ldr	r2, [r3, #0]
10003c48:	23c0      	movs	r3, #192	; 0xc0
10003c4a:	021b      	lsls	r3, r3, #8
10003c4c:	1c10      	adds	r0, r2, #0
10003c4e:	1c19      	adds	r1, r3, #0
10003c50:	f7ff faa2 	bl	10003198 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
10003c54:	68bb      	ldr	r3, [r7, #8]
10003c56:	2228      	movs	r2, #40	; 0x28
10003c58:	5c9b      	ldrb	r3, [r3, r2]
10003c5a:	b2db      	uxtb	r3, r3
10003c5c:	2b00      	cmp	r3, #0
10003c5e:	d003      	beq.n	10003c68 <I2C_MASTER_ReceiveHandler+0x280>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
10003c60:	687b      	ldr	r3, [r7, #4]
10003c62:	1c18      	adds	r0, r3, #0
10003c64:	f000 f804 	bl	10003c70 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
10003c68:	46bd      	mov	sp, r7
10003c6a:	b005      	add	sp, #20
10003c6c:	bd90      	pop	{r4, r7, pc}
10003c6e:	46c0      	nop			; (mov r8, r8)

10003c70 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
10003c70:	b580      	push	{r7, lr}
10003c72:	b084      	sub	sp, #16
10003c74:	af00      	add	r7, sp, #0
10003c76:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003c78:	687b      	ldr	r3, [r7, #4]
10003c7a:	689b      	ldr	r3, [r3, #8]
10003c7c:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
10003c7e:	68fb      	ldr	r3, [r7, #12]
10003c80:	69db      	ldr	r3, [r3, #28]
10003c82:	2b01      	cmp	r3, #1
10003c84:	d110      	bne.n	10003ca8 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003c86:	46c0      	nop			; (mov r8, r8)
10003c88:	687b      	ldr	r3, [r7, #4]
10003c8a:	681b      	ldr	r3, [r3, #0]
10003c8c:	1c18      	adds	r0, r3, #0
10003c8e:	f7ff fa93 	bl	100031b8 <XMC_USIC_CH_GetTransmitBufferStatus>
10003c92:	1e03      	subs	r3, r0, #0
10003c94:	2b80      	cmp	r3, #128	; 0x80
10003c96:	d0f7      	beq.n	10003c88 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
10003c98:	68fb      	ldr	r3, [r7, #12]
10003c9a:	2228      	movs	r2, #40	; 0x28
10003c9c:	2100      	movs	r1, #0
10003c9e:	5499      	strb	r1, [r3, r2]

    I2C_MASTER_SendStop(handle);
10003ca0:	687b      	ldr	r3, [r7, #4]
10003ca2:	1c18      	adds	r0, r3, #0
10003ca4:	f7ff fbc8 	bl	10003438 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003ca8:	46c0      	nop			; (mov r8, r8)
10003caa:	687b      	ldr	r3, [r7, #4]
10003cac:	681b      	ldr	r3, [r3, #0]
10003cae:	1c18      	adds	r0, r3, #0
10003cb0:	f7ff fa82 	bl	100031b8 <XMC_USIC_CH_GetTransmitBufferStatus>
10003cb4:	1e03      	subs	r3, r0, #0
10003cb6:	2b80      	cmp	r3, #128	; 0x80
10003cb8:	d0f7      	beq.n	10003caa <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x3a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
10003cba:	68fb      	ldr	r3, [r7, #12]
10003cbc:	2227      	movs	r2, #39	; 0x27
10003cbe:	2100      	movs	r1, #0
10003cc0:	5499      	strb	r1, [r3, r2]
  ptr_runtime->tx_busy = false;
10003cc2:	68fb      	ldr	r3, [r7, #12]
10003cc4:	2226      	movs	r2, #38	; 0x26
10003cc6:	2100      	movs	r1, #0
10003cc8:	5499      	strb	r1, [r3, r2]

  if (handle->config->rx_cbhandler != NULL)
10003cca:	687b      	ldr	r3, [r7, #4]
10003ccc:	685b      	ldr	r3, [r3, #4]
10003cce:	68db      	ldr	r3, [r3, #12]
10003cd0:	2b00      	cmp	r3, #0
10003cd2:	d003      	beq.n	10003cdc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6c>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
10003cd4:	687b      	ldr	r3, [r7, #4]
10003cd6:	685b      	ldr	r3, [r3, #4]
10003cd8:	68db      	ldr	r3, [r3, #12]
10003cda:	4798      	blx	r3
  }
}
10003cdc:	46bd      	mov	sp, r7
10003cde:	b004      	add	sp, #16
10003ce0:	bd80      	pop	{r7, pc}
10003ce2:	46c0      	nop			; (mov r8, r8)

10003ce4 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
10003ce4:	b580      	push	{r7, lr}
10003ce6:	b084      	sub	sp, #16
10003ce8:	af00      	add	r7, sp, #0
10003cea:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
10003cec:	687b      	ldr	r3, [r7, #4]
10003cee:	681b      	ldr	r3, [r3, #0]
10003cf0:	1c18      	adds	r0, r3, #0
10003cf2:	f7ff fb01 	bl	100032f8 <XMC_I2C_CH_GetStatusFlag>
10003cf6:	1c03      	adds	r3, r0, #0
10003cf8:	60fb      	str	r3, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
10003cfa:	687b      	ldr	r3, [r7, #4]
10003cfc:	685b      	ldr	r3, [r3, #4]
10003cfe:	691b      	ldr	r3, [r3, #16]
10003d00:	2b00      	cmp	r3, #0
10003d02:	d00c      	beq.n	10003d1e <I2C_MASTER_ProtocolHandler+0x3a>
10003d04:	68fb      	ldr	r3, [r7, #12]
10003d06:	2220      	movs	r2, #32
10003d08:	4013      	ands	r3, r2
10003d0a:	d008      	beq.n	10003d1e <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
10003d0c:	687b      	ldr	r3, [r7, #4]
10003d0e:	1c18      	adds	r0, r3, #0
10003d10:	2120      	movs	r1, #32
10003d12:	f7ff fc0d 	bl	10003530 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
10003d16:	687b      	ldr	r3, [r7, #4]
10003d18:	685b      	ldr	r3, [r3, #4]
10003d1a:	691b      	ldr	r3, [r3, #16]
10003d1c:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
10003d1e:	687b      	ldr	r3, [r7, #4]
10003d20:	685b      	ldr	r3, [r3, #4]
10003d22:	695b      	ldr	r3, [r3, #20]
10003d24:	2b00      	cmp	r3, #0
10003d26:	d00c      	beq.n	10003d42 <I2C_MASTER_ProtocolHandler+0x5e>
10003d28:	68fb      	ldr	r3, [r7, #12]
10003d2a:	2240      	movs	r2, #64	; 0x40
10003d2c:	4013      	ands	r3, r2
10003d2e:	d008      	beq.n	10003d42 <I2C_MASTER_ProtocolHandler+0x5e>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
10003d30:	687b      	ldr	r3, [r7, #4]
10003d32:	1c18      	adds	r0, r3, #0
10003d34:	2140      	movs	r1, #64	; 0x40
10003d36:	f7ff fbfb 	bl	10003530 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
10003d3a:	687b      	ldr	r3, [r7, #4]
10003d3c:	685b      	ldr	r3, [r3, #4]
10003d3e:	695b      	ldr	r3, [r3, #20]
10003d40:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
10003d42:	687b      	ldr	r3, [r7, #4]
10003d44:	685b      	ldr	r3, [r3, #4]
10003d46:	699b      	ldr	r3, [r3, #24]
10003d48:	2b00      	cmp	r3, #0
10003d4a:	d00f      	beq.n	10003d6c <I2C_MASTER_ProtocolHandler+0x88>
10003d4c:	68fa      	ldr	r2, [r7, #12]
10003d4e:	2381      	movs	r3, #129	; 0x81
10003d50:	005b      	lsls	r3, r3, #1
10003d52:	4013      	ands	r3, r2
10003d54:	d00a      	beq.n	10003d6c <I2C_MASTER_ProtocolHandler+0x88>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
10003d56:	687a      	ldr	r2, [r7, #4]
10003d58:	2380      	movs	r3, #128	; 0x80
10003d5a:	005b      	lsls	r3, r3, #1
10003d5c:	1c10      	adds	r0, r2, #0
10003d5e:	1c19      	adds	r1, r3, #0
10003d60:	f7ff fbe6 	bl	10003530 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
10003d64:	687b      	ldr	r3, [r7, #4]
10003d66:	685b      	ldr	r3, [r3, #4]
10003d68:	699b      	ldr	r3, [r3, #24]
10003d6a:	4798      	blx	r3
  }
}
10003d6c:	46bd      	mov	sp, r7
10003d6e:	b004      	add	sp, #16
10003d70:	bd80      	pop	{r7, pc}
10003d72:	46c0      	nop			; (mov r8, r8)

10003d74 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
10003d74:	b580      	push	{r7, lr}
10003d76:	b086      	sub	sp, #24
10003d78:	af00      	add	r7, sp, #0
10003d7a:	6078      	str	r0, [r7, #4]
10003d7c:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
10003d7e:	687b      	ldr	r3, [r7, #4]
10003d80:	685b      	ldr	r3, [r3, #4]
10003d82:	7fdb      	ldrb	r3, [r3, #31]
10003d84:	1c1a      	adds	r2, r3, #0
10003d86:	2301      	movs	r3, #1
10003d88:	4093      	lsls	r3, r2
10003d8a:	1c1a      	adds	r2, r3, #0
10003d8c:	2316      	movs	r3, #22
10003d8e:	18fb      	adds	r3, r7, r3
10003d90:	701a      	strb	r2, [r3, #0]

  if ((handle->config->txFIFO_size > 0))
10003d92:	687b      	ldr	r3, [r7, #4]
10003d94:	685b      	ldr	r3, [r3, #4]
10003d96:	7f9b      	ldrb	r3, [r3, #30]
10003d98:	2b00      	cmp	r3, #0
10003d9a:	d00a      	beq.n	10003db2 <I2C_MASTER_lReconfigureRxFIFO+0x3e>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
10003d9c:	687b      	ldr	r3, [r7, #4]
10003d9e:	685b      	ldr	r3, [r3, #4]
10003da0:	7f9b      	ldrb	r3, [r3, #30]
10003da2:	1c1a      	adds	r2, r3, #0
10003da4:	2301      	movs	r3, #1
10003da6:	4093      	lsls	r3, r2
10003da8:	1c1a      	adds	r2, r3, #0
10003daa:	2317      	movs	r3, #23
10003dac:	18fb      	adds	r3, r7, r3
10003dae:	701a      	strb	r2, [r3, #0]
10003db0:	e003      	b.n	10003dba <I2C_MASTER_lReconfigureRxFIFO+0x46>
  }
  else
  {
    tx_fifo_size = 1U;
10003db2:	2317      	movs	r3, #23
10003db4:	18fb      	adds	r3, r7, r3
10003db6:	2201      	movs	r2, #1
10003db8:	701a      	strb	r2, [r3, #0]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
10003dba:	2317      	movs	r3, #23
10003dbc:	18fb      	adds	r3, r7, r3
10003dbe:	781a      	ldrb	r2, [r3, #0]
10003dc0:	2316      	movs	r3, #22
10003dc2:	18fb      	adds	r3, r7, r3
10003dc4:	781b      	ldrb	r3, [r3, #0]
10003dc6:	1c10      	adds	r0, r2, #0
10003dc8:	1c19      	adds	r1, r3, #0
10003dca:	f7ff fb6d 	bl	100034a8 <calculate_minfifosize>
10003dce:	1c03      	adds	r3, r0, #0
10003dd0:	613b      	str	r3, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
10003dd2:	683a      	ldr	r2, [r7, #0]
10003dd4:	693b      	ldr	r3, [r7, #16]
10003dd6:	1c10      	adds	r0, r2, #0
10003dd8:	1c19      	adds	r1, r3, #0
10003dda:	f7ff fb65 	bl	100034a8 <calculate_minfifosize>
10003dde:	1c02      	adds	r2, r0, #0
10003de0:	230f      	movs	r3, #15
10003de2:	18fb      	adds	r3, r7, r3
10003de4:	701a      	strb	r2, [r3, #0]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
10003de6:	687b      	ldr	r3, [r7, #4]
10003de8:	685b      	ldr	r3, [r3, #4]
10003dea:	7fdb      	ldrb	r3, [r3, #31]
10003dec:	1c19      	adds	r1, r3, #0
10003dee:	230f      	movs	r3, #15
10003df0:	18fb      	adds	r3, r7, r3
10003df2:	781b      	ldrb	r3, [r3, #0]
10003df4:	3b01      	subs	r3, #1
10003df6:	687a      	ldr	r2, [r7, #4]
10003df8:	1c10      	adds	r0, r2, #0
10003dfa:	1c1a      	adds	r2, r3, #0
10003dfc:	f7ff fa94 	bl	10003328 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
10003e00:	46bd      	mov	sp, r7
10003e02:	b006      	add	sp, #24
10003e04:	bd80      	pop	{r7, pc}
10003e06:	46c0      	nop			; (mov r8, r8)

10003e08 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003e08:	b580      	push	{r7, lr}
10003e0a:	b082      	sub	sp, #8
10003e0c:	af00      	add	r7, sp, #0
10003e0e:	1c02      	adds	r2, r0, #0
10003e10:	1dfb      	adds	r3, r7, #7
10003e12:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10003e14:	4b06      	ldr	r3, [pc, #24]	; (10003e30 <NVIC_EnableIRQ+0x28>)
10003e16:	1dfa      	adds	r2, r7, #7
10003e18:	7812      	ldrb	r2, [r2, #0]
10003e1a:	1c11      	adds	r1, r2, #0
10003e1c:	221f      	movs	r2, #31
10003e1e:	400a      	ands	r2, r1
10003e20:	2101      	movs	r1, #1
10003e22:	4091      	lsls	r1, r2
10003e24:	1c0a      	adds	r2, r1, #0
10003e26:	601a      	str	r2, [r3, #0]
}
10003e28:	46bd      	mov	sp, r7
10003e2a:	b002      	add	sp, #8
10003e2c:	bd80      	pop	{r7, pc}
10003e2e:	46c0      	nop			; (mov r8, r8)
10003e30:	e000e100 	.word	0xe000e100

10003e34 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003e34:	b5b0      	push	{r4, r5, r7, lr}
10003e36:	b082      	sub	sp, #8
10003e38:	af00      	add	r7, sp, #0
10003e3a:	1c02      	adds	r2, r0, #0
10003e3c:	6039      	str	r1, [r7, #0]
10003e3e:	1dfb      	adds	r3, r7, #7
10003e40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
10003e42:	1dfb      	adds	r3, r7, #7
10003e44:	781b      	ldrb	r3, [r3, #0]
10003e46:	2b7f      	cmp	r3, #127	; 0x7f
10003e48:	d92f      	bls.n	10003eaa <NVIC_SetPriority+0x76>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003e4a:	4c2d      	ldr	r4, [pc, #180]	; (10003f00 <NVIC_SetPriority+0xcc>)
10003e4c:	1dfb      	adds	r3, r7, #7
10003e4e:	781b      	ldrb	r3, [r3, #0]
10003e50:	1c1a      	adds	r2, r3, #0
10003e52:	230f      	movs	r3, #15
10003e54:	4013      	ands	r3, r2
10003e56:	3b08      	subs	r3, #8
10003e58:	0899      	lsrs	r1, r3, #2
10003e5a:	4a29      	ldr	r2, [pc, #164]	; (10003f00 <NVIC_SetPriority+0xcc>)
10003e5c:	1dfb      	adds	r3, r7, #7
10003e5e:	781b      	ldrb	r3, [r3, #0]
10003e60:	1c18      	adds	r0, r3, #0
10003e62:	230f      	movs	r3, #15
10003e64:	4003      	ands	r3, r0
10003e66:	3b08      	subs	r3, #8
10003e68:	089b      	lsrs	r3, r3, #2
10003e6a:	3306      	adds	r3, #6
10003e6c:	009b      	lsls	r3, r3, #2
10003e6e:	18d3      	adds	r3, r2, r3
10003e70:	685b      	ldr	r3, [r3, #4]
10003e72:	1dfa      	adds	r2, r7, #7
10003e74:	7812      	ldrb	r2, [r2, #0]
10003e76:	1c10      	adds	r0, r2, #0
10003e78:	2203      	movs	r2, #3
10003e7a:	4002      	ands	r2, r0
10003e7c:	00d2      	lsls	r2, r2, #3
10003e7e:	1c10      	adds	r0, r2, #0
10003e80:	22ff      	movs	r2, #255	; 0xff
10003e82:	4082      	lsls	r2, r0
10003e84:	43d2      	mvns	r2, r2
10003e86:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003e88:	683b      	ldr	r3, [r7, #0]
10003e8a:	019b      	lsls	r3, r3, #6
10003e8c:	20ff      	movs	r0, #255	; 0xff
10003e8e:	4003      	ands	r3, r0
10003e90:	1df8      	adds	r0, r7, #7
10003e92:	7800      	ldrb	r0, [r0, #0]
10003e94:	1c05      	adds	r5, r0, #0
10003e96:	2003      	movs	r0, #3
10003e98:	4028      	ands	r0, r5
10003e9a:	00c0      	lsls	r0, r0, #3
10003e9c:	4083      	lsls	r3, r0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003e9e:	431a      	orrs	r2, r3
10003ea0:	1d8b      	adds	r3, r1, #6
10003ea2:	009b      	lsls	r3, r3, #2
10003ea4:	18e3      	adds	r3, r4, r3
10003ea6:	605a      	str	r2, [r3, #4]
10003ea8:	e026      	b.n	10003ef8 <NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003eaa:	4c16      	ldr	r4, [pc, #88]	; (10003f04 <NVIC_SetPriority+0xd0>)
10003eac:	1dfb      	adds	r3, r7, #7
10003eae:	781b      	ldrb	r3, [r3, #0]
10003eb0:	b25b      	sxtb	r3, r3
10003eb2:	089b      	lsrs	r3, r3, #2
10003eb4:	4913      	ldr	r1, [pc, #76]	; (10003f04 <NVIC_SetPriority+0xd0>)
10003eb6:	1dfa      	adds	r2, r7, #7
10003eb8:	7812      	ldrb	r2, [r2, #0]
10003eba:	b252      	sxtb	r2, r2
10003ebc:	0892      	lsrs	r2, r2, #2
10003ebe:	32c0      	adds	r2, #192	; 0xc0
10003ec0:	0092      	lsls	r2, r2, #2
10003ec2:	5852      	ldr	r2, [r2, r1]
10003ec4:	1df9      	adds	r1, r7, #7
10003ec6:	7809      	ldrb	r1, [r1, #0]
10003ec8:	1c08      	adds	r0, r1, #0
10003eca:	2103      	movs	r1, #3
10003ecc:	4001      	ands	r1, r0
10003ece:	00c9      	lsls	r1, r1, #3
10003ed0:	1c08      	adds	r0, r1, #0
10003ed2:	21ff      	movs	r1, #255	; 0xff
10003ed4:	4081      	lsls	r1, r0
10003ed6:	43c9      	mvns	r1, r1
10003ed8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003eda:	683a      	ldr	r2, [r7, #0]
10003edc:	0192      	lsls	r2, r2, #6
10003ede:	20ff      	movs	r0, #255	; 0xff
10003ee0:	4002      	ands	r2, r0
10003ee2:	1df8      	adds	r0, r7, #7
10003ee4:	7800      	ldrb	r0, [r0, #0]
10003ee6:	1c05      	adds	r5, r0, #0
10003ee8:	2003      	movs	r0, #3
10003eea:	4028      	ands	r0, r5
10003eec:	00c0      	lsls	r0, r0, #3
10003eee:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003ef0:	430a      	orrs	r2, r1
10003ef2:	33c0      	adds	r3, #192	; 0xc0
10003ef4:	009b      	lsls	r3, r3, #2
10003ef6:	511a      	str	r2, [r3, r4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003ef8:	46bd      	mov	sp, r7
10003efa:	b002      	add	sp, #8
10003efc:	bdb0      	pop	{r4, r5, r7, pc}
10003efe:	46c0      	nop			; (mov r8, r8)
10003f00:	e000ed00 	.word	0xe000ed00
10003f04:	e000e100 	.word	0xe000e100

10003f08 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10003f08:	b580      	push	{r7, lr}
10003f0a:	b082      	sub	sp, #8
10003f0c:	af00      	add	r7, sp, #0
10003f0e:	6078      	str	r0, [r7, #4]
10003f10:	1c08      	adds	r0, r1, #0
10003f12:	1c11      	adds	r1, r2, #0
10003f14:	1cfb      	adds	r3, r7, #3
10003f16:	1c02      	adds	r2, r0, #0
10003f18:	701a      	strb	r2, [r3, #0]
10003f1a:	1cbb      	adds	r3, r7, #2
10003f1c:	1c0a      	adds	r2, r1, #0
10003f1e:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003f20:	1cfb      	adds	r3, r7, #3
10003f22:	7818      	ldrb	r0, [r3, #0]
10003f24:	1cfb      	adds	r3, r7, #3
10003f26:	781b      	ldrb	r3, [r3, #0]
10003f28:	687a      	ldr	r2, [r7, #4]
10003f2a:	3306      	adds	r3, #6
10003f2c:	009b      	lsls	r3, r3, #2
10003f2e:	18d3      	adds	r3, r2, r3
10003f30:	685b      	ldr	r3, [r3, #4]
10003f32:	2207      	movs	r2, #7
10003f34:	4393      	bics	r3, r2
10003f36:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10003f38:	1cbb      	adds	r3, r7, #2
10003f3a:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003f3c:	431a      	orrs	r2, r3
10003f3e:	6879      	ldr	r1, [r7, #4]
10003f40:	1d83      	adds	r3, r0, #6
10003f42:	009b      	lsls	r3, r3, #2
10003f44:	18cb      	adds	r3, r1, r3
10003f46:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10003f48:	46bd      	mov	sp, r7
10003f4a:	b002      	add	sp, #8
10003f4c:	bd80      	pop	{r7, pc}
10003f4e:	46c0      	nop			; (mov r8, r8)

10003f50 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003f50:	b580      	push	{r7, lr}
10003f52:	b082      	sub	sp, #8
10003f54:	af00      	add	r7, sp, #0
10003f56:	6078      	str	r0, [r7, #4]
10003f58:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10003f5a:	687a      	ldr	r2, [r7, #4]
10003f5c:	2384      	movs	r3, #132	; 0x84
10003f5e:	005b      	lsls	r3, r3, #1
10003f60:	58d2      	ldr	r2, [r2, r3]
10003f62:	683b      	ldr	r3, [r7, #0]
10003f64:	431a      	orrs	r2, r3
10003f66:	1c11      	adds	r1, r2, #0
10003f68:	687a      	ldr	r2, [r7, #4]
10003f6a:	2384      	movs	r3, #132	; 0x84
10003f6c:	005b      	lsls	r3, r3, #1
10003f6e:	50d1      	str	r1, [r2, r3]
}
10003f70:	46bd      	mov	sp, r7
10003f72:	b002      	add	sp, #8
10003f74:	bd80      	pop	{r7, pc}
10003f76:	46c0      	nop			; (mov r8, r8)

10003f78 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003f78:	b580      	push	{r7, lr}
10003f7a:	b082      	sub	sp, #8
10003f7c:	af00      	add	r7, sp, #0
10003f7e:	6078      	str	r0, [r7, #4]
10003f80:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10003f82:	687a      	ldr	r2, [r7, #4]
10003f84:	2386      	movs	r3, #134	; 0x86
10003f86:	005b      	lsls	r3, r3, #1
10003f88:	58d2      	ldr	r2, [r2, r3]
10003f8a:	683b      	ldr	r3, [r7, #0]
10003f8c:	431a      	orrs	r2, r3
10003f8e:	1c11      	adds	r1, r2, #0
10003f90:	687a      	ldr	r2, [r7, #4]
10003f92:	2386      	movs	r3, #134	; 0x86
10003f94:	005b      	lsls	r3, r3, #1
10003f96:	50d1      	str	r1, [r2, r3]
}
10003f98:	46bd      	mov	sp, r7
10003f9a:	b002      	add	sp, #8
10003f9c:	bd80      	pop	{r7, pc}
10003f9e:	46c0      	nop			; (mov r8, r8)

10003fa0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
10003fa0:	b580      	push	{r7, lr}
10003fa2:	b082      	sub	sp, #8
10003fa4:	af00      	add	r7, sp, #0
10003fa6:	6078      	str	r0, [r7, #4]
10003fa8:	1c0a      	adds	r2, r1, #0
10003faa:	1cfb      	adds	r3, r7, #3
10003fac:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
10003fae:	687b      	ldr	r3, [r7, #4]
10003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003fb2:	220f      	movs	r2, #15
10003fb4:	4393      	bics	r3, r2
10003fb6:	1c1a      	adds	r2, r3, #0
10003fb8:	1cfb      	adds	r3, r7, #3
10003fba:	781b      	ldrb	r3, [r3, #0]
10003fbc:	431a      	orrs	r2, r3
10003fbe:	687b      	ldr	r3, [r7, #4]
10003fc0:	641a      	str	r2, [r3, #64]	; 0x40
}
10003fc2:	46bd      	mov	sp, r7
10003fc4:	b002      	add	sp, #8
10003fc6:	bd80      	pop	{r7, pc}

10003fc8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
10003fc8:	b580      	push	{r7, lr}
10003fca:	b082      	sub	sp, #8
10003fcc:	af00      	add	r7, sp, #0
10003fce:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
10003fd0:	687b      	ldr	r3, [r7, #4]
10003fd2:	1c18      	adds	r0, r3, #0
10003fd4:	2104      	movs	r1, #4
10003fd6:	f7ff ffe3 	bl	10003fa0 <XMC_USIC_CH_SetMode>
}
10003fda:	46bd      	mov	sp, r7
10003fdc:	b002      	add	sp, #8
10003fde:	bd80      	pop	{r7, pc}

10003fe0 <i2c_bus_init>:
  .config = &i2c_bus_config,
  .runtime = &i2c_bus_runtime
};

void i2c_bus_init(void)
{
10003fe0:	b580      	push	{r7, lr}
10003fe2:	b086      	sub	sp, #24
10003fe4:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
10003fe6:	2300      	movs	r3, #0
10003fe8:	617b      	str	r3, [r7, #20]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
10003fea:	23c0      	movs	r3, #192	; 0xc0
10003fec:	05db      	lsls	r3, r3, #23
10003fee:	613b      	str	r3, [r7, #16]
  const XMC_GPIO_CONFIG_t i2c_bus_sda_pin_config   =
10003ff0:	2308      	movs	r3, #8
10003ff2:	18fb      	adds	r3, r7, r3
10003ff4:	2200      	movs	r2, #0
10003ff6:	601a      	str	r2, [r3, #0]
10003ff8:	2200      	movs	r2, #0
10003ffa:	605a      	str	r2, [r3, #4]
10003ffc:	2308      	movs	r3, #8
10003ffe:	18fb      	adds	r3, r7, r3
10004000:	22f8      	movs	r2, #248	; 0xf8
10004002:	701a      	strb	r2, [r3, #0]
10004004:	2308      	movs	r3, #8
10004006:	18fb      	adds	r3, r7, r3
10004008:	2201      	movs	r2, #1
1000400a:	605a      	str	r2, [r3, #4]
  { 
	.mode = XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT7,
	.output_level   = XMC_GPIO_OUTPUT_LEVEL_HIGH,
  }; 
  const XMC_GPIO_CONFIG_t i2c_bus_scl_pin_config   =
1000400c:	1c3b      	adds	r3, r7, #0
1000400e:	2200      	movs	r2, #0
10004010:	601a      	str	r2, [r3, #0]
10004012:	2200      	movs	r2, #0
10004014:	605a      	str	r2, [r3, #4]
10004016:	1c3b      	adds	r3, r7, #0
10004018:	22f0      	movs	r2, #240	; 0xf0
1000401a:	701a      	strb	r2, [r3, #0]
1000401c:	1c3b      	adds	r3, r7, #0
1000401e:	2201      	movs	r2, #1
10004020:	605a      	str	r2, [r3, #4]
  { 
	.mode = XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT6,
	.output_level  = XMC_GPIO_OUTPUT_LEVEL_HIGH,
  }; 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &i2c_bus_channel_config);
10004022:	4a3d      	ldr	r2, [pc, #244]	; (10004118 <i2c_bus_init+0x138>)
10004024:	4b3d      	ldr	r3, [pc, #244]	; (1000411c <i2c_bus_init+0x13c>)
10004026:	1c10      	adds	r0, r2, #0
10004028:	1c19      	adds	r1, r3, #0
1000402a:	f7fd fde3 	bl	10001bf4 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 5);
1000402e:	4b3a      	ldr	r3, [pc, #232]	; (10004118 <i2c_bus_init+0x138>)
10004030:	1c18      	adds	r0, r3, #0
10004032:	2100      	movs	r1, #0
10004034:	2205      	movs	r2, #5
10004036:	f7ff ff67 	bl	10003f08 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 4);
1000403a:	4b37      	ldr	r3, [pc, #220]	; (10004118 <i2c_bus_init+0x138>)
1000403c:	1c18      	adds	r0, r3, #0
1000403e:	2101      	movs	r1, #1
10004040:	2204      	movs	r2, #4
10004042:	f7ff ff61 	bl	10003f08 <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
10004046:	4b34      	ldr	r3, [pc, #208]	; (10004118 <i2c_bus_init+0x138>)
10004048:	1c18      	adds	r0, r3, #0
1000404a:	2103      	movs	r1, #3
1000404c:	2200      	movs	r2, #0
1000404e:	f7ff ff5b 	bl	10003f08 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
10004052:	4b31      	ldr	r3, [pc, #196]	; (10004118 <i2c_bus_init+0x138>)
10004054:	1c18      	adds	r0, r3, #0
10004056:	2104      	movs	r1, #4
10004058:	2200      	movs	r2, #0
1000405a:	f7ff ff55 	bl	10003f08 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
1000405e:	4b2e      	ldr	r3, [pc, #184]	; (10004118 <i2c_bus_init+0x138>)
10004060:	1c18      	adds	r0, r3, #0
10004062:	2105      	movs	r1, #5
10004064:	2200      	movs	r2, #0
10004066:	f7ff ff4f 	bl	10003f08 <XMC_USIC_CH_SetInputSource>
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
1000406a:	4b2b      	ldr	r3, [pc, #172]	; (10004118 <i2c_bus_init+0x138>)
1000406c:	1c18      	adds	r0, r3, #0
1000406e:	2110      	movs	r1, #16
10004070:	2204      	movs	r2, #4
10004072:	2301      	movs	r3, #1
10004074:	f7fe f880 	bl	10002178 <XMC_USIC_CH_TXFIFO_Configure>
							   16,
							   XMC_USIC_CH_FIFO_SIZE_16WORDS,
							   (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
10004078:	4b27      	ldr	r3, [pc, #156]	; (10004118 <i2c_bus_init+0x138>)
1000407a:	1c18      	adds	r0, r3, #0
1000407c:	2110      	movs	r1, #16
1000407e:	2202      	movs	r2, #2
10004080:	f7fe f928 	bl	100022d4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
											   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
											 ((uint32_t)2));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C0_CH1, tx_fifo_events);
10004084:	4a24      	ldr	r2, [pc, #144]	; (10004118 <i2c_bus_init+0x138>)
10004086:	697b      	ldr	r3, [r7, #20]
10004088:	1c10      	adds	r0, r2, #0
1000408a:	1c19      	adds	r1, r3, #0
1000408c:	f7ff ff60 	bl	10003f50 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
10004090:	4b21      	ldr	r3, [pc, #132]	; (10004118 <i2c_bus_init+0x138>)
10004092:	1c18      	adds	r0, r3, #0
10004094:	2100      	movs	r1, #0
10004096:	2204      	movs	r2, #4
10004098:	230f      	movs	r3, #15
1000409a:	f7fe f89b 	bl	100021d4 <XMC_USIC_CH_RXFIFO_Configure>
							   0,
							   XMC_USIC_CH_FIFO_SIZE_16WORDS,
								(uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
1000409e:	4b1e      	ldr	r3, [pc, #120]	; (10004118 <i2c_bus_init+0x138>)
100040a0:	1c18      	adds	r0, r3, #0
100040a2:	2110      	movs	r1, #16
100040a4:	2201      	movs	r2, #1
100040a6:	f7fe f939 	bl	1000231c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
											   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
											  ((uint32_t)0x1));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
100040aa:	4b1b      	ldr	r3, [pc, #108]	; (10004118 <i2c_bus_init+0x138>)
100040ac:	1c18      	adds	r0, r3, #0
100040ae:	2113      	movs	r1, #19
100040b0:	2201      	movs	r2, #1
100040b2:	f7fe f933 	bl	1000231c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
											   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
											  ((uint32_t)0x1));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C0_CH1, rx_fifo_events);
100040b6:	4a18      	ldr	r2, [pc, #96]	; (10004118 <i2c_bus_init+0x138>)
100040b8:	693b      	ldr	r3, [r7, #16]
100040ba:	1c10      	adds	r0, r2, #0
100040bc:	1c19      	adds	r1, r3, #0
100040be:	f7ff ff5b 	bl	10003f78 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH1,
100040c2:	4b15      	ldr	r3, [pc, #84]	; (10004118 <i2c_bus_init+0x138>)
100040c4:	1c18      	adds	r0, r3, #0
100040c6:	2110      	movs	r1, #16
100040c8:	2200      	movs	r2, #0
100040ca:	f7fe f8e3 	bl	10002294 <XMC_USIC_CH_SetInterruptNodePointer>
									  XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
									   ((uint32_t)0));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
100040ce:	4b12      	ldr	r3, [pc, #72]	; (10004118 <i2c_bus_init+0x138>)
100040d0:	1c18      	adds	r0, r3, #0
100040d2:	f7ff ff79 	bl	10003fc8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)10, &i2c_bus_sda_pin_config);
100040d6:	4a12      	ldr	r2, [pc, #72]	; (10004120 <i2c_bus_init+0x140>)
100040d8:	2308      	movs	r3, #8
100040da:	18fb      	adds	r3, r7, r3
100040dc:	1c10      	adds	r0, r2, #0
100040de:	210a      	movs	r1, #10
100040e0:	1c1a      	adds	r2, r3, #0
100040e2:	f7fd f817 	bl	10001114 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)11, &i2c_bus_scl_pin_config);
100040e6:	4a0e      	ldr	r2, [pc, #56]	; (10004120 <i2c_bus_init+0x140>)
100040e8:	1c3b      	adds	r3, r7, #0
100040ea:	1c10      	adds	r0, r2, #0
100040ec:	210b      	movs	r1, #11
100040ee:	1c1a      	adds	r2, r3, #0
100040f0:	f7fd f810 	bl	10001114 <XMC_GPIO_Init>

  NVIC_SetPriority((IRQn_Type)11, 3);
100040f4:	200b      	movs	r0, #11
100040f6:	2103      	movs	r1, #3
100040f8:	f7ff fe9c 	bl	10003e34 <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)11);
100040fc:	200b      	movs	r0, #11
100040fe:	f7ff fe83 	bl	10003e08 <NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)10, 3);
10004102:	200a      	movs	r0, #10
10004104:	2103      	movs	r1, #3
10004106:	f7ff fe95 	bl	10003e34 <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)10);}
1000410a:	200a      	movs	r0, #10
1000410c:	f7ff fe7c 	bl	10003e08 <NVIC_EnableIRQ>
10004110:	46bd      	mov	sp, r7
10004112:	b006      	add	sp, #24
10004114:	bd80      	pop	{r7, pc}
10004116:	46c0      	nop			; (mov r8, r8)
10004118:	48000200 	.word	0x48000200
1000411c:	10005958 	.word	0x10005958
10004120:	40040200 	.word	0x40040200

10004124 <USIC0_2_IRQHandler>:
/*Transmit ISR*/
void i2c_bus_TX_HANDLER()
{
10004124:	b580      	push	{r7, lr}
10004126:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&i2c_bus);
10004128:	4b02      	ldr	r3, [pc, #8]	; (10004134 <USIC0_2_IRQHandler+0x10>)
1000412a:	1c18      	adds	r0, r3, #0
1000412c:	f7ff fa3e 	bl	100035ac <I2C_MASTER_TransmitHandler>
}
10004130:	46bd      	mov	sp, r7
10004132:	bd80      	pop	{r7, pc}
10004134:	20000574 	.word	0x20000574

10004138 <USIC0_1_IRQHandler>:
/*Receive ISR*/
void i2c_bus_RX_HANDLER()
{
10004138:	b580      	push	{r7, lr}
1000413a:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&i2c_bus);
1000413c:	4b02      	ldr	r3, [pc, #8]	; (10004148 <USIC0_1_IRQHandler+0x10>)
1000413e:	1c18      	adds	r0, r3, #0
10004140:	f7ff fc52 	bl	100039e8 <I2C_MASTER_ReceiveHandler>
}
10004144:	46bd      	mov	sp, r7
10004146:	bd80      	pop	{r7, pc}
10004148:	20000574 	.word	0x20000574

1000414c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000414c:	b580      	push	{r7, lr}
1000414e:	b082      	sub	sp, #8
10004150:	af00      	add	r7, sp, #0
10004152:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10004154:	687b      	ldr	r3, [r7, #4]
10004156:	68db      	ldr	r3, [r3, #12]
10004158:	2280      	movs	r2, #128	; 0x80
1000415a:	0052      	lsls	r2, r2, #1
1000415c:	431a      	orrs	r2, r3
1000415e:	687b      	ldr	r3, [r7, #4]
10004160:	60da      	str	r2, [r3, #12]
}
10004162:	46bd      	mov	sp, r7
10004164:	b002      	add	sp, #8
10004166:	bd80      	pop	{r7, pc}

10004168 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10004168:	b580      	push	{r7, lr}
1000416a:	b082      	sub	sp, #8
1000416c:	af00      	add	r7, sp, #0
1000416e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10004170:	687b      	ldr	r3, [r7, #4]
10004172:	7b5b      	ldrb	r3, [r3, #13]
10004174:	2201      	movs	r2, #1
10004176:	4053      	eors	r3, r2
10004178:	b2db      	uxtb	r3, r3
1000417a:	2b00      	cmp	r3, #0
1000417c:	d00f      	beq.n	1000419e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000417e:	687b      	ldr	r3, [r7, #4]
10004180:	689a      	ldr	r2, [r3, #8]
10004182:	687b      	ldr	r3, [r7, #4]
10004184:	7b1b      	ldrb	r3, [r3, #12]
10004186:	1c10      	adds	r0, r2, #0
10004188:	1c19      	adds	r1, r3, #0
1000418a:	f7fd f9b7 	bl	100014fc <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000418e:	687b      	ldr	r3, [r7, #4]
10004190:	689b      	ldr	r3, [r3, #8]
10004192:	1c18      	adds	r0, r3, #0
10004194:	f7ff ffda 	bl	1000414c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10004198:	687b      	ldr	r3, [r7, #4]
1000419a:	2201      	movs	r2, #1
1000419c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
1000419e:	2300      	movs	r3, #0
}
100041a0:	1c18      	adds	r0, r3, #0
100041a2:	46bd      	mov	sp, r7
100041a4:	b002      	add	sp, #8
100041a6:	bd80      	pop	{r7, pc}

100041a8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
100041a8:	b580      	push	{r7, lr}
100041aa:	b082      	sub	sp, #8
100041ac:	af00      	add	r7, sp, #0
100041ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
100041b0:	687b      	ldr	r3, [r7, #4]
100041b2:	6819      	ldr	r1, [r3, #0]
100041b4:	687b      	ldr	r3, [r7, #4]
100041b6:	7b1a      	ldrb	r2, [r3, #12]
100041b8:	687b      	ldr	r3, [r7, #4]
100041ba:	3304      	adds	r3, #4
100041bc:	1c08      	adds	r0, r1, #0
100041be:	1c11      	adds	r1, r2, #0
100041c0:	1c1a      	adds	r2, r3, #0
100041c2:	f7fc ffa7 	bl	10001114 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
100041c6:	687b      	ldr	r3, [r7, #4]
100041c8:	6819      	ldr	r1, [r3, #0]
100041ca:	687b      	ldr	r3, [r7, #4]
100041cc:	7b1a      	ldrb	r2, [r3, #12]
100041ce:	687b      	ldr	r3, [r7, #4]
100041d0:	7b5b      	ldrb	r3, [r3, #13]
100041d2:	1c08      	adds	r0, r1, #0
100041d4:	1c11      	adds	r1, r2, #0
100041d6:	1c1a      	adds	r2, r3, #0
100041d8:	f7fd fcca 	bl	10001b70 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
100041dc:	2300      	movs	r3, #0
}
100041de:	1c18      	adds	r0, r3, #0
100041e0:	46bd      	mov	sp, r7
100041e2:	b002      	add	sp, #8
100041e4:	bd80      	pop	{r7, pc}
100041e6:	46c0      	nop			; (mov r8, r8)

100041e8 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100041e8:	b580      	push	{r7, lr}
100041ea:	af00      	add	r7, sp, #0

}
100041ec:	46bd      	mov	sp, r7
100041ee:	bd80      	pop	{r7, pc}

100041f0 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100041f0:	b580      	push	{r7, lr}
100041f2:	b084      	sub	sp, #16
100041f4:	af00      	add	r7, sp, #0
100041f6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100041f8:	230f      	movs	r3, #15
100041fa:	18fb      	adds	r3, r7, r3
100041fc:	2200      	movs	r2, #0
100041fe:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004200:	230e      	movs	r3, #14
10004202:	18fb      	adds	r3, r7, r3
10004204:	2200      	movs	r2, #0
10004206:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10004208:	230d      	movs	r3, #13
1000420a:	18fb      	adds	r3, r7, r3
1000420c:	2200      	movs	r2, #0
1000420e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004210:	230c      	movs	r3, #12
10004212:	18fb      	adds	r3, r7, r3
10004214:	2200      	movs	r2, #0
10004216:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10004218:	230b      	movs	r3, #11
1000421a:	18fb      	adds	r3, r7, r3
1000421c:	2200      	movs	r2, #0
1000421e:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10004220:	687b      	ldr	r3, [r7, #4]
10004222:	781b      	ldrb	r3, [r3, #0]
10004224:	2201      	movs	r2, #1
10004226:	4053      	eors	r3, r2
10004228:	b2db      	uxtb	r3, r3
1000422a:	2b00      	cmp	r3, #0
1000422c:	d01b      	beq.n	10004266 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
1000422e:	230e      	movs	r3, #14
10004230:	18fa      	adds	r2, r7, r3
10004232:	230d      	movs	r3, #13
10004234:	18fb      	adds	r3, r7, r3
10004236:	7812      	ldrb	r2, [r2, #0]
10004238:	781b      	ldrb	r3, [r3, #0]
1000423a:	4313      	orrs	r3, r2
1000423c:	b2da      	uxtb	r2, r3
1000423e:	230c      	movs	r3, #12
10004240:	18fb      	adds	r3, r7, r3
10004242:	781b      	ldrb	r3, [r3, #0]
10004244:	4313      	orrs	r3, r2
10004246:	b2d9      	uxtb	r1, r3
10004248:	230f      	movs	r3, #15
1000424a:	18fb      	adds	r3, r7, r3
1000424c:	220b      	movs	r2, #11
1000424e:	18ba      	adds	r2, r7, r2
10004250:	7812      	ldrb	r2, [r2, #0]
10004252:	430a      	orrs	r2, r1
10004254:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10004256:	230f      	movs	r3, #15
10004258:	18fb      	adds	r3, r7, r3
1000425a:	781b      	ldrb	r3, [r3, #0]
1000425c:	2b00      	cmp	r3, #0
1000425e:	d102      	bne.n	10004266 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10004260:	687b      	ldr	r3, [r7, #4]
10004262:	2201      	movs	r2, #1
10004264:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10004266:	230f      	movs	r3, #15
10004268:	18fb      	adds	r3, r7, r3
1000426a:	781b      	ldrb	r3, [r3, #0]
}
1000426c:	1c18      	adds	r0, r3, #0
1000426e:	46bd      	mov	sp, r7
10004270:	b004      	add	sp, #16
10004272:	bd80      	pop	{r7, pc}

10004274 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10004274:	b590      	push	{r4, r7, lr}
10004276:	b085      	sub	sp, #20
10004278:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000427a:	1d3b      	adds	r3, r7, #4
1000427c:	4a04      	ldr	r2, [pc, #16]	; (10004290 <SystemCoreClockSetup+0x1c>)
1000427e:	ca13      	ldmia	r2!, {r0, r1, r4}
10004280:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10004282:	1d3b      	adds	r3, r7, #4
10004284:	1c18      	adds	r0, r3, #0
10004286:	f7fd f817 	bl	100012b8 <XMC_SCU_CLOCK_Init>
}
1000428a:	46bd      	mov	sp, r7
1000428c:	b005      	add	sp, #20
1000428e:	bd90      	pop	{r4, r7, pc}
10004290:	100059f0 	.word	0x100059f0

10004294 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10004294:	b590      	push	{r4, r7, lr}
10004296:	b083      	sub	sp, #12
10004298:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
1000429a:	1dfb      	adds	r3, r7, #7
1000429c:	2200      	movs	r2, #0
1000429e:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
100042a0:	1dfc      	adds	r4, r7, #7
100042a2:	4b3d      	ldr	r3, [pc, #244]	; (10004398 <DAVE_Init+0x104>)
100042a4:	1c18      	adds	r0, r3, #0
100042a6:	f7ff ffa3 	bl	100041f0 <CLOCK_XMC1_Init>
100042aa:	1c03      	adds	r3, r0, #0
100042ac:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
100042ae:	1dfb      	adds	r3, r7, #7
100042b0:	781b      	ldrb	r3, [r3, #0]
100042b2:	2b00      	cmp	r3, #0
100042b4:	d106      	bne.n	100042c4 <DAVE_Init+0x30>
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_bus */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_bus); 
100042b6:	1dfc      	adds	r4, r7, #7
100042b8:	4b38      	ldr	r3, [pc, #224]	; (1000439c <DAVE_Init+0x108>)
100042ba:	1c18      	adds	r0, r3, #0
100042bc:	f7ff f908 	bl	100034d0 <I2C_MASTER_Init>
100042c0:	1c03      	adds	r3, r0, #0
100042c2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100042c4:	1dfb      	adds	r3, r7, #7
100042c6:	781b      	ldrb	r3, [r3, #0]
100042c8:	2b00      	cmp	r3, #0
100042ca:	d106      	bne.n	100042da <DAVE_Init+0x46>
  {
	 /**  Initialization of SYSTIMER APP instance sys_timer */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&sys_timer); 
100042cc:	1dfc      	adds	r4, r7, #7
100042ce:	4b34      	ldr	r3, [pc, #208]	; (100043a0 <DAVE_Init+0x10c>)
100042d0:	1c18      	adds	r0, r3, #0
100042d2:	f7fe fab5 	bl	10002840 <SYSTIMER_Init>
100042d6:	1c03      	adds	r3, r0, #0
100042d8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100042da:	1dfb      	adds	r3, r7, #7
100042dc:	781b      	ldrb	r3, [r3, #0]
100042de:	2b00      	cmp	r3, #0
100042e0:	d106      	bne.n	100042f0 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance button1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button1); 
100042e2:	1dfc      	adds	r4, r7, #7
100042e4:	4b2f      	ldr	r3, [pc, #188]	; (100043a4 <DAVE_Init+0x110>)
100042e6:	1c18      	adds	r0, r3, #0
100042e8:	f7ff ff5e 	bl	100041a8 <DIGITAL_IO_Init>
100042ec:	1c03      	adds	r3, r0, #0
100042ee:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100042f0:	1dfb      	adds	r3, r7, #7
100042f2:	781b      	ldrb	r3, [r3, #0]
100042f4:	2b00      	cmp	r3, #0
100042f6:	d106      	bne.n	10004306 <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance button2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button2); 
100042f8:	1dfc      	adds	r4, r7, #7
100042fa:	4b2b      	ldr	r3, [pc, #172]	; (100043a8 <DAVE_Init+0x114>)
100042fc:	1c18      	adds	r0, r3, #0
100042fe:	f7ff ff53 	bl	100041a8 <DIGITAL_IO_Init>
10004302:	1c03      	adds	r3, r0, #0
10004304:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004306:	1dfb      	adds	r3, r7, #7
10004308:	781b      	ldrb	r3, [r3, #0]
1000430a:	2b00      	cmp	r3, #0
1000430c:	d106      	bne.n	1000431c <DAVE_Init+0x88>
  {
	 /**  Initialization of DIGITAL_IO APP instance button3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button3); 
1000430e:	1dfc      	adds	r4, r7, #7
10004310:	4b26      	ldr	r3, [pc, #152]	; (100043ac <DAVE_Init+0x118>)
10004312:	1c18      	adds	r0, r3, #0
10004314:	f7ff ff48 	bl	100041a8 <DIGITAL_IO_Init>
10004318:	1c03      	adds	r3, r0, #0
1000431a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000431c:	1dfb      	adds	r3, r7, #7
1000431e:	781b      	ldrb	r3, [r3, #0]
10004320:	2b00      	cmp	r3, #0
10004322:	d106      	bne.n	10004332 <DAVE_Init+0x9e>
  {
	 /**  Initialization of DIGITAL_IO APP instance button4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button4); 
10004324:	1dfc      	adds	r4, r7, #7
10004326:	4b22      	ldr	r3, [pc, #136]	; (100043b0 <DAVE_Init+0x11c>)
10004328:	1c18      	adds	r0, r3, #0
1000432a:	f7ff ff3d 	bl	100041a8 <DIGITAL_IO_Init>
1000432e:	1c03      	adds	r3, r0, #0
10004330:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004332:	1dfb      	adds	r3, r7, #7
10004334:	781b      	ldrb	r3, [r3, #0]
10004336:	2b00      	cmp	r3, #0
10004338:	d106      	bne.n	10004348 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance button5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button5); 
1000433a:	1dfc      	adds	r4, r7, #7
1000433c:	4b1d      	ldr	r3, [pc, #116]	; (100043b4 <DAVE_Init+0x120>)
1000433e:	1c18      	adds	r0, r3, #0
10004340:	f7ff ff32 	bl	100041a8 <DIGITAL_IO_Init>
10004344:	1c03      	adds	r3, r0, #0
10004346:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004348:	1dfb      	adds	r3, r7, #7
1000434a:	781b      	ldrb	r3, [r3, #0]
1000434c:	2b00      	cmp	r3, #0
1000434e:	d106      	bne.n	1000435e <DAVE_Init+0xca>
  {
	 /**  Initialization of DIGITAL_IO APP instance button_computer */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button_computer); 
10004350:	1dfc      	adds	r4, r7, #7
10004352:	4b19      	ldr	r3, [pc, #100]	; (100043b8 <DAVE_Init+0x124>)
10004354:	1c18      	adds	r0, r3, #0
10004356:	f7ff ff27 	bl	100041a8 <DIGITAL_IO_Init>
1000435a:	1c03      	adds	r3, r0, #0
1000435c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000435e:	1dfb      	adds	r3, r7, #7
10004360:	781b      	ldrb	r3, [r3, #0]
10004362:	2b00      	cmp	r3, #0
10004364:	d106      	bne.n	10004374 <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance led2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&led2); 
10004366:	1dfc      	adds	r4, r7, #7
10004368:	4b14      	ldr	r3, [pc, #80]	; (100043bc <DAVE_Init+0x128>)
1000436a:	1c18      	adds	r0, r3, #0
1000436c:	f7ff ff1c 	bl	100041a8 <DIGITAL_IO_Init>
10004370:	1c03      	adds	r3, r0, #0
10004372:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004374:	1dfb      	adds	r3, r7, #7
10004376:	781b      	ldrb	r3, [r3, #0]
10004378:	2b00      	cmp	r3, #0
1000437a:	d106      	bne.n	1000438a <DAVE_Init+0xf6>
  {
	 /**  Initialization of PWM_CCU4 APP instance pwm1 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&pwm1); 
1000437c:	1dfc      	adds	r4, r7, #7
1000437e:	4b10      	ldr	r3, [pc, #64]	; (100043c0 <DAVE_Init+0x12c>)
10004380:	1c18      	adds	r0, r3, #0
10004382:	f7fe fc11 	bl	10002ba8 <PWM_CCU4_Init>
10004386:	1c03      	adds	r3, r0, #0
10004388:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
1000438a:	1dfb      	adds	r3, r7, #7
1000438c:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
1000438e:	1c18      	adds	r0, r3, #0
10004390:	46bd      	mov	sp, r7
10004392:	b003      	add	sp, #12
10004394:	bd90      	pop	{r4, r7, pc}
10004396:	46c0      	nop			; (mov r8, r8)
10004398:	200005b0 	.word	0x200005b0
1000439c:	20000574 	.word	0x20000574
100043a0:	200005ac 	.word	0x200005ac
100043a4:	10005980 	.word	0x10005980
100043a8:	10005990 	.word	0x10005990
100043ac:	100059a0 	.word	0x100059a0
100043b0:	100059b0 	.word	0x100059b0
100043b4:	100059c0 	.word	0x100059c0
100043b8:	100059d0 	.word	0x100059d0
100043bc:	100059e0 	.word	0x100059e0
100043c0:	20000520 	.word	0x20000520

100043c4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100043c4:	b580      	push	{r7, lr}
100043c6:	b082      	sub	sp, #8
100043c8:	af00      	add	r7, sp, #0
100043ca:	6078      	str	r0, [r7, #4]
100043cc:	1c0a      	adds	r2, r1, #0
100043ce:	1cfb      	adds	r3, r7, #3
100043d0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100043d2:	1cfb      	adds	r3, r7, #3
100043d4:	781b      	ldrb	r3, [r3, #0]
100043d6:	2201      	movs	r2, #1
100043d8:	409a      	lsls	r2, r3
100043da:	687b      	ldr	r3, [r7, #4]
100043dc:	605a      	str	r2, [r3, #4]
}
100043de:	46bd      	mov	sp, r7
100043e0:	b002      	add	sp, #8
100043e2:	bd80      	pop	{r7, pc}

100043e4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100043e4:	b580      	push	{r7, lr}
100043e6:	b082      	sub	sp, #8
100043e8:	af00      	add	r7, sp, #0
100043ea:	6078      	str	r0, [r7, #4]
100043ec:	1c0a      	adds	r2, r1, #0
100043ee:	1cfb      	adds	r3, r7, #3
100043f0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100043f2:	1cfb      	adds	r3, r7, #3
100043f4:	781b      	ldrb	r3, [r3, #0]
100043f6:	2280      	movs	r2, #128	; 0x80
100043f8:	0252      	lsls	r2, r2, #9
100043fa:	409a      	lsls	r2, r3
100043fc:	687b      	ldr	r3, [r7, #4]
100043fe:	605a      	str	r2, [r3, #4]
}
10004400:	46bd      	mov	sp, r7
10004402:	b002      	add	sp, #8
10004404:	bd80      	pop	{r7, pc}
10004406:	46c0      	nop			; (mov r8, r8)

10004408 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004408:	b580      	push	{r7, lr}
1000440a:	b082      	sub	sp, #8
1000440c:	af00      	add	r7, sp, #0
1000440e:	6078      	str	r0, [r7, #4]
10004410:	1c0a      	adds	r2, r1, #0
10004412:	1cfb      	adds	r3, r7, #3
10004414:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
10004416:	1cfb      	adds	r3, r7, #3
10004418:	781b      	ldrb	r3, [r3, #0]
1000441a:	4a03      	ldr	r2, [pc, #12]	; (10004428 <XMC_GPIO_ToggleOutput+0x20>)
1000441c:	409a      	lsls	r2, r3
1000441e:	687b      	ldr	r3, [r7, #4]
10004420:	605a      	str	r2, [r3, #4]
}
10004422:	46bd      	mov	sp, r7
10004424:	b002      	add	sp, #8
10004426:	bd80      	pop	{r7, pc}
10004428:	00010001 	.word	0x00010001

1000442c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000442c:	b580      	push	{r7, lr}
1000442e:	b082      	sub	sp, #8
10004430:	af00      	add	r7, sp, #0
10004432:	6078      	str	r0, [r7, #4]
10004434:	1c0a      	adds	r2, r1, #0
10004436:	1cfb      	adds	r3, r7, #3
10004438:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
1000443a:	687b      	ldr	r3, [r7, #4]
1000443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000443e:	1cfb      	adds	r3, r7, #3
10004440:	781b      	ldrb	r3, [r3, #0]
10004442:	40da      	lsrs	r2, r3
10004444:	1c13      	adds	r3, r2, #0
10004446:	2201      	movs	r2, #1
10004448:	4013      	ands	r3, r2
}
1000444a:	1c18      	adds	r0, r3, #0
1000444c:	46bd      	mov	sp, r7
1000444e:	b002      	add	sp, #8
10004450:	bd80      	pop	{r7, pc}
10004452:	46c0      	nop			; (mov r8, r8)

10004454 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
10004454:	b580      	push	{r7, lr}
10004456:	b082      	sub	sp, #8
10004458:	af00      	add	r7, sp, #0
1000445a:	6078      	str	r0, [r7, #4]
1000445c:	1c0a      	adds	r2, r1, #0
1000445e:	1cfb      	adds	r3, r7, #3
10004460:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
10004462:	687b      	ldr	r3, [r7, #4]
10004464:	681a      	ldr	r2, [r3, #0]
10004466:	1cfb      	adds	r3, r7, #3
10004468:	781b      	ldrb	r3, [r3, #0]
1000446a:	1c10      	adds	r0, r2, #0
1000446c:	1c19      	adds	r1, r3, #0
1000446e:	f7fd fd09 	bl	10001e84 <XMC_I2C_CH_MasterTransmit>
}
10004472:	46bd      	mov	sp, r7
10004474:	b002      	add	sp, #8
10004476:	bd80      	pop	{r7, pc}

10004478 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
10004478:	b580      	push	{r7, lr}
1000447a:	b082      	sub	sp, #8
1000447c:	af00      	add	r7, sp, #0
1000447e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterStop(handle->channel);
10004480:	687b      	ldr	r3, [r7, #4]
10004482:	681b      	ldr	r3, [r3, #0]
10004484:	1c18      	adds	r0, r3, #0
10004486:	f7fd fcd3 	bl	10001e30 <XMC_I2C_CH_MasterStop>
}
1000448a:	46bd      	mov	sp, r7
1000448c:	b002      	add	sp, #8
1000448e:	bd80      	pop	{r7, pc}

10004490 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
10004490:	b580      	push	{r7, lr}
10004492:	b084      	sub	sp, #16
10004494:	af00      	add	r7, sp, #0
10004496:	60f8      	str	r0, [r7, #12]
10004498:	60b9      	str	r1, [r7, #8]
1000449a:	1dfb      	adds	r3, r7, #7
1000449c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1000449e:	68fb      	ldr	r3, [r7, #12]
100044a0:	6819      	ldr	r1, [r3, #0]
100044a2:	68bb      	ldr	r3, [r7, #8]
100044a4:	b29a      	uxth	r2, r3
100044a6:	1dfb      	adds	r3, r7, #7
100044a8:	781b      	ldrb	r3, [r3, #0]
100044aa:	1c08      	adds	r0, r1, #0
100044ac:	1c11      	adds	r1, r2, #0
100044ae:	1c1a      	adds	r2, r3, #0
100044b0:	f7fd fc3e 	bl	10001d30 <XMC_I2C_CH_MasterStart>
}
100044b4:	46bd      	mov	sp, r7
100044b6:	b004      	add	sp, #16
100044b8:	bd80      	pop	{r7, pc}
100044ba:	46c0      	nop			; (mov r8, r8)

100044bc <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
100044bc:	b580      	push	{r7, lr}
100044be:	b082      	sub	sp, #8
100044c0:	af00      	add	r7, sp, #0
100044c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
100044c4:	687b      	ldr	r3, [r7, #4]
100044c6:	689b      	ldr	r3, [r3, #8]
100044c8:	2226      	movs	r2, #38	; 0x26
100044ca:	5c9b      	ldrb	r3, [r3, r2]
100044cc:	b2db      	uxtb	r3, r3
}
100044ce:	1c18      	adds	r0, r3, #0
100044d0:	46bd      	mov	sp, r7
100044d2:	b002      	add	sp, #8
100044d4:	bd80      	pop	{r7, pc}
100044d6:	46c0      	nop			; (mov r8, r8)

100044d8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
100044d8:	b580      	push	{r7, lr}
100044da:	b082      	sub	sp, #8
100044dc:	af00      	add	r7, sp, #0
100044de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
100044e0:	687b      	ldr	r3, [r7, #4]
100044e2:	681a      	ldr	r2, [r3, #0]
100044e4:	687b      	ldr	r3, [r7, #4]
100044e6:	7b1b      	ldrb	r3, [r3, #12]
100044e8:	1c10      	adds	r0, r2, #0
100044ea:	1c19      	adds	r1, r3, #0
100044ec:	f7ff ff6a 	bl	100043c4 <XMC_GPIO_SetOutputHigh>
}
100044f0:	46bd      	mov	sp, r7
100044f2:	b002      	add	sp, #8
100044f4:	bd80      	pop	{r7, pc}
100044f6:	46c0      	nop			; (mov r8, r8)

100044f8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
100044f8:	b580      	push	{r7, lr}
100044fa:	b082      	sub	sp, #8
100044fc:	af00      	add	r7, sp, #0
100044fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004500:	687b      	ldr	r3, [r7, #4]
10004502:	681a      	ldr	r2, [r3, #0]
10004504:	687b      	ldr	r3, [r7, #4]
10004506:	7b1b      	ldrb	r3, [r3, #12]
10004508:	1c10      	adds	r0, r2, #0
1000450a:	1c19      	adds	r1, r3, #0
1000450c:	f7ff ff6a 	bl	100043e4 <XMC_GPIO_SetOutputLow>
}
10004510:	46bd      	mov	sp, r7
10004512:	b002      	add	sp, #8
10004514:	bd80      	pop	{r7, pc}
10004516:	46c0      	nop			; (mov r8, r8)

10004518 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
10004518:	b580      	push	{r7, lr}
1000451a:	b082      	sub	sp, #8
1000451c:	af00      	add	r7, sp, #0
1000451e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
10004520:	687b      	ldr	r3, [r7, #4]
10004522:	681a      	ldr	r2, [r3, #0]
10004524:	687b      	ldr	r3, [r7, #4]
10004526:	7b1b      	ldrb	r3, [r3, #12]
10004528:	1c10      	adds	r0, r2, #0
1000452a:	1c19      	adds	r1, r3, #0
1000452c:	f7ff ff6c 	bl	10004408 <XMC_GPIO_ToggleOutput>
}
10004530:	46bd      	mov	sp, r7
10004532:	b002      	add	sp, #8
10004534:	bd80      	pop	{r7, pc}
10004536:	46c0      	nop			; (mov r8, r8)

10004538 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10004538:	b580      	push	{r7, lr}
1000453a:	b082      	sub	sp, #8
1000453c:	af00      	add	r7, sp, #0
1000453e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10004540:	687b      	ldr	r3, [r7, #4]
10004542:	681a      	ldr	r2, [r3, #0]
10004544:	687b      	ldr	r3, [r7, #4]
10004546:	7b1b      	ldrb	r3, [r3, #12]
10004548:	1c10      	adds	r0, r2, #0
1000454a:	1c19      	adds	r1, r3, #0
1000454c:	f7ff ff6e 	bl	1000442c <XMC_GPIO_GetInput>
10004550:	1c03      	adds	r3, r0, #0
}
10004552:	1c18      	adds	r0, r3, #0
10004554:	46bd      	mov	sp, r7
10004556:	b002      	add	sp, #8
10004558:	bd80      	pop	{r7, pc}
1000455a:	46c0      	nop			; (mov r8, r8)

1000455c <main>:

/****************************************
 * main function
 ****************************************/
int main(void)
{
1000455c:	b590      	push	{r4, r7, lr}
1000455e:	b085      	sub	sp, #20
10004560:	af00      	add	r7, sp, #0
  char sel;
  char check_winner;
  char winner_announced;
  unsigned char oldnumsticks[MAXROWS]; // used to blink the computer move a few times on the display

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10004562:	2309      	movs	r3, #9
10004564:	18fc      	adds	r4, r7, r3
10004566:	f7ff fe95 	bl	10004294 <DAVE_Init>
1000456a:	1c03      	adds	r3, r0, #0
1000456c:	7023      	strb	r3, [r4, #0]
  if(status != DAVE_STATUS_SUCCESS)
1000456e:	2309      	movs	r3, #9
10004570:	18fb      	adds	r3, r7, r3
10004572:	781b      	ldrb	r3, [r3, #0]
10004574:	2b00      	cmp	r3, #0
10004576:	d000      	beq.n	1000457a <main+0x1e>
  {
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1);
10004578:	e7fe      	b.n	10004578 <main+0x1c>
  }

  set_led(1); // turn on the LED on the microcontroller board (LED2) briefly for debug purposes
1000457a:	2001      	movs	r0, #1
1000457c:	f000 fe56 	bl	1000522c <set_led>

  // create and start up the timer for the periodic tick function
  timer_id=(uint32_t)SYSTIMER_CreateTimer(MILLISEC,
10004580:	23fa      	movs	r3, #250	; 0xfa
10004582:	009a      	lsls	r2, r3, #2
10004584:	4ba1      	ldr	r3, [pc, #644]	; (1000480c <main+0x2b0>)
10004586:	1c10      	adds	r0, r2, #0
10004588:	2101      	movs	r1, #1
1000458a:	1c1a      	adds	r2, r3, #0
1000458c:	2300      	movs	r3, #0
1000458e:	f7fe f993 	bl	100028b8 <SYSTIMER_CreateTimer>
10004592:	1c02      	adds	r2, r0, #0
10004594:	4b9e      	ldr	r3, [pc, #632]	; (10004810 <main+0x2b4>)
10004596:	601a      	str	r2, [r3, #0]
		   SYSTIMER_MODE_PERIODIC,(void*)fast_tick,NULL);
  SYSTIMER_StartTimer(timer_id);
10004598:	4b9d      	ldr	r3, [pc, #628]	; (10004810 <main+0x2b4>)
1000459a:	681b      	ldr	r3, [r3, #0]
1000459c:	1c18      	adds	r0, r3, #0
1000459e:	f7fe fa2b 	bl	100029f8 <SYSTIMER_StartTimer>
#ifdef DO_DEBUG
  initialise_monitor_handles();
#endif

display_update_timer=10;
100045a2:	4b9c      	ldr	r3, [pc, #624]	; (10004814 <main+0x2b8>)
100045a4:	220a      	movs	r2, #10
100045a6:	601a      	str	r2, [r3, #0]
while(display_update_timer>0); // delay to allow power to settle
100045a8:	46c0      	nop			; (mov r8, r8)
100045aa:	4b9a      	ldr	r3, [pc, #616]	; (10004814 <main+0x2b8>)
100045ac:	681b      	ldr	r3, [r3, #0]
100045ae:	2b00      	cmp	r3, #0
100045b0:	d1fb      	bne.n	100045aa <main+0x4e>
display_ram_blank();
100045b2:	f000 ff25 	bl	10005400 <display_ram_blank>
display_init();
100045b6:	f000 fe9f 	bl	100052f8 <display_init>
display_update_timer=100;
100045ba:	4b96      	ldr	r3, [pc, #600]	; (10004814 <main+0x2b8>)
100045bc:	2264      	movs	r2, #100	; 0x64
100045be:	601a      	str	r2, [r3, #0]
while(display_update_timer>0); // delay to allow display to be initialised
100045c0:	46c0      	nop			; (mov r8, r8)
100045c2:	4b94      	ldr	r3, [pc, #592]	; (10004814 <main+0x2b8>)
100045c4:	681b      	ldr	r3, [r3, #0]
100045c6:	2b00      	cmp	r3, #0
100045c8:	d1fb      	bne.n	100045c2 <main+0x66>
set_led(0);
100045ca:	2000      	movs	r0, #0
100045cc:	f000 fe2e 	bl	1000522c <set_led>

#ifdef DO_DEBUG
  printf("Hello\n");
#endif

  scroll_text("HELLO  ", 7, 0); // lowercase is not supported! And pad with 2 spaces at the end.
100045d0:	4b91      	ldr	r3, [pc, #580]	; (10004818 <main+0x2bc>)
100045d2:	1c18      	adds	r0, r3, #0
100045d4:	2107      	movs	r1, #7
100045d6:	2200      	movs	r2, #0
100045d8:	f000 ffa6 	bl	10005528 <scroll_text>

  button_handle[0]=(DIGITAL_IO_t*)&button1;
100045dc:	4b8f      	ldr	r3, [pc, #572]	; (1000481c <main+0x2c0>)
100045de:	4a90      	ldr	r2, [pc, #576]	; (10004820 <main+0x2c4>)
100045e0:	601a      	str	r2, [r3, #0]
  button_handle[1]=(DIGITAL_IO_t*)&button2;
100045e2:	4b8e      	ldr	r3, [pc, #568]	; (1000481c <main+0x2c0>)
100045e4:	4a8f      	ldr	r2, [pc, #572]	; (10004824 <main+0x2c8>)
100045e6:	605a      	str	r2, [r3, #4]
  button_handle[2]=(DIGITAL_IO_t*)&button3;
100045e8:	4b8c      	ldr	r3, [pc, #560]	; (1000481c <main+0x2c0>)
100045ea:	4a8f      	ldr	r2, [pc, #572]	; (10004828 <main+0x2cc>)
100045ec:	609a      	str	r2, [r3, #8]
  button_handle[3]=(DIGITAL_IO_t*)&button4;
100045ee:	4b8b      	ldr	r3, [pc, #556]	; (1000481c <main+0x2c0>)
100045f0:	4a8e      	ldr	r2, [pc, #568]	; (1000482c <main+0x2d0>)
100045f2:	60da      	str	r2, [r3, #12]
  button_handle[4]=(DIGITAL_IO_t*)&button5;
100045f4:	4b89      	ldr	r3, [pc, #548]	; (1000481c <main+0x2c0>)
100045f6:	4a8e      	ldr	r2, [pc, #568]	; (10004830 <main+0x2d4>)
100045f8:	611a      	str	r2, [r3, #16]
  button_handle[5]=(DIGITAL_IO_t*)&button_computer;
100045fa:	4b88      	ldr	r3, [pc, #544]	; (1000481c <main+0x2c0>)
100045fc:	4a8d      	ldr	r2, [pc, #564]	; (10004834 <main+0x2d8>)
100045fe:	615a      	str	r2, [r3, #20]
  for (i=0; i<NUM_BUTTONS; i++)
10004600:	2300      	movs	r3, #0
10004602:	60fb      	str	r3, [r7, #12]
10004604:	e007      	b.n	10004616 <main+0xba>
  {
	  button_status[i]=UNPRESSED;
10004606:	4a8c      	ldr	r2, [pc, #560]	; (10004838 <main+0x2dc>)
10004608:	68fb      	ldr	r3, [r7, #12]
1000460a:	18d3      	adds	r3, r2, r3
1000460c:	2200      	movs	r2, #0
1000460e:	701a      	strb	r2, [r3, #0]
  button_handle[1]=(DIGITAL_IO_t*)&button2;
  button_handle[2]=(DIGITAL_IO_t*)&button3;
  button_handle[3]=(DIGITAL_IO_t*)&button4;
  button_handle[4]=(DIGITAL_IO_t*)&button5;
  button_handle[5]=(DIGITAL_IO_t*)&button_computer;
  for (i=0; i<NUM_BUTTONS; i++)
10004610:	68fb      	ldr	r3, [r7, #12]
10004612:	3301      	adds	r3, #1
10004614:	60fb      	str	r3, [r7, #12]
10004616:	68fb      	ldr	r3, [r7, #12]
10004618:	2b05      	cmp	r3, #5
1000461a:	ddf4      	ble.n	10004606 <main+0xaa>
	  button_status[i]=UNPRESSED;
  }

  while(FOREVER)
  {
    setup_game();
1000461c:	f000 fa5c 	bl	10004ad8 <setup_game>
    winner_announced=0; // no-one has won this new game yet
10004620:	230a      	movs	r3, #10
10004622:	18fb      	adds	r3, r7, r3
10004624:	2200      	movs	r2, #0
10004626:	701a      	strb	r2, [r3, #0]
    show_status();
10004628:	f000 fdf4 	bl	10005214 <show_status>
    // wait in case a button is pressed, for it to be released
    while(a_button_pressed());
1000462c:	46c0      	nop			; (mov r8, r8)
1000462e:	f000 f913 	bl	10004858 <a_button_pressed>
10004632:	1e03      	subs	r3, r0, #0
10004634:	d1fb      	bne.n	1000462e <main+0xd2>
    playing=1;
10004636:	4b81      	ldr	r3, [pc, #516]	; (1000483c <main+0x2e0>)
10004638:	2201      	movs	r2, #1
1000463a:	701a      	strb	r2, [r3, #0]
    while(playing)
1000463c:	e0df      	b.n	100047fe <main+0x2a2>
    {
       sel=user_play();
1000463e:	2308      	movs	r3, #8
10004640:	18fc      	adds	r4, r7, r3
10004642:	f000 fadb 	bl	10004bfc <user_play>
10004646:	1c03      	adds	r3, r0, #0
10004648:	7023      	strb	r3, [r4, #0]
       if (sel==9) // a selection of 9 means the user has pressed the Computer button
1000464a:	2308      	movs	r3, #8
1000464c:	18fb      	adds	r3, r7, r3
1000464e:	781b      	ldrb	r3, [r3, #0]
10004650:	2b09      	cmp	r3, #9
10004652:	d000      	beq.n	10004656 <main+0xfa>
10004654:	e0bf      	b.n	100047d6 <main+0x27a>
       {
         // time for the computer to play. But first check, has the
         // user actually won?
         check_winner=0;
10004656:	230b      	movs	r3, #11
10004658:	18fb      	adds	r3, r7, r3
1000465a:	2200      	movs	r2, #0
1000465c:	701a      	strb	r2, [r3, #0]
         for (i=0; i<rows; i++)
1000465e:	2300      	movs	r3, #0
10004660:	60fb      	str	r3, [r7, #12]
10004662:	e00d      	b.n	10004680 <main+0x124>
         {
           check_winner+=numsticks[i];
10004664:	4a76      	ldr	r2, [pc, #472]	; (10004840 <main+0x2e4>)
10004666:	68fb      	ldr	r3, [r7, #12]
10004668:	18d3      	adds	r3, r2, r3
1000466a:	7819      	ldrb	r1, [r3, #0]
1000466c:	230b      	movs	r3, #11
1000466e:	18fb      	adds	r3, r7, r3
10004670:	220b      	movs	r2, #11
10004672:	18ba      	adds	r2, r7, r2
10004674:	7812      	ldrb	r2, [r2, #0]
10004676:	188a      	adds	r2, r1, r2
10004678:	701a      	strb	r2, [r3, #0]
       if (sel==9) // a selection of 9 means the user has pressed the Computer button
       {
         // time for the computer to play. But first check, has the
         // user actually won?
         check_winner=0;
         for (i=0; i<rows; i++)
1000467a:	68fb      	ldr	r3, [r7, #12]
1000467c:	3301      	adds	r3, #1
1000467e:	60fb      	str	r3, [r7, #12]
10004680:	4b70      	ldr	r3, [pc, #448]	; (10004844 <main+0x2e8>)
10004682:	781b      	ldrb	r3, [r3, #0]
10004684:	1e1a      	subs	r2, r3, #0
10004686:	68fb      	ldr	r3, [r7, #12]
10004688:	429a      	cmp	r2, r3
1000468a:	dceb      	bgt.n	10004664 <main+0x108>
         {
           check_winner+=numsticks[i];
         }
         if (check_winner==1) // user has won
1000468c:	230b      	movs	r3, #11
1000468e:	18fb      	adds	r3, r7, r3
10004690:	781b      	ldrb	r3, [r3, #0]
10004692:	2b01      	cmp	r3, #1
10004694:	d11b      	bne.n	100046ce <main+0x172>
         {
           if (winner_announced==0)
10004696:	230a      	movs	r3, #10
10004698:	18fb      	adds	r3, r7, r3
1000469a:	781b      	ldrb	r3, [r3, #0]
1000469c:	2b00      	cmp	r3, #0
1000469e:	d11a      	bne.n	100046d6 <main+0x17a>
           {
             display_update_timer=1000;
100046a0:	4b5c      	ldr	r3, [pc, #368]	; (10004814 <main+0x2b8>)
100046a2:	22fa      	movs	r2, #250	; 0xfa
100046a4:	0092      	lsls	r2, r2, #2
100046a6:	601a      	str	r2, [r3, #0]
             while(display_update_timer); // wait a bit. Because the computer is a sore loser
100046a8:	46c0      	nop			; (mov r8, r8)
100046aa:	4b5a      	ldr	r3, [pc, #360]	; (10004814 <main+0x2b8>)
100046ac:	681b      	ldr	r3, [r3, #0]
100046ae:	2b00      	cmp	r3, #0
100046b0:	d1fb      	bne.n	100046aa <main+0x14e>
             play_tone(1); // play rising tone
100046b2:	2001      	movs	r0, #1
100046b4:	f000 fdd6 	bl	10005264 <play_tone>
             scroll_text("YOU WIN  ", 9, 0);
100046b8:	4b63      	ldr	r3, [pc, #396]	; (10004848 <main+0x2ec>)
100046ba:	1c18      	adds	r0, r3, #0
100046bc:	2109      	movs	r1, #9
100046be:	2200      	movs	r2, #0
100046c0:	f000 ff32 	bl	10005528 <scroll_text>
             winner_announced=1;
100046c4:	230a      	movs	r3, #10
100046c6:	18fb      	adds	r3, r7, r3
100046c8:	2201      	movs	r2, #1
100046ca:	701a      	strb	r2, [r3, #0]
100046cc:	e003      	b.n	100046d6 <main+0x17a>
           }
         }
         else
         {
           check_winner=0;
100046ce:	230b      	movs	r3, #11
100046d0:	18fb      	adds	r3, r7, r3
100046d2:	2200      	movs	r2, #0
100046d4:	701a      	strb	r2, [r3, #0]
         }
         // make a backup of the number of sticks before the computer plays
         // so we can do a blinking animation of the computer move
         for (i=0; i<rows; i++)
100046d6:	2300      	movs	r3, #0
100046d8:	60fb      	str	r3, [r7, #12]
100046da:	e00b      	b.n	100046f4 <main+0x198>
         {
           oldnumsticks[i]=numsticks[i];
100046dc:	4a58      	ldr	r2, [pc, #352]	; (10004840 <main+0x2e4>)
100046de:	68fb      	ldr	r3, [r7, #12]
100046e0:	18d3      	adds	r3, r2, r3
100046e2:	7819      	ldrb	r1, [r3, #0]
100046e4:	1c3a      	adds	r2, r7, #0
100046e6:	68fb      	ldr	r3, [r7, #12]
100046e8:	18d3      	adds	r3, r2, r3
100046ea:	1c0a      	adds	r2, r1, #0
100046ec:	701a      	strb	r2, [r3, #0]
         {
           check_winner=0;
         }
         // make a backup of the number of sticks before the computer plays
         // so we can do a blinking animation of the computer move
         for (i=0; i<rows; i++)
100046ee:	68fb      	ldr	r3, [r7, #12]
100046f0:	3301      	adds	r3, #1
100046f2:	60fb      	str	r3, [r7, #12]
100046f4:	4b53      	ldr	r3, [pc, #332]	; (10004844 <main+0x2e8>)
100046f6:	781b      	ldrb	r3, [r3, #0]
100046f8:	1e1a      	subs	r2, r3, #0
100046fa:	68fb      	ldr	r3, [r7, #12]
100046fc:	429a      	cmp	r2, r3
100046fe:	dced      	bgt.n	100046dc <main+0x180>
         {
           oldnumsticks[i]=numsticks[i];
         }
         if (winner_announced==0)
10004700:	230a      	movs	r3, #10
10004702:	18fb      	adds	r3, r7, r3
10004704:	781b      	ldrb	r3, [r3, #0]
10004706:	2b00      	cmp	r3, #0
10004708:	d101      	bne.n	1000470e <main+0x1b2>
         {
           computer_play();
1000470a:	f000 fb2b 	bl	10004d64 <computer_play>
         }
         // lets blink the computer played move a few times
         for (i=0; i<2; i++)
1000470e:	2300      	movs	r3, #0
10004710:	60fb      	str	r3, [r7, #12]
10004712:	e01e      	b.n	10004752 <main+0x1f6>
         {
           plot_ram_rows(numsticks);
10004714:	4b4a      	ldr	r3, [pc, #296]	; (10004840 <main+0x2e4>)
10004716:	1c18      	adds	r0, r3, #0
10004718:	f000 febe 	bl	10005498 <plot_ram_rows>
           display_write();
1000471c:	f000 fe1a 	bl	10005354 <display_write>
           display_update_timer=200;
10004720:	4b3c      	ldr	r3, [pc, #240]	; (10004814 <main+0x2b8>)
10004722:	22c8      	movs	r2, #200	; 0xc8
10004724:	601a      	str	r2, [r3, #0]
           while(display_update_timer);
10004726:	46c0      	nop			; (mov r8, r8)
10004728:	4b3a      	ldr	r3, [pc, #232]	; (10004814 <main+0x2b8>)
1000472a:	681b      	ldr	r3, [r3, #0]
1000472c:	2b00      	cmp	r3, #0
1000472e:	d1fb      	bne.n	10004728 <main+0x1cc>
           plot_ram_rows(oldnumsticks);
10004730:	1c3b      	adds	r3, r7, #0
10004732:	1c18      	adds	r0, r3, #0
10004734:	f000 feb0 	bl	10005498 <plot_ram_rows>
           display_write();
10004738:	f000 fe0c 	bl	10005354 <display_write>
           display_update_timer=200;
1000473c:	4b35      	ldr	r3, [pc, #212]	; (10004814 <main+0x2b8>)
1000473e:	22c8      	movs	r2, #200	; 0xc8
10004740:	601a      	str	r2, [r3, #0]
           while(display_update_timer);
10004742:	46c0      	nop			; (mov r8, r8)
10004744:	4b33      	ldr	r3, [pc, #204]	; (10004814 <main+0x2b8>)
10004746:	681b      	ldr	r3, [r3, #0]
10004748:	2b00      	cmp	r3, #0
1000474a:	d1fb      	bne.n	10004744 <main+0x1e8>
         if (winner_announced==0)
         {
           computer_play();
         }
         // lets blink the computer played move a few times
         for (i=0; i<2; i++)
1000474c:	68fb      	ldr	r3, [r7, #12]
1000474e:	3301      	adds	r3, #1
10004750:	60fb      	str	r3, [r7, #12]
10004752:	68fb      	ldr	r3, [r7, #12]
10004754:	2b01      	cmp	r3, #1
10004756:	dddd      	ble.n	10004714 <main+0x1b8>
           display_write();
           display_update_timer=200;
           while(display_update_timer);
         }
         // has computer won?
         if ((check_winner==0) && (winner_announced==0)) // computer has not lost yet..
10004758:	230b      	movs	r3, #11
1000475a:	18fb      	adds	r3, r7, r3
1000475c:	781b      	ldrb	r3, [r3, #0]
1000475e:	2b00      	cmp	r3, #0
10004760:	d14b      	bne.n	100047fa <main+0x29e>
10004762:	230a      	movs	r3, #10
10004764:	18fb      	adds	r3, r7, r3
10004766:	781b      	ldrb	r3, [r3, #0]
10004768:	2b00      	cmp	r3, #0
1000476a:	d146      	bne.n	100047fa <main+0x29e>
         {
           for (i=0; i<rows; i++)
1000476c:	2300      	movs	r3, #0
1000476e:	60fb      	str	r3, [r7, #12]
10004770:	e00d      	b.n	1000478e <main+0x232>
           {
             check_winner+=numsticks[i];
10004772:	4a33      	ldr	r2, [pc, #204]	; (10004840 <main+0x2e4>)
10004774:	68fb      	ldr	r3, [r7, #12]
10004776:	18d3      	adds	r3, r2, r3
10004778:	7819      	ldrb	r1, [r3, #0]
1000477a:	230b      	movs	r3, #11
1000477c:	18fb      	adds	r3, r7, r3
1000477e:	220b      	movs	r2, #11
10004780:	18ba      	adds	r2, r7, r2
10004782:	7812      	ldrb	r2, [r2, #0]
10004784:	188a      	adds	r2, r1, r2
10004786:	701a      	strb	r2, [r3, #0]
           while(display_update_timer);
         }
         // has computer won?
         if ((check_winner==0) && (winner_announced==0)) // computer has not lost yet..
         {
           for (i=0; i<rows; i++)
10004788:	68fb      	ldr	r3, [r7, #12]
1000478a:	3301      	adds	r3, #1
1000478c:	60fb      	str	r3, [r7, #12]
1000478e:	4b2d      	ldr	r3, [pc, #180]	; (10004844 <main+0x2e8>)
10004790:	781b      	ldrb	r3, [r3, #0]
10004792:	1e1a      	subs	r2, r3, #0
10004794:	68fb      	ldr	r3, [r7, #12]
10004796:	429a      	cmp	r2, r3
10004798:	dceb      	bgt.n	10004772 <main+0x216>
           {
             check_winner+=numsticks[i];
           }
           if (check_winner==1) // computer won
1000479a:	230b      	movs	r3, #11
1000479c:	18fb      	adds	r3, r7, r3
1000479e:	781b      	ldrb	r3, [r3, #0]
100047a0:	2b01      	cmp	r3, #1
100047a2:	d12a      	bne.n	100047fa <main+0x29e>
           {
             show_status();
100047a4:	f000 fd36 	bl	10005214 <show_status>
             display_update_timer=1000;
100047a8:	4b1a      	ldr	r3, [pc, #104]	; (10004814 <main+0x2b8>)
100047aa:	22fa      	movs	r2, #250	; 0xfa
100047ac:	0092      	lsls	r2, r2, #2
100047ae:	601a      	str	r2, [r3, #0]
             while(display_update_timer);
100047b0:	46c0      	nop			; (mov r8, r8)
100047b2:	4b18      	ldr	r3, [pc, #96]	; (10004814 <main+0x2b8>)
100047b4:	681b      	ldr	r3, [r3, #0]
100047b6:	2b00      	cmp	r3, #0
100047b8:	d1fb      	bne.n	100047b2 <main+0x256>
             play_tone(0); // play falling tone
100047ba:	2000      	movs	r0, #0
100047bc:	f000 fd52 	bl	10005264 <play_tone>
             scroll_text("LOSER  ", 7, 0);
100047c0:	4b22      	ldr	r3, [pc, #136]	; (1000484c <main+0x2f0>)
100047c2:	1c18      	adds	r0, r3, #0
100047c4:	2107      	movs	r1, #7
100047c6:	2200      	movs	r2, #0
100047c8:	f000 feae 	bl	10005528 <scroll_text>
             winner_announced=1;
100047cc:	230a      	movs	r3, #10
100047ce:	18fb      	adds	r3, r7, r3
100047d0:	2201      	movs	r2, #1
100047d2:	701a      	strb	r2, [r3, #0]
100047d4:	e011      	b.n	100047fa <main+0x29e>
           }
         }
       }
       else if (sel>100) // this signifies that a command has arrived (Computer button was held down and another button pressed)
100047d6:	2308      	movs	r3, #8
100047d8:	18fb      	adds	r3, r7, r3
100047da:	781b      	ldrb	r3, [r3, #0]
100047dc:	2b64      	cmp	r3, #100	; 0x64
100047de:	d90c      	bls.n	100047fa <main+0x29e>
       {
         // start a new game, at the level selected in the command
         level=sel-100;
100047e0:	2308      	movs	r3, #8
100047e2:	18fb      	adds	r3, r7, r3
100047e4:	781b      	ldrb	r3, [r3, #0]
100047e6:	3b64      	subs	r3, #100	; 0x64
100047e8:	b2da      	uxtb	r2, r3
100047ea:	4b19      	ldr	r3, [pc, #100]	; (10004850 <main+0x2f4>)
100047ec:	701a      	strb	r2, [r3, #0]
         playing=0;
100047ee:	4b13      	ldr	r3, [pc, #76]	; (1000483c <main+0x2e0>)
100047f0:	2200      	movs	r2, #0
100047f2:	701a      	strb	r2, [r3, #0]
         command_press=0;
100047f4:	4b17      	ldr	r3, [pc, #92]	; (10004854 <main+0x2f8>)
100047f6:	2200      	movs	r2, #0
100047f8:	701a      	strb	r2, [r3, #0]
       }
       show_status();
100047fa:	f000 fd0b 	bl	10005214 <show_status>
    winner_announced=0; // no-one has won this new game yet
    show_status();
    // wait in case a button is pressed, for it to be released
    while(a_button_pressed());
    playing=1;
    while(playing)
100047fe:	4b0f      	ldr	r3, [pc, #60]	; (1000483c <main+0x2e0>)
10004800:	781b      	ldrb	r3, [r3, #0]
10004802:	2b00      	cmp	r3, #0
10004804:	d000      	beq.n	10004808 <main+0x2ac>
10004806:	e71a      	b.n	1000463e <main+0xe2>
         playing=0;
         command_press=0;
       }
       show_status();
    }
  }
10004808:	e708      	b.n	1000461c <main+0xc0>
1000480a:	46c0      	nop			; (mov r8, r8)
1000480c:	100048bd 	.word	0x100048bd
10004810:	20000720 	.word	0x20000720
10004814:	200005c4 	.word	0x200005c4
10004818:	10005a00 	.word	0x10005a00
1000481c:	200006e8 	.word	0x200006e8
10004820:	10005980 	.word	0x10005980
10004824:	10005990 	.word	0x10005990
10004828:	100059a0 	.word	0x100059a0
1000482c:	100059b0 	.word	0x100059b0
10004830:	100059c0 	.word	0x100059c0
10004834:	100059d0 	.word	0x100059d0
10004838:	20000708 	.word	0x20000708
1000483c:	200005bd 	.word	0x200005bd
10004840:	20000700 	.word	0x20000700
10004844:	20000591 	.word	0x20000591
10004848:	10005a08 	.word	0x10005a08
1000484c:	10005a14 	.word	0x10005a14
10004850:	20000590 	.word	0x20000590
10004854:	200005bc 	.word	0x200005bc

10004858 <a_button_pressed>:
/* a_button_pressed returns 1 if any button is pressed according to the button press
 * status array
 */
char
a_button_pressed(void)
{
10004858:	b580      	push	{r7, lr}
1000485a:	b082      	sub	sp, #8
1000485c:	af00      	add	r7, sp, #0
  char status=0; // assume no button is pressed
1000485e:	1dfb      	adds	r3, r7, #7
10004860:	2200      	movs	r2, #0
10004862:	701a      	strb	r2, [r3, #0]
  unsigned char i;
  for (i=0; i<NUM_BUTTONS; i++)
10004864:	1dbb      	adds	r3, r7, #6
10004866:	2200      	movs	r2, #0
10004868:	701a      	strb	r2, [r3, #0]
1000486a:	e00e      	b.n	1000488a <a_button_pressed+0x32>
  {
    if (button_status[i]!=UNPRESSED)
1000486c:	1dbb      	adds	r3, r7, #6
1000486e:	781b      	ldrb	r3, [r3, #0]
10004870:	4a10      	ldr	r2, [pc, #64]	; (100048b4 <a_button_pressed+0x5c>)
10004872:	5cd3      	ldrb	r3, [r2, r3]
10004874:	2b00      	cmp	r3, #0
10004876:	d003      	beq.n	10004880 <a_button_pressed+0x28>
    {
      status=1; // a button was pressed!
10004878:	1dfb      	adds	r3, r7, #7
1000487a:	2201      	movs	r2, #1
1000487c:	701a      	strb	r2, [r3, #0]
      break;
1000487e:	e008      	b.n	10004892 <a_button_pressed+0x3a>
char
a_button_pressed(void)
{
  char status=0; // assume no button is pressed
  unsigned char i;
  for (i=0; i<NUM_BUTTONS; i++)
10004880:	1dbb      	adds	r3, r7, #6
10004882:	781a      	ldrb	r2, [r3, #0]
10004884:	1dbb      	adds	r3, r7, #6
10004886:	3201      	adds	r2, #1
10004888:	701a      	strb	r2, [r3, #0]
1000488a:	1dbb      	adds	r3, r7, #6
1000488c:	781b      	ldrb	r3, [r3, #0]
1000488e:	2b05      	cmp	r3, #5
10004890:	d9ec      	bls.n	1000486c <a_button_pressed+0x14>
    {
      status=1; // a button was pressed!
      break;
    }
  }
  if (status==0)
10004892:	1dfb      	adds	r3, r7, #7
10004894:	781b      	ldrb	r3, [r3, #0]
10004896:	2b00      	cmp	r3, #0
10004898:	d106      	bne.n	100048a8 <a_button_pressed+0x50>
  {
    if (do_all_button_inhibit==1)
1000489a:	4b07      	ldr	r3, [pc, #28]	; (100048b8 <a_button_pressed+0x60>)
1000489c:	781b      	ldrb	r3, [r3, #0]
1000489e:	2b01      	cmp	r3, #1
100048a0:	d102      	bne.n	100048a8 <a_button_pressed+0x50>
      status=1; // we're in a button release debounce period. Consider it still pressed!
100048a2:	1dfb      	adds	r3, r7, #7
100048a4:	2201      	movs	r2, #1
100048a6:	701a      	strb	r2, [r3, #0]
  }

  return(status);
100048a8:	1dfb      	adds	r3, r7, #7
100048aa:	781b      	ldrb	r3, [r3, #0]
}
100048ac:	1c18      	adds	r0, r3, #0
100048ae:	46bd      	mov	sp, r7
100048b0:	b002      	add	sp, #8
100048b2:	bd80      	pop	{r7, pc}
100048b4:	20000708 	.word	0x20000708
100048b8:	200005b5 	.word	0x200005b5

100048bc <fast_tick>:
 * we use this single timer to do several things,
 * but mainly to handle button debounce
 */
void
fast_tick(void)
{
100048bc:	b580      	push	{r7, lr}
100048be:	b082      	sub	sp, #8
100048c0:	af00      	add	r7, sp, #0
	unsigned char pressed=0;
100048c2:	1dfb      	adds	r3, r7, #7
100048c4:	2200      	movs	r2, #0
100048c6:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char already_recorded_press=0;
100048c8:	1d7b      	adds	r3, r7, #5
100048ca:	2200      	movs	r2, #0
100048cc:	701a      	strb	r2, [r3, #0]

	randreg++; // this acts like a seed to the random number generator
100048ce:	4b5a      	ldr	r3, [pc, #360]	; (10004a38 <fast_tick+0x17c>)
100048d0:	881b      	ldrh	r3, [r3, #0]
100048d2:	3301      	adds	r3, #1
100048d4:	b29a      	uxth	r2, r3
100048d6:	4b58      	ldr	r3, [pc, #352]	; (10004a38 <fast_tick+0x17c>)
100048d8:	801a      	strh	r2, [r3, #0]

	// some timers that can be set and read from the application
	if (general_timer>0)
100048da:	4b58      	ldr	r3, [pc, #352]	; (10004a3c <fast_tick+0x180>)
100048dc:	681b      	ldr	r3, [r3, #0]
100048de:	2b00      	cmp	r3, #0
100048e0:	d004      	beq.n	100048ec <fast_tick+0x30>
	  general_timer--;
100048e2:	4b56      	ldr	r3, [pc, #344]	; (10004a3c <fast_tick+0x180>)
100048e4:	681b      	ldr	r3, [r3, #0]
100048e6:	1e5a      	subs	r2, r3, #1
100048e8:	4b54      	ldr	r3, [pc, #336]	; (10004a3c <fast_tick+0x180>)
100048ea:	601a      	str	r2, [r3, #0]

	heartbeat_timer--;
100048ec:	4b54      	ldr	r3, [pc, #336]	; (10004a40 <fast_tick+0x184>)
100048ee:	681b      	ldr	r3, [r3, #0]
100048f0:	1e5a      	subs	r2, r3, #1
100048f2:	4b53      	ldr	r3, [pc, #332]	; (10004a40 <fast_tick+0x184>)
100048f4:	601a      	str	r2, [r3, #0]
	if (heartbeat_timer==0)
100048f6:	4b52      	ldr	r3, [pc, #328]	; (10004a40 <fast_tick+0x184>)
100048f8:	681b      	ldr	r3, [r3, #0]
100048fa:	2b00      	cmp	r3, #0
100048fc:	d107      	bne.n	1000490e <fast_tick+0x52>
	{
	  heartbeat_timer=HEARTBEAT_DELAY;
100048fe:	4b50      	ldr	r3, [pc, #320]	; (10004a40 <fast_tick+0x184>)
10004900:	22fa      	movs	r2, #250	; 0xfa
10004902:	0052      	lsls	r2, r2, #1
10004904:	601a      	str	r2, [r3, #0]
	  DIGITAL_IO_ToggleOutput(&led2);
10004906:	4b4f      	ldr	r3, [pc, #316]	; (10004a44 <fast_tick+0x188>)
10004908:	1c18      	adds	r0, r3, #0
1000490a:	f7ff fe05 	bl	10004518 <DIGITAL_IO_ToggleOutput>
	}

	// this timer is important for giving the display time to do its thing.
	// otherwise the display can hang.
	if (display_update_timer>0)
1000490e:	4b4e      	ldr	r3, [pc, #312]	; (10004a48 <fast_tick+0x18c>)
10004910:	681b      	ldr	r3, [r3, #0]
10004912:	2b00      	cmp	r3, #0
10004914:	d004      	beq.n	10004920 <fast_tick+0x64>
	  display_update_timer--;
10004916:	4b4c      	ldr	r3, [pc, #304]	; (10004a48 <fast_tick+0x18c>)
10004918:	681b      	ldr	r3, [r3, #0]
1000491a:	1e5a      	subs	r2, r3, #1
1000491c:	4b4a      	ldr	r3, [pc, #296]	; (10004a48 <fast_tick+0x18c>)
1000491e:	601a      	str	r2, [r3, #0]
	// immediately take action on a button press (and not wait for
	// a debounce period, or for the button to be released).
	// No button is allowed to be registered until a further
	// minimum of a release period.

	if (do_all_button_inhibit==0)
10004920:	4b4a      	ldr	r3, [pc, #296]	; (10004a4c <fast_tick+0x190>)
10004922:	781b      	ldrb	r3, [r3, #0]
10004924:	2b00      	cmp	r3, #0
10004926:	d000      	beq.n	1000492a <fast_tick+0x6e>
10004928:	e074      	b.n	10004a14 <fast_tick+0x158>
	{
		// check for button newly pressed
		for (i=0; i<NUM_BUTTONS; i++)
1000492a:	1dbb      	adds	r3, r7, #6
1000492c:	2200      	movs	r2, #0
1000492e:	701a      	strb	r2, [r3, #0]
10004930:	e020      	b.n	10004974 <fast_tick+0xb8>
		{
			if (button_status[i]==UNPRESSED)
10004932:	1dbb      	adds	r3, r7, #6
10004934:	781b      	ldrb	r3, [r3, #0]
10004936:	4a46      	ldr	r2, [pc, #280]	; (10004a50 <fast_tick+0x194>)
10004938:	5cd3      	ldrb	r3, [r2, r3]
1000493a:	2b00      	cmp	r3, #0
1000493c:	d110      	bne.n	10004960 <fast_tick+0xa4>
			{
				if (DIGITAL_IO_GetInput(button_handle[i])!=1)
1000493e:	1dbb      	adds	r3, r7, #6
10004940:	781a      	ldrb	r2, [r3, #0]
10004942:	4b44      	ldr	r3, [pc, #272]	; (10004a54 <fast_tick+0x198>)
10004944:	0092      	lsls	r2, r2, #2
10004946:	58d3      	ldr	r3, [r2, r3]
10004948:	1c18      	adds	r0, r3, #0
1000494a:	f7ff fdf5 	bl	10004538 <DIGITAL_IO_GetInput>
1000494e:	1e03      	subs	r3, r0, #0
10004950:	2b01      	cmp	r3, #1
10004952:	d00a      	beq.n	1000496a <fast_tick+0xae>
				{
					pressed=i+1;
10004954:	1dfb      	adds	r3, r7, #7
10004956:	1dba      	adds	r2, r7, #6
10004958:	7812      	ldrb	r2, [r2, #0]
1000495a:	3201      	adds	r2, #1
1000495c:	701a      	strb	r2, [r3, #0]
1000495e:	e004      	b.n	1000496a <fast_tick+0xae>
				}
			}
			else
			{
				// a button is already recorded as pressed
				already_recorded_press=i+1;
10004960:	1d7b      	adds	r3, r7, #5
10004962:	1dba      	adds	r2, r7, #6
10004964:	7812      	ldrb	r2, [r2, #0]
10004966:	3201      	adds	r2, #1
10004968:	701a      	strb	r2, [r3, #0]
	// minimum of a release period.

	if (do_all_button_inhibit==0)
	{
		// check for button newly pressed
		for (i=0; i<NUM_BUTTONS; i++)
1000496a:	1dbb      	adds	r3, r7, #6
1000496c:	781a      	ldrb	r2, [r3, #0]
1000496e:	1dbb      	adds	r3, r7, #6
10004970:	3201      	adds	r2, #1
10004972:	701a      	strb	r2, [r3, #0]
10004974:	1dbb      	adds	r3, r7, #6
10004976:	781b      	ldrb	r3, [r3, #0]
10004978:	2b05      	cmp	r3, #5
1000497a:	d9da      	bls.n	10004932 <fast_tick+0x76>
			}
		}
		// special case. Was the computer button first held down, and
		// then another button also pressed? That is a special command
		// (i.e. to start the gave over
		if (button_status[NUM_BUTTONS-1]!=UNPRESSED)
1000497c:	4b34      	ldr	r3, [pc, #208]	; (10004a50 <fast_tick+0x194>)
1000497e:	795b      	ldrb	r3, [r3, #5]
10004980:	2b00      	cmp	r3, #0
10004982:	d00f      	beq.n	100049a4 <fast_tick+0xe8>
		{
		  if ((pressed>0) && (pressed<NUM_BUTTONS))
10004984:	1dfb      	adds	r3, r7, #7
10004986:	781b      	ldrb	r3, [r3, #0]
10004988:	2b00      	cmp	r3, #0
1000498a:	d00b      	beq.n	100049a4 <fast_tick+0xe8>
1000498c:	1dfb      	adds	r3, r7, #7
1000498e:	781b      	ldrb	r3, [r3, #0]
10004990:	2b05      	cmp	r3, #5
10004992:	d807      	bhi.n	100049a4 <fast_tick+0xe8>
		  {
		    if (playing)
10004994:	4b30      	ldr	r3, [pc, #192]	; (10004a58 <fast_tick+0x19c>)
10004996:	781b      	ldrb	r3, [r3, #0]
10004998:	2b00      	cmp	r3, #0
1000499a:	d003      	beq.n	100049a4 <fast_tick+0xe8>
		    {
		      command_press=pressed;
1000499c:	4b2f      	ldr	r3, [pc, #188]	; (10004a5c <fast_tick+0x1a0>)
1000499e:	1dfa      	adds	r2, r7, #7
100049a0:	7812      	ldrb	r2, [r2, #0]
100049a2:	701a      	strb	r2, [r3, #0]
		    }
		  }
		}

		if ((already_recorded_press==0) && (pressed>0))
100049a4:	1d7b      	adds	r3, r7, #5
100049a6:	781b      	ldrb	r3, [r3, #0]
100049a8:	2b00      	cmp	r3, #0
100049aa:	d10d      	bne.n	100049c8 <fast_tick+0x10c>
100049ac:	1dfb      	adds	r3, r7, #7
100049ae:	781b      	ldrb	r3, [r3, #0]
100049b0:	2b00      	cmp	r3, #0
100049b2:	d009      	beq.n	100049c8 <fast_tick+0x10c>
		{
			button_status[pressed-1]=FIRST_PRESS;
100049b4:	1dfb      	adds	r3, r7, #7
100049b6:	781b      	ldrb	r3, [r3, #0]
100049b8:	3b01      	subs	r3, #1
100049ba:	4a25      	ldr	r2, [pc, #148]	; (10004a50 <fast_tick+0x194>)
100049bc:	2101      	movs	r1, #1
100049be:	54d1      	strb	r1, [r2, r3]
#ifdef DO_DEBUG
			printf("pressed: %d\n", pressed-1);
#endif
			press_ticks=0;
100049c0:	4b27      	ldr	r3, [pc, #156]	; (10004a60 <fast_tick+0x1a4>)
100049c2:	2200      	movs	r2, #0
100049c4:	601a      	str	r2, [r3, #0]
100049c6:	e034      	b.n	10004a32 <fast_tick+0x176>
		}
		else if (already_recorded_press>0) // a button was already recorded as pressed
100049c8:	1d7b      	adds	r3, r7, #5
100049ca:	781b      	ldrb	r3, [r3, #0]
100049cc:	2b00      	cmp	r3, #0
100049ce:	d030      	beq.n	10004a32 <fast_tick+0x176>
		{
			press_ticks++;
100049d0:	4b23      	ldr	r3, [pc, #140]	; (10004a60 <fast_tick+0x1a4>)
100049d2:	681b      	ldr	r3, [r3, #0]
100049d4:	1c5a      	adds	r2, r3, #1
100049d6:	4b22      	ldr	r3, [pc, #136]	; (10004a60 <fast_tick+0x1a4>)
100049d8:	601a      	str	r2, [r3, #0]
			if (press_ticks<DEBOUNCE_TICK_PERIOD)
100049da:	4b21      	ldr	r3, [pc, #132]	; (10004a60 <fast_tick+0x1a4>)
100049dc:	681b      	ldr	r3, [r3, #0]
100049de:	2b3b      	cmp	r3, #59	; 0x3b
100049e0:	d927      	bls.n	10004a32 <fast_tick+0x176>
				// we assume button remains pressed for at least the
				// debounce period
			}
			else
			{
				if (DIGITAL_IO_GetInput(button_handle[already_recorded_press-1])!=1)
100049e2:	1d7b      	adds	r3, r7, #5
100049e4:	781b      	ldrb	r3, [r3, #0]
100049e6:	1e5a      	subs	r2, r3, #1
100049e8:	4b1a      	ldr	r3, [pc, #104]	; (10004a54 <fast_tick+0x198>)
100049ea:	0092      	lsls	r2, r2, #2
100049ec:	58d3      	ldr	r3, [r2, r3]
100049ee:	1c18      	adds	r0, r3, #0
100049f0:	f7ff fda2 	bl	10004538 <DIGITAL_IO_GetInput>
100049f4:	1e03      	subs	r3, r0, #0
100049f6:	2b01      	cmp	r3, #1
100049f8:	d11b      	bne.n	10004a32 <fast_tick+0x176>
					// the button is still pressed.
				}
				else
				{
					// the button is released.
					button_status[already_recorded_press-1]=UNPRESSED;
100049fa:	1d7b      	adds	r3, r7, #5
100049fc:	781b      	ldrb	r3, [r3, #0]
100049fe:	3b01      	subs	r3, #1
10004a00:	4a13      	ldr	r2, [pc, #76]	; (10004a50 <fast_tick+0x194>)
10004a02:	2100      	movs	r1, #0
10004a04:	54d1      	strb	r1, [r2, r3]
					press_ticks=0;
10004a06:	4b16      	ldr	r3, [pc, #88]	; (10004a60 <fast_tick+0x1a4>)
10004a08:	2200      	movs	r2, #0
10004a0a:	601a      	str	r2, [r3, #0]
					do_all_button_inhibit=1;
10004a0c:	4b0f      	ldr	r3, [pc, #60]	; (10004a4c <fast_tick+0x190>)
10004a0e:	2201      	movs	r2, #1
10004a10:	701a      	strb	r2, [r3, #0]
10004a12:	e00e      	b.n	10004a32 <fast_tick+0x176>
		}
	}
	else
	{
		// button presses are being ignored.
		press_ticks++;
10004a14:	4b12      	ldr	r3, [pc, #72]	; (10004a60 <fast_tick+0x1a4>)
10004a16:	681b      	ldr	r3, [r3, #0]
10004a18:	1c5a      	adds	r2, r3, #1
10004a1a:	4b11      	ldr	r3, [pc, #68]	; (10004a60 <fast_tick+0x1a4>)
10004a1c:	601a      	str	r2, [r3, #0]
		if (press_ticks<RELEASE_TICK_PERIOD)
10004a1e:	4b10      	ldr	r3, [pc, #64]	; (10004a60 <fast_tick+0x1a4>)
10004a20:	681b      	ldr	r3, [r3, #0]
10004a22:	2b3b      	cmp	r3, #59	; 0x3b
10004a24:	d905      	bls.n	10004a32 <fast_tick+0x176>
		{
			// we're not done.. keep inhibiting button presses
		}
		else
		{
			do_all_button_inhibit=0;
10004a26:	4b09      	ldr	r3, [pc, #36]	; (10004a4c <fast_tick+0x190>)
10004a28:	2200      	movs	r2, #0
10004a2a:	701a      	strb	r2, [r3, #0]
			press_ticks=0;
10004a2c:	4b0c      	ldr	r3, [pc, #48]	; (10004a60 <fast_tick+0x1a4>)
10004a2e:	2200      	movs	r2, #0
10004a30:	601a      	str	r2, [r3, #0]
		}
	}
}
10004a32:	46bd      	mov	sp, r7
10004a34:	b002      	add	sp, #8
10004a36:	bd80      	pop	{r7, pc}
10004a38:	20000592 	.word	0x20000592
10004a3c:	200005c0 	.word	0x200005c0
10004a40:	20000594 	.word	0x20000594
10004a44:	100059e0 	.word	0x100059e0
10004a48:	200005c4 	.word	0x200005c4
10004a4c:	200005b5 	.word	0x200005b5
10004a50:	20000708 	.word	0x20000708
10004a54:	200006e8 	.word	0x200006e8
10004a58:	200005bd 	.word	0x200005bd
10004a5c:	200005bc 	.word	0x200005bc
10004a60:	200005b8 	.word	0x200005b8

10004a64 <random_num>:
 * a linear feedback shift register, for a pseudorandom sequence.
 * The returned random number is in the range 0..255
 */
unsigned char
random_num(void)
{
10004a64:	b580      	push	{r7, lr}
10004a66:	b082      	sub	sp, #8
10004a68:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i<=7; i++)
10004a6a:	1dfb      	adds	r3, r7, #7
10004a6c:	2200      	movs	r2, #0
10004a6e:	701a      	strb	r2, [r3, #0]
10004a70:	e024      	b.n	10004abc <random_num+0x58>
  {
    randreg ^= randreg>>7;
10004a72:	4b18      	ldr	r3, [pc, #96]	; (10004ad4 <random_num+0x70>)
10004a74:	881b      	ldrh	r3, [r3, #0]
10004a76:	09db      	lsrs	r3, r3, #7
10004a78:	b29a      	uxth	r2, r3
10004a7a:	4b16      	ldr	r3, [pc, #88]	; (10004ad4 <random_num+0x70>)
10004a7c:	881b      	ldrh	r3, [r3, #0]
10004a7e:	4053      	eors	r3, r2
10004a80:	b29a      	uxth	r2, r3
10004a82:	4b14      	ldr	r3, [pc, #80]	; (10004ad4 <random_num+0x70>)
10004a84:	801a      	strh	r2, [r3, #0]
    randreg ^= randreg<<9;
10004a86:	4b13      	ldr	r3, [pc, #76]	; (10004ad4 <random_num+0x70>)
10004a88:	881b      	ldrh	r3, [r3, #0]
10004a8a:	025b      	lsls	r3, r3, #9
10004a8c:	b29a      	uxth	r2, r3
10004a8e:	4b11      	ldr	r3, [pc, #68]	; (10004ad4 <random_num+0x70>)
10004a90:	881b      	ldrh	r3, [r3, #0]
10004a92:	b29b      	uxth	r3, r3
10004a94:	4053      	eors	r3, r2
10004a96:	b29b      	uxth	r3, r3
10004a98:	b29a      	uxth	r2, r3
10004a9a:	4b0e      	ldr	r3, [pc, #56]	; (10004ad4 <random_num+0x70>)
10004a9c:	801a      	strh	r2, [r3, #0]
    randreg ^= randreg>>13;
10004a9e:	4b0d      	ldr	r3, [pc, #52]	; (10004ad4 <random_num+0x70>)
10004aa0:	881b      	ldrh	r3, [r3, #0]
10004aa2:	0b5b      	lsrs	r3, r3, #13
10004aa4:	b29a      	uxth	r2, r3
10004aa6:	4b0b      	ldr	r3, [pc, #44]	; (10004ad4 <random_num+0x70>)
10004aa8:	881b      	ldrh	r3, [r3, #0]
10004aaa:	4053      	eors	r3, r2
10004aac:	b29a      	uxth	r2, r3
10004aae:	4b09      	ldr	r3, [pc, #36]	; (10004ad4 <random_num+0x70>)
10004ab0:	801a      	strh	r2, [r3, #0]
 */
unsigned char
random_num(void)
{
  char i;
  for (i=0; i<=7; i++)
10004ab2:	1dfb      	adds	r3, r7, #7
10004ab4:	781a      	ldrb	r2, [r3, #0]
10004ab6:	1dfb      	adds	r3, r7, #7
10004ab8:	3201      	adds	r2, #1
10004aba:	701a      	strb	r2, [r3, #0]
10004abc:	1dfb      	adds	r3, r7, #7
10004abe:	781b      	ldrb	r3, [r3, #0]
10004ac0:	2b07      	cmp	r3, #7
10004ac2:	d9d6      	bls.n	10004a72 <random_num+0xe>
  {
    randreg ^= randreg>>7;
    randreg ^= randreg<<9;
    randreg ^= randreg>>13;
  }
  return(unsigned char)(randreg & 0xff);
10004ac4:	4b03      	ldr	r3, [pc, #12]	; (10004ad4 <random_num+0x70>)
10004ac6:	881b      	ldrh	r3, [r3, #0]
10004ac8:	b2db      	uxtb	r3, r3
}
10004aca:	1c18      	adds	r0, r3, #0
10004acc:	46bd      	mov	sp, r7
10004ace:	b002      	add	sp, #8
10004ad0:	bd80      	pop	{r7, pc}
10004ad2:	46c0      	nop			; (mov r8, r8)
10004ad4:	20000592 	.word	0x20000592

10004ad8 <setup_game>:
/* setup_game
 * this function initializes the numsticks array, and the number of rows in the
 * game, depending on difficulty level. */
void
setup_game(void)
{
10004ad8:	b590      	push	{r4, r7, lr}
10004ada:	b083      	sub	sp, #12
10004adc:	af00      	add	r7, sp, #0
  unsigned char i;
  switch(level)
10004ade:	4b43      	ldr	r3, [pc, #268]	; (10004bec <setup_game+0x114>)
10004ae0:	781b      	ldrb	r3, [r3, #0]
10004ae2:	2b05      	cmp	r3, #5
10004ae4:	d900      	bls.n	10004ae8 <setup_game+0x10>
10004ae6:	e07d      	b.n	10004be4 <setup_game+0x10c>
10004ae8:	009a      	lsls	r2, r3, #2
10004aea:	4b41      	ldr	r3, [pc, #260]	; (10004bf0 <setup_game+0x118>)
10004aec:	18d3      	adds	r3, r2, r3
10004aee:	681b      	ldr	r3, [r3, #0]
10004af0:	469f      	mov	pc, r3
  {
    case 5: // hardest. Random number of sticks in each row.
      // Note: the 8x8 LED matrix implementation will only have 4 rows
      // and 4 buttons, so this level selection will not be possible.
      rows=5;
10004af2:	4b40      	ldr	r3, [pc, #256]	; (10004bf4 <setup_game+0x11c>)
10004af4:	2205      	movs	r2, #5
10004af6:	701a      	strb	r2, [r3, #0]
      for (i=0; i<rows; i++)
10004af8:	1dfb      	adds	r3, r7, #7
10004afa:	2200      	movs	r2, #0
10004afc:	701a      	strb	r2, [r3, #0]
10004afe:	e017      	b.n	10004b30 <setup_game+0x58>
      {
        numsticks[i]=random_num() & 0x07;
10004b00:	1dfb      	adds	r3, r7, #7
10004b02:	781c      	ldrb	r4, [r3, #0]
10004b04:	f7ff ffae 	bl	10004a64 <random_num>
10004b08:	1c03      	adds	r3, r0, #0
10004b0a:	1c1a      	adds	r2, r3, #0
10004b0c:	2307      	movs	r3, #7
10004b0e:	4013      	ands	r3, r2
10004b10:	b2da      	uxtb	r2, r3
10004b12:	4b39      	ldr	r3, [pc, #228]	; (10004bf8 <setup_game+0x120>)
10004b14:	551a      	strb	r2, [r3, r4]
        numsticks[i]++; // value is between 1 and 8
10004b16:	1dfb      	adds	r3, r7, #7
10004b18:	781b      	ldrb	r3, [r3, #0]
10004b1a:	4a37      	ldr	r2, [pc, #220]	; (10004bf8 <setup_game+0x120>)
10004b1c:	5cd2      	ldrb	r2, [r2, r3]
10004b1e:	3201      	adds	r2, #1
10004b20:	b2d1      	uxtb	r1, r2
10004b22:	4a35      	ldr	r2, [pc, #212]	; (10004bf8 <setup_game+0x120>)
10004b24:	54d1      	strb	r1, [r2, r3]
  {
    case 5: // hardest. Random number of sticks in each row.
      // Note: the 8x8 LED matrix implementation will only have 4 rows
      // and 4 buttons, so this level selection will not be possible.
      rows=5;
      for (i=0; i<rows; i++)
10004b26:	1dfb      	adds	r3, r7, #7
10004b28:	781a      	ldrb	r2, [r3, #0]
10004b2a:	1dfb      	adds	r3, r7, #7
10004b2c:	3201      	adds	r2, #1
10004b2e:	701a      	strb	r2, [r3, #0]
10004b30:	4b30      	ldr	r3, [pc, #192]	; (10004bf4 <setup_game+0x11c>)
10004b32:	781b      	ldrb	r3, [r3, #0]
10004b34:	1dfa      	adds	r2, r7, #7
10004b36:	7812      	ldrb	r2, [r2, #0]
10004b38:	429a      	cmp	r2, r3
10004b3a:	d3e1      	bcc.n	10004b00 <setup_game+0x28>
      {
        numsticks[i]=random_num() & 0x07;
        numsticks[i]++; // value is between 1 and 8
      }
      //numsticks[0]++; // one row can have up to 9 (not possible with this display)
      break;
10004b3c:	e052      	b.n	10004be4 <setup_game+0x10c>
    case 4: // hard. Random number of sticks in each row.
      rows=4;
10004b3e:	4b2d      	ldr	r3, [pc, #180]	; (10004bf4 <setup_game+0x11c>)
10004b40:	2204      	movs	r2, #4
10004b42:	701a      	strb	r2, [r3, #0]
      for (i=0; i<rows; i++)
10004b44:	1dfb      	adds	r3, r7, #7
10004b46:	2200      	movs	r2, #0
10004b48:	701a      	strb	r2, [r3, #0]
10004b4a:	e017      	b.n	10004b7c <setup_game+0xa4>
      {
        numsticks[i]=random_num() & 0x07;
10004b4c:	1dfb      	adds	r3, r7, #7
10004b4e:	781c      	ldrb	r4, [r3, #0]
10004b50:	f7ff ff88 	bl	10004a64 <random_num>
10004b54:	1c03      	adds	r3, r0, #0
10004b56:	1c1a      	adds	r2, r3, #0
10004b58:	2307      	movs	r3, #7
10004b5a:	4013      	ands	r3, r2
10004b5c:	b2da      	uxtb	r2, r3
10004b5e:	4b26      	ldr	r3, [pc, #152]	; (10004bf8 <setup_game+0x120>)
10004b60:	551a      	strb	r2, [r3, r4]
        numsticks[i]++; // value is between 1 and 8
10004b62:	1dfb      	adds	r3, r7, #7
10004b64:	781b      	ldrb	r3, [r3, #0]
10004b66:	4a24      	ldr	r2, [pc, #144]	; (10004bf8 <setup_game+0x120>)
10004b68:	5cd2      	ldrb	r2, [r2, r3]
10004b6a:	3201      	adds	r2, #1
10004b6c:	b2d1      	uxtb	r1, r2
10004b6e:	4a22      	ldr	r2, [pc, #136]	; (10004bf8 <setup_game+0x120>)
10004b70:	54d1      	strb	r1, [r2, r3]
      }
      //numsticks[0]++; // one row can have up to 9 (not possible with this display)
      break;
    case 4: // hard. Random number of sticks in each row.
      rows=4;
      for (i=0; i<rows; i++)
10004b72:	1dfb      	adds	r3, r7, #7
10004b74:	781a      	ldrb	r2, [r3, #0]
10004b76:	1dfb      	adds	r3, r7, #7
10004b78:	3201      	adds	r2, #1
10004b7a:	701a      	strb	r2, [r3, #0]
10004b7c:	4b1d      	ldr	r3, [pc, #116]	; (10004bf4 <setup_game+0x11c>)
10004b7e:	781b      	ldrb	r3, [r3, #0]
10004b80:	1dfa      	adds	r2, r7, #7
10004b82:	7812      	ldrb	r2, [r2, #0]
10004b84:	429a      	cmp	r2, r3
10004b86:	d3e1      	bcc.n	10004b4c <setup_game+0x74>
      {
        numsticks[i]=random_num() & 0x07;
        numsticks[i]++; // value is between 1 and 8
      }
      break;
10004b88:	e02c      	b.n	10004be4 <setup_game+0x10c>
    case 3: // moderate. Rows start with a pre-defined number of sticks.
      rows=4;
10004b8a:	4b1a      	ldr	r3, [pc, #104]	; (10004bf4 <setup_game+0x11c>)
10004b8c:	2204      	movs	r2, #4
10004b8e:	701a      	strb	r2, [r3, #0]
      numsticks[3]=7;
10004b90:	4b19      	ldr	r3, [pc, #100]	; (10004bf8 <setup_game+0x120>)
10004b92:	2207      	movs	r2, #7
10004b94:	70da      	strb	r2, [r3, #3]
      numsticks[2]=5;
10004b96:	4b18      	ldr	r3, [pc, #96]	; (10004bf8 <setup_game+0x120>)
10004b98:	2205      	movs	r2, #5
10004b9a:	709a      	strb	r2, [r3, #2]
      numsticks[1]=3;
10004b9c:	4b16      	ldr	r3, [pc, #88]	; (10004bf8 <setup_game+0x120>)
10004b9e:	2203      	movs	r2, #3
10004ba0:	705a      	strb	r2, [r3, #1]
      numsticks[0]=1;
10004ba2:	4b15      	ldr	r3, [pc, #84]	; (10004bf8 <setup_game+0x120>)
10004ba4:	2201      	movs	r2, #1
10004ba6:	701a      	strb	r2, [r3, #0]
      break;
10004ba8:	e01c      	b.n	10004be4 <setup_game+0x10c>
    case 2: // intermediate. Rows start with a pre-defined number of sticks, and weakened play by the computer
      rows=4;
10004baa:	4b12      	ldr	r3, [pc, #72]	; (10004bf4 <setup_game+0x11c>)
10004bac:	2204      	movs	r2, #4
10004bae:	701a      	strb	r2, [r3, #0]
      numsticks[3]=7;
10004bb0:	4b11      	ldr	r3, [pc, #68]	; (10004bf8 <setup_game+0x120>)
10004bb2:	2207      	movs	r2, #7
10004bb4:	70da      	strb	r2, [r3, #3]
      numsticks[2]=5;
10004bb6:	4b10      	ldr	r3, [pc, #64]	; (10004bf8 <setup_game+0x120>)
10004bb8:	2205      	movs	r2, #5
10004bba:	709a      	strb	r2, [r3, #2]
      numsticks[1]=3;
10004bbc:	4b0e      	ldr	r3, [pc, #56]	; (10004bf8 <setup_game+0x120>)
10004bbe:	2203      	movs	r2, #3
10004bc0:	705a      	strb	r2, [r3, #1]
      numsticks[0]=1;
10004bc2:	4b0d      	ldr	r3, [pc, #52]	; (10004bf8 <setup_game+0x120>)
10004bc4:	2201      	movs	r2, #1
10004bc6:	701a      	strb	r2, [r3, #0]
      break;
10004bc8:	e00c      	b.n	10004be4 <setup_game+0x10c>
    case 1: // easy. Just three rows of pre-defined sticks and weakened play by the computer
      rows=3;
10004bca:	4b0a      	ldr	r3, [pc, #40]	; (10004bf4 <setup_game+0x11c>)
10004bcc:	2203      	movs	r2, #3
10004bce:	701a      	strb	r2, [r3, #0]
      numsticks[2]=5;
10004bd0:	4b09      	ldr	r3, [pc, #36]	; (10004bf8 <setup_game+0x120>)
10004bd2:	2205      	movs	r2, #5
10004bd4:	709a      	strb	r2, [r3, #2]
      numsticks[1]=3;
10004bd6:	4b08      	ldr	r3, [pc, #32]	; (10004bf8 <setup_game+0x120>)
10004bd8:	2203      	movs	r2, #3
10004bda:	705a      	strb	r2, [r3, #1]
      numsticks[0]=1;
10004bdc:	4b06      	ldr	r3, [pc, #24]	; (10004bf8 <setup_game+0x120>)
10004bde:	2201      	movs	r2, #1
10004be0:	701a      	strb	r2, [r3, #0]
      break;
10004be2:	46c0      	nop			; (mov r8, r8)
  }
}
10004be4:	46bd      	mov	sp, r7
10004be6:	b003      	add	sp, #12
10004be8:	bd90      	pop	{r4, r7, pc}
10004bea:	46c0      	nop			; (mov r8, r8)
10004bec:	20000590 	.word	0x20000590
10004bf0:	10005a1c 	.word	0x10005a1c
10004bf4:	20000591 	.word	0x20000591
10004bf8:	20000700 	.word	0x20000700

10004bfc <user_play>:
/* user_play
 * updates the numsticks depending on button press. Returns 9 if
 * it is time for the computer to make a move. */
char
user_play(void)
{
10004bfc:	b580      	push	{r7, lr}
10004bfe:	b084      	sub	sp, #16
10004c00:	af00      	add	r7, sp, #0
  unsigned char waiting_for_press=1;
10004c02:	230f      	movs	r3, #15
10004c04:	18fb      	adds	r3, r7, r3
10004c06:	2201      	movs	r2, #1
10004c08:	701a      	strb	r2, [r3, #0]
  int selection=0;
10004c0a:	2300      	movs	r3, #0
10004c0c:	60bb      	str	r3, [r7, #8]
  unsigned char i;

  while(waiting_for_press)
10004c0e:	e03b      	b.n	10004c88 <user_play+0x8c>
  {
    for (i=0; i<NUM_BUTTONS; i++)
10004c10:	1dfb      	adds	r3, r7, #7
10004c12:	2200      	movs	r2, #0
10004c14:	701a      	strb	r2, [r3, #0]
10004c16:	e028      	b.n	10004c6a <user_play+0x6e>
    {
      if (button_status[i]==FIRST_PRESS)
10004c18:	1dfb      	adds	r3, r7, #7
10004c1a:	781b      	ldrb	r3, [r3, #0]
10004c1c:	4a32      	ldr	r2, [pc, #200]	; (10004ce8 <user_play+0xec>)
10004c1e:	5cd3      	ldrb	r3, [r2, r3]
10004c20:	2b01      	cmp	r3, #1
10004c22:	d11d      	bne.n	10004c60 <user_play+0x64>
      {
    	  // a button has just been pressed. Action it.
    	  selection=i+1;
10004c24:	1dfb      	adds	r3, r7, #7
10004c26:	781b      	ldrb	r3, [r3, #0]
10004c28:	3301      	adds	r3, #1
10004c2a:	60bb      	str	r3, [r7, #8]
        button_status[i]=PRESS_ACTIONED;
10004c2c:	1dfb      	adds	r3, r7, #7
10004c2e:	781b      	ldrb	r3, [r3, #0]
10004c30:	4a2d      	ldr	r2, [pc, #180]	; (10004ce8 <user_play+0xec>)
10004c32:	2102      	movs	r1, #2
10004c34:	54d1      	strb	r1, [r2, r3]
        waiting_for_press=0;
10004c36:	230f      	movs	r3, #15
10004c38:	18fb      	adds	r3, r7, r3
10004c3a:	2200      	movs	r2, #0
10004c3c:	701a      	strb	r2, [r3, #0]
    	  if (i==COMPUTER_BUTTON)
10004c3e:	1dfb      	adds	r3, r7, #7
10004c40:	781b      	ldrb	r3, [r3, #0]
10004c42:	2b05      	cmp	r3, #5
10004c44:	d10b      	bne.n	10004c5e <user_play+0x62>
    	  {
    	    selection=9; // arbitrarily use 9 to represent the computer move button
10004c46:	2309      	movs	r3, #9
10004c48:	60bb      	str	r3, [r7, #8]
    	    // unlike the other buttons, we wait for the computer button to be
    	    // released before actioning it. This is maybe a bit more intuitive for
    	    // the computer move, but more importantly, we want to catch if really
    	    // the user is issuing an overall game command to start a new game
    	    while(button_status[COMPUTER_BUTTON]==PRESS_ACTIONED)
10004c4a:	e004      	b.n	10004c56 <user_play+0x5a>
    	    {
    	      if (command_press)
10004c4c:	4b27      	ldr	r3, [pc, #156]	; (10004cec <user_play+0xf0>)
10004c4e:	781b      	ldrb	r3, [r3, #0]
10004c50:	2b00      	cmp	r3, #0
10004c52:	d000      	beq.n	10004c56 <user_play+0x5a>
    	        break;
10004c54:	e003      	b.n	10004c5e <user_play+0x62>
    	    selection=9; // arbitrarily use 9 to represent the computer move button
    	    // unlike the other buttons, we wait for the computer button to be
    	    // released before actioning it. This is maybe a bit more intuitive for
    	    // the computer move, but more importantly, we want to catch if really
    	    // the user is issuing an overall game command to start a new game
    	    while(button_status[COMPUTER_BUTTON]==PRESS_ACTIONED)
10004c56:	4b24      	ldr	r3, [pc, #144]	; (10004ce8 <user_play+0xec>)
10004c58:	795b      	ldrb	r3, [r3, #5]
10004c5a:	2b02      	cmp	r3, #2
10004c5c:	d0f6      	beq.n	10004c4c <user_play+0x50>
    	    {
    	      if (command_press)
    	        break;
    	    }
    	  }
    	  break;
10004c5e:	e008      	b.n	10004c72 <user_play+0x76>
  int selection=0;
  unsigned char i;

  while(waiting_for_press)
  {
    for (i=0; i<NUM_BUTTONS; i++)
10004c60:	1dfb      	adds	r3, r7, #7
10004c62:	781a      	ldrb	r2, [r3, #0]
10004c64:	1dfb      	adds	r3, r7, #7
10004c66:	3201      	adds	r2, #1
10004c68:	701a      	strb	r2, [r3, #0]
10004c6a:	1dfb      	adds	r3, r7, #7
10004c6c:	781b      	ldrb	r3, [r3, #0]
10004c6e:	2b05      	cmp	r3, #5
10004c70:	d9d2      	bls.n	10004c18 <user_play+0x1c>
    	    }
    	  }
    	  break;
      }
    }
    if (command_press)
10004c72:	4b1e      	ldr	r3, [pc, #120]	; (10004cec <user_play+0xf0>)
10004c74:	781b      	ldrb	r3, [r3, #0]
10004c76:	2b00      	cmp	r3, #0
10004c78:	d006      	beq.n	10004c88 <user_play+0x8c>
    {
      // A dual button sequence. The computer play button was held down,
      // and another button was pressed. We use it to start the game again,
      // at a level depending on what button was pressed.
      // we use the number 100 to encode that this game command has been invoked.
      selection=100+command_press;
10004c7a:	4b1c      	ldr	r3, [pc, #112]	; (10004cec <user_play+0xf0>)
10004c7c:	781b      	ldrb	r3, [r3, #0]
10004c7e:	3364      	adds	r3, #100	; 0x64
10004c80:	60bb      	str	r3, [r7, #8]
      current_selection=0; // reset, because we're starting a new game soon..
10004c82:	4b1b      	ldr	r3, [pc, #108]	; (10004cf0 <user_play+0xf4>)
10004c84:	2200      	movs	r2, #0
10004c86:	701a      	strb	r2, [r3, #0]
{
  unsigned char waiting_for_press=1;
  int selection=0;
  unsigned char i;

  while(waiting_for_press)
10004c88:	230f      	movs	r3, #15
10004c8a:	18fb      	adds	r3, r7, r3
10004c8c:	781b      	ldrb	r3, [r3, #0]
10004c8e:	2b00      	cmp	r3, #0
10004c90:	d1be      	bne.n	10004c10 <user_play+0x14>
#ifdef DO_DEBUG
  XMC_DEBUG("row to decrement? [1-%d] or [9]computer move: ", rows);
  printf("selection is %d", selection);
  //TODO //scanf("%d", &selection);
#endif
  if ((selection<=rows) && (selection>0)) // a row button was pressed
10004c92:	4b18      	ldr	r3, [pc, #96]	; (10004cf4 <user_play+0xf8>)
10004c94:	781b      	ldrb	r3, [r3, #0]
10004c96:	1e1a      	subs	r2, r3, #0
10004c98:	68bb      	ldr	r3, [r7, #8]
10004c9a:	429a      	cmp	r2, r3
10004c9c:	db1e      	blt.n	10004cdc <user_play+0xe0>
10004c9e:	68bb      	ldr	r3, [r7, #8]
10004ca0:	2b00      	cmp	r3, #0
10004ca2:	dd1b      	ble.n	10004cdc <user_play+0xe0>
  {
    // check that the user isn't trying to take sticks from other rows!
    // once they have chosen a row, they have to stick with that row
    if ((current_selection==0) || (current_selection==selection))
10004ca4:	4b12      	ldr	r3, [pc, #72]	; (10004cf0 <user_play+0xf4>)
10004ca6:	781b      	ldrb	r3, [r3, #0]
10004ca8:	2b00      	cmp	r3, #0
10004caa:	d005      	beq.n	10004cb8 <user_play+0xbc>
10004cac:	4b10      	ldr	r3, [pc, #64]	; (10004cf0 <user_play+0xf4>)
10004cae:	781b      	ldrb	r3, [r3, #0]
10004cb0:	1e1a      	subs	r2, r3, #0
10004cb2:	68bb      	ldr	r3, [r7, #8]
10004cb4:	429a      	cmp	r2, r3
10004cb6:	d111      	bne.n	10004cdc <user_play+0xe0>
    {
      if (numsticks[selection-1]>0)
10004cb8:	68bb      	ldr	r3, [r7, #8]
10004cba:	3b01      	subs	r3, #1
10004cbc:	4a0e      	ldr	r2, [pc, #56]	; (10004cf8 <user_play+0xfc>)
10004cbe:	5cd3      	ldrb	r3, [r2, r3]
10004cc0:	2b00      	cmp	r3, #0
10004cc2:	d00b      	beq.n	10004cdc <user_play+0xe0>
      {
        numsticks[selection-1]--;
10004cc4:	68bb      	ldr	r3, [r7, #8]
10004cc6:	3b01      	subs	r3, #1
10004cc8:	4a0b      	ldr	r2, [pc, #44]	; (10004cf8 <user_play+0xfc>)
10004cca:	5cd2      	ldrb	r2, [r2, r3]
10004ccc:	3a01      	subs	r2, #1
10004cce:	b2d1      	uxtb	r1, r2
10004cd0:	4a09      	ldr	r2, [pc, #36]	; (10004cf8 <user_play+0xfc>)
10004cd2:	54d1      	strb	r1, [r2, r3]
        current_selection=selection;
10004cd4:	68bb      	ldr	r3, [r7, #8]
10004cd6:	b2da      	uxtb	r2, r3
10004cd8:	4b05      	ldr	r3, [pc, #20]	; (10004cf0 <user_play+0xf4>)
10004cda:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return(selection);
10004cdc:	68bb      	ldr	r3, [r7, #8]
10004cde:	b2db      	uxtb	r3, r3
}
10004ce0:	1c18      	adds	r0, r3, #0
10004ce2:	46bd      	mov	sp, r7
10004ce4:	b004      	add	sp, #16
10004ce6:	bd80      	pop	{r7, pc}
10004ce8:	20000708 	.word	0x20000708
10004cec:	200005bc 	.word	0x200005bc
10004cf0:	200005b4 	.word	0x200005b4
10004cf4:	20000591 	.word	0x20000591
10004cf8:	20000700 	.word	0x20000700

10004cfc <count_ones>:
/* count_ones
 * this function counts up how many binary digits are 1
 */
unsigned char
count_ones(unsigned char value)
{
10004cfc:	b580      	push	{r7, lr}
10004cfe:	b084      	sub	sp, #16
10004d00:	af00      	add	r7, sp, #0
10004d02:	1c02      	adds	r2, r0, #0
10004d04:	1dfb      	adds	r3, r7, #7
10004d06:	701a      	strb	r2, [r3, #0]
  char i;
  char sum=0;
10004d08:	230e      	movs	r3, #14
10004d0a:	18fb      	adds	r3, r7, r3
10004d0c:	2200      	movs	r2, #0
10004d0e:	701a      	strb	r2, [r3, #0]

  for (i=0; i<8; i++)
10004d10:	230f      	movs	r3, #15
10004d12:	18fb      	adds	r3, r7, r3
10004d14:	2200      	movs	r2, #0
10004d16:	701a      	strb	r2, [r3, #0]
10004d18:	e017      	b.n	10004d4a <count_ones+0x4e>
  {
    if ((value & (1<<i)) != 0)
10004d1a:	1dfb      	adds	r3, r7, #7
10004d1c:	781a      	ldrb	r2, [r3, #0]
10004d1e:	230f      	movs	r3, #15
10004d20:	18fb      	adds	r3, r7, r3
10004d22:	781b      	ldrb	r3, [r3, #0]
10004d24:	411a      	asrs	r2, r3
10004d26:	1c13      	adds	r3, r2, #0
10004d28:	2201      	movs	r2, #1
10004d2a:	4013      	ands	r3, r2
10004d2c:	d006      	beq.n	10004d3c <count_ones+0x40>
      sum++;
10004d2e:	230e      	movs	r3, #14
10004d30:	18fb      	adds	r3, r7, r3
10004d32:	781a      	ldrb	r2, [r3, #0]
10004d34:	230e      	movs	r3, #14
10004d36:	18fb      	adds	r3, r7, r3
10004d38:	3201      	adds	r2, #1
10004d3a:	701a      	strb	r2, [r3, #0]
count_ones(unsigned char value)
{
  char i;
  char sum=0;

  for (i=0; i<8; i++)
10004d3c:	230f      	movs	r3, #15
10004d3e:	18fb      	adds	r3, r7, r3
10004d40:	781a      	ldrb	r2, [r3, #0]
10004d42:	230f      	movs	r3, #15
10004d44:	18fb      	adds	r3, r7, r3
10004d46:	3201      	adds	r2, #1
10004d48:	701a      	strb	r2, [r3, #0]
10004d4a:	230f      	movs	r3, #15
10004d4c:	18fb      	adds	r3, r7, r3
10004d4e:	781b      	ldrb	r3, [r3, #0]
10004d50:	2b07      	cmp	r3, #7
10004d52:	d9e2      	bls.n	10004d1a <count_ones+0x1e>
  {
    if ((value & (1<<i)) != 0)
      sum++;
  }
  return(sum);
10004d54:	230e      	movs	r3, #14
10004d56:	18fb      	adds	r3, r7, r3
10004d58:	781b      	ldrb	r3, [r3, #0]
}
10004d5a:	1c18      	adds	r0, r3, #0
10004d5c:	46bd      	mov	sp, r7
10004d5e:	b004      	add	sp, #16
10004d60:	bd80      	pop	{r7, pc}
10004d62:	46c0      	nop			; (mov r8, r8)

10004d64 <computer_play>:
/* computer_play
 * This function is the computer's algorithm, to try to beat the user.
 */
void
computer_play(void)
{
10004d64:	b590      	push	{r4, r7, lr}
10004d66:	b08b      	sub	sp, #44	; 0x2c
10004d68:	af00      	add	r7, sp, #0
  unsigned char x=numsticks[0]; // x is the variable X in the Wikipedia article for Nim
10004d6a:	2327      	movs	r3, #39	; 0x27
10004d6c:	18fb      	adds	r3, r7, r3
10004d6e:	4acc      	ldr	r2, [pc, #816]	; (100050a0 <computer_play+0x33c>)
10004d70:	7812      	ldrb	r2, [r2, #0]
10004d72:	701a      	strb	r2, [r3, #0]
  unsigned char interim_xor[MAXROWS]; // this array holds "the nim-sum of X and heap-size" for each row (see Wikipedia article for Nim)
  unsigned char playable_rows_bitmap=0;
10004d74:	2326      	movs	r3, #38	; 0x26
10004d76:	18fb      	adds	r3, r7, r3
10004d78:	2200      	movs	r2, #0
10004d7a:	701a      	strb	r2, [r3, #0]
  unsigned char num_playable_rows=0;
10004d7c:	2319      	movs	r3, #25
10004d7e:	18fb      	adds	r3, r7, r3
10004d80:	2200      	movs	r2, #0
10004d82:	701a      	strb	r2, [r3, #0]
  unsigned char candidate[MAXROWS]; // this array holds an idea for the the number of sticks to leave remaining in a row.
  unsigned char quality[MAXROWS]; // a quality value (higher is better) for how good the candidate idea is
  unsigned char peak_quality=0;
10004d84:	2325      	movs	r3, #37	; 0x25
10004d86:	18fb      	adds	r3, r7, r3
10004d88:	2200      	movs	r2, #0
10004d8a:	701a      	strb	r2, [r3, #0]
  unsigned char peak_candidate=0;
10004d8c:	2324      	movs	r3, #36	; 0x24
10004d8e:	18fb      	adds	r3, r7, r3
10004d90:	2200      	movs	r2, #0
10004d92:	701a      	strb	r2, [r3, #0]
  unsigned char unitychecknotneeded=0; // we need to check how many rows have only one stick remaining, as part of the algorithm. This variable helps with the algorithm.
10004d94:	2323      	movs	r3, #35	; 0x23
10004d96:	18fb      	adds	r3, r7, r3
10004d98:	2200      	movs	r2, #0
10004d9a:	701a      	strb	r2, [r3, #0]

  int i;
  char j, temp;
  char unityheaps=0;
10004d9c:	231a      	movs	r3, #26
10004d9e:	18fb      	adds	r3, r7, r3
10004da0:	2200      	movs	r2, #0
10004da2:	701a      	strb	r2, [r3, #0]

  // now the computer is playing. Reset the button selection for the user,
  // so that when it is their turn, they will be free to choose any row.
  current_selection=0;
10004da4:	4bbf      	ldr	r3, [pc, #764]	; (100050a4 <computer_play+0x340>)
10004da6:	2200      	movs	r2, #0
10004da8:	701a      	strb	r2, [r3, #0]

  for (i=0; i<MAXROWS; i++)
10004daa:	2300      	movs	r3, #0
10004dac:	61fb      	str	r3, [r7, #28]
10004dae:	e007      	b.n	10004dc0 <computer_play+0x5c>
  {
    quality[i]=0; // initialize the quality array
10004db0:	1c3a      	adds	r2, r7, #0
10004db2:	69fb      	ldr	r3, [r7, #28]
10004db4:	18d3      	adds	r3, r2, r3
10004db6:	2200      	movs	r2, #0
10004db8:	701a      	strb	r2, [r3, #0]

  // now the computer is playing. Reset the button selection for the user,
  // so that when it is their turn, they will be free to choose any row.
  current_selection=0;

  for (i=0; i<MAXROWS; i++)
10004dba:	69fb      	ldr	r3, [r7, #28]
10004dbc:	3301      	adds	r3, #1
10004dbe:	61fb      	str	r3, [r7, #28]
10004dc0:	69fb      	ldr	r3, [r7, #28]
10004dc2:	2b04      	cmp	r3, #4
10004dc4:	ddf4      	ble.n	10004db0 <computer_play+0x4c>
  }

  // find the best possible move, using the sum of
  // powers of two method, which is basically a
  // lot of XORing
  for (i=1; i<rows; i++)
10004dc6:	2301      	movs	r3, #1
10004dc8:	61fb      	str	r3, [r7, #28]
10004dca:	e00d      	b.n	10004de8 <computer_play+0x84>
  {
    x=x^numsticks[i];
10004dcc:	4ab4      	ldr	r2, [pc, #720]	; (100050a0 <computer_play+0x33c>)
10004dce:	69fb      	ldr	r3, [r7, #28]
10004dd0:	18d3      	adds	r3, r2, r3
10004dd2:	7819      	ldrb	r1, [r3, #0]
10004dd4:	2327      	movs	r3, #39	; 0x27
10004dd6:	18fb      	adds	r3, r7, r3
10004dd8:	2227      	movs	r2, #39	; 0x27
10004dda:	18ba      	adds	r2, r7, r2
10004ddc:	7812      	ldrb	r2, [r2, #0]
10004dde:	404a      	eors	r2, r1
10004de0:	701a      	strb	r2, [r3, #0]
  }

  // find the best possible move, using the sum of
  // powers of two method, which is basically a
  // lot of XORing
  for (i=1; i<rows; i++)
10004de2:	69fb      	ldr	r3, [r7, #28]
10004de4:	3301      	adds	r3, #1
10004de6:	61fb      	str	r3, [r7, #28]
10004de8:	4baf      	ldr	r3, [pc, #700]	; (100050a8 <computer_play+0x344>)
10004dea:	781b      	ldrb	r3, [r3, #0]
10004dec:	1e1a      	subs	r2, r3, #0
10004dee:	69fb      	ldr	r3, [r7, #28]
10004df0:	429a      	cmp	r2, r3
10004df2:	dceb      	bgt.n	10004dcc <computer_play+0x68>
  {
    x=x^numsticks[i];
  }
  XMC_DEBUG("x=%d\n", x);
  if (x>0)
10004df4:	2327      	movs	r3, #39	; 0x27
10004df6:	18fb      	adds	r3, r7, r3
10004df8:	781b      	ldrb	r3, [r3, #0]
10004dfa:	2b00      	cmp	r3, #0
10004dfc:	d100      	bne.n	10004e00 <computer_play+0x9c>
10004dfe:	e1e2      	b.n	100051c6 <computer_play+0x462>
  {
    for (i=0; i<rows; i++)
10004e00:	2300      	movs	r3, #0
10004e02:	61fb      	str	r3, [r7, #28]
10004e04:	e029      	b.n	10004e5a <computer_play+0xf6>
    {
      interim_xor[i]=x^numsticks[i];
10004e06:	4aa6      	ldr	r2, [pc, #664]	; (100050a0 <computer_play+0x33c>)
10004e08:	69fb      	ldr	r3, [r7, #28]
10004e0a:	18d3      	adds	r3, r2, r3
10004e0c:	781a      	ldrb	r2, [r3, #0]
10004e0e:	2327      	movs	r3, #39	; 0x27
10004e10:	18fb      	adds	r3, r7, r3
10004e12:	781b      	ldrb	r3, [r3, #0]
10004e14:	4053      	eors	r3, r2
10004e16:	b2d9      	uxtb	r1, r3
10004e18:	2310      	movs	r3, #16
10004e1a:	18fa      	adds	r2, r7, r3
10004e1c:	69fb      	ldr	r3, [r7, #28]
10004e1e:	18d3      	adds	r3, r2, r3
10004e20:	1c0a      	adds	r2, r1, #0
10004e22:	701a      	strb	r2, [r3, #0]
      if (interim_xor[i]<numsticks[i])
10004e24:	2310      	movs	r3, #16
10004e26:	18fa      	adds	r2, r7, r3
10004e28:	69fb      	ldr	r3, [r7, #28]
10004e2a:	18d3      	adds	r3, r2, r3
10004e2c:	781a      	ldrb	r2, [r3, #0]
10004e2e:	499c      	ldr	r1, [pc, #624]	; (100050a0 <computer_play+0x33c>)
10004e30:	69fb      	ldr	r3, [r7, #28]
10004e32:	18cb      	adds	r3, r1, r3
10004e34:	781b      	ldrb	r3, [r3, #0]
10004e36:	429a      	cmp	r2, r3
10004e38:	d20c      	bcs.n	10004e54 <computer_play+0xf0>
      {
        playable_rows_bitmap |= 1<<i;
10004e3a:	2201      	movs	r2, #1
10004e3c:	69fb      	ldr	r3, [r7, #28]
10004e3e:	409a      	lsls	r2, r3
10004e40:	1c13      	adds	r3, r2, #0
10004e42:	b2da      	uxtb	r2, r3
10004e44:	2326      	movs	r3, #38	; 0x26
10004e46:	18fb      	adds	r3, r7, r3
10004e48:	781b      	ldrb	r3, [r3, #0]
10004e4a:	4313      	orrs	r3, r2
10004e4c:	b2da      	uxtb	r2, r3
10004e4e:	2326      	movs	r3, #38	; 0x26
10004e50:	18fb      	adds	r3, r7, r3
10004e52:	701a      	strb	r2, [r3, #0]
    x=x^numsticks[i];
  }
  XMC_DEBUG("x=%d\n", x);
  if (x>0)
  {
    for (i=0; i<rows; i++)
10004e54:	69fb      	ldr	r3, [r7, #28]
10004e56:	3301      	adds	r3, #1
10004e58:	61fb      	str	r3, [r7, #28]
10004e5a:	4b93      	ldr	r3, [pc, #588]	; (100050a8 <computer_play+0x344>)
10004e5c:	781b      	ldrb	r3, [r3, #0]
10004e5e:	1e1a      	subs	r2, r3, #0
10004e60:	69fb      	ldr	r3, [r7, #28]
10004e62:	429a      	cmp	r2, r3
10004e64:	dccf      	bgt.n	10004e06 <computer_play+0xa2>
      {
        playable_rows_bitmap |= 1<<i;
      }
    }
    XMC_DEBUG("interim_xor are %d, %d, %d, %d\n", interim_xor[0], interim_xor[1], interim_xor[2], interim_xor[3]);
    num_playable_rows=count_ones(playable_rows_bitmap);
10004e66:	2319      	movs	r3, #25
10004e68:	18fc      	adds	r4, r7, r3
10004e6a:	2326      	movs	r3, #38	; 0x26
10004e6c:	18fb      	adds	r3, r7, r3
10004e6e:	781b      	ldrb	r3, [r3, #0]
10004e70:	1c18      	adds	r0, r3, #0
10004e72:	f7ff ff43 	bl	10004cfc <count_ones>
10004e76:	1c03      	adds	r3, r0, #0
10004e78:	7023      	strb	r3, [r4, #0]
    XMC_DEBUG("num_playable_rows=%d\n", num_playable_rows);
    if (num_playable_rows>=1)
10004e7a:	2319      	movs	r3, #25
10004e7c:	18fb      	adds	r3, r7, r3
10004e7e:	781b      	ldrb	r3, [r3, #0]
10004e80:	2b00      	cmp	r3, #0
10004e82:	d100      	bne.n	10004e86 <computer_play+0x122>
10004e84:	e17e      	b.n	10005184 <computer_play+0x420>
    {
      // overall strategy: find some possible moves, and give them a weight
      // and then we'll pick the best of the lot.
      for (i=rows-1; i>=0; i--)
10004e86:	4b88      	ldr	r3, [pc, #544]	; (100050a8 <computer_play+0x344>)
10004e88:	781b      	ldrb	r3, [r3, #0]
10004e8a:	3b01      	subs	r3, #1
10004e8c:	61fb      	str	r3, [r7, #28]
10004e8e:	e0d7      	b.n	10005040 <computer_play+0x2dc>
      {
        if ((playable_rows_bitmap & (1<<i)) != 0) // i is a playable row
10004e90:	2326      	movs	r3, #38	; 0x26
10004e92:	18fb      	adds	r3, r7, r3
10004e94:	781a      	ldrb	r2, [r3, #0]
10004e96:	69fb      	ldr	r3, [r7, #28]
10004e98:	411a      	asrs	r2, r3
10004e9a:	1c13      	adds	r3, r2, #0
10004e9c:	2201      	movs	r2, #1
10004e9e:	4013      	ands	r3, r2
10004ea0:	d100      	bne.n	10004ea4 <computer_play+0x140>
10004ea2:	e0ca      	b.n	1000503a <computer_play+0x2d6>
        {
          unitychecknotneeded=0;
10004ea4:	2323      	movs	r3, #35	; 0x23
10004ea6:	18fb      	adds	r3, r7, r3
10004ea8:	2200      	movs	r2, #0
10004eaa:	701a      	strb	r2, [r3, #0]
          XMC_DEBUG("testing candidate %d\n", i);
          temp=interim_xor[i]; // reduce size of heap to XOR of its original size with x
10004eac:	2318      	movs	r3, #24
10004eae:	18fb      	adds	r3, r7, r3
10004eb0:	2210      	movs	r2, #16
10004eb2:	18b9      	adds	r1, r7, r2
10004eb4:	69fa      	ldr	r2, [r7, #28]
10004eb6:	188a      	adds	r2, r1, r2
10004eb8:	7812      	ldrb	r2, [r2, #0]
10004eba:	701a      	strb	r2, [r3, #0]
          // if we make the temp move real, will it leave only heaps with size 1?

          if (temp==1)
10004ebc:	2318      	movs	r3, #24
10004ebe:	18fb      	adds	r3, r7, r3
10004ec0:	781b      	ldrb	r3, [r3, #0]
10004ec2:	2b01      	cmp	r3, #1
10004ec4:	d106      	bne.n	10004ed4 <computer_play+0x170>
            unityheaps++;
10004ec6:	231a      	movs	r3, #26
10004ec8:	18fb      	adds	r3, r7, r3
10004eca:	781a      	ldrb	r2, [r3, #0]
10004ecc:	231a      	movs	r3, #26
10004ece:	18fb      	adds	r3, r7, r3
10004ed0:	3201      	adds	r2, #1
10004ed2:	701a      	strb	r2, [r3, #0]
          for (j=0; j<rows; j++)
10004ed4:	231b      	movs	r3, #27
10004ed6:	18fb      	adds	r3, r7, r3
10004ed8:	2200      	movs	r2, #0
10004eda:	701a      	strb	r2, [r3, #0]
10004edc:	e026      	b.n	10004f2c <computer_play+0x1c8>
          {
            if (j!=i)
10004ede:	231b      	movs	r3, #27
10004ee0:	18fb      	adds	r3, r7, r3
10004ee2:	781a      	ldrb	r2, [r3, #0]
10004ee4:	69fb      	ldr	r3, [r7, #28]
10004ee6:	429a      	cmp	r2, r3
10004ee8:	d019      	beq.n	10004f1e <computer_play+0x1ba>
            {
              if (numsticks[(unsigned char)j]==1)
10004eea:	231b      	movs	r3, #27
10004eec:	18fb      	adds	r3, r7, r3
10004eee:	781b      	ldrb	r3, [r3, #0]
10004ef0:	4a6b      	ldr	r2, [pc, #428]	; (100050a0 <computer_play+0x33c>)
10004ef2:	5cd3      	ldrb	r3, [r2, r3]
10004ef4:	2b01      	cmp	r3, #1
10004ef6:	d107      	bne.n	10004f08 <computer_play+0x1a4>
              {
                unityheaps++;
10004ef8:	231a      	movs	r3, #26
10004efa:	18fb      	adds	r3, r7, r3
10004efc:	781a      	ldrb	r2, [r3, #0]
10004efe:	231a      	movs	r3, #26
10004f00:	18fb      	adds	r3, r7, r3
10004f02:	3201      	adds	r2, #1
10004f04:	701a      	strb	r2, [r3, #0]
10004f06:	e00a      	b.n	10004f1e <computer_play+0x1ba>
              }
              else if (numsticks[(unsigned char)j]>1)
10004f08:	231b      	movs	r3, #27
10004f0a:	18fb      	adds	r3, r7, r3
10004f0c:	781b      	ldrb	r3, [r3, #0]
10004f0e:	4a64      	ldr	r2, [pc, #400]	; (100050a0 <computer_play+0x33c>)
10004f10:	5cd3      	ldrb	r3, [r2, r3]
10004f12:	2b01      	cmp	r3, #1
10004f14:	d903      	bls.n	10004f1e <computer_play+0x1ba>
              {
                unitychecknotneeded=1;
10004f16:	2323      	movs	r3, #35	; 0x23
10004f18:	18fb      	adds	r3, r7, r3
10004f1a:	2201      	movs	r2, #1
10004f1c:	701a      	strb	r2, [r3, #0]
          temp=interim_xor[i]; // reduce size of heap to XOR of its original size with x
          // if we make the temp move real, will it leave only heaps with size 1?

          if (temp==1)
            unityheaps++;
          for (j=0; j<rows; j++)
10004f1e:	231b      	movs	r3, #27
10004f20:	18fb      	adds	r3, r7, r3
10004f22:	781a      	ldrb	r2, [r3, #0]
10004f24:	231b      	movs	r3, #27
10004f26:	18fb      	adds	r3, r7, r3
10004f28:	3201      	adds	r2, #1
10004f2a:	701a      	strb	r2, [r3, #0]
10004f2c:	4b5e      	ldr	r3, [pc, #376]	; (100050a8 <computer_play+0x344>)
10004f2e:	781b      	ldrb	r3, [r3, #0]
10004f30:	221b      	movs	r2, #27
10004f32:	18ba      	adds	r2, r7, r2
10004f34:	7812      	ldrb	r2, [r2, #0]
10004f36:	429a      	cmp	r2, r3
10004f38:	d3d1      	bcc.n	10004ede <computer_play+0x17a>
              {
                unitychecknotneeded=1;
              }
            }
          }
          if ((temp<=1) && (unitychecknotneeded==0))
10004f3a:	2318      	movs	r3, #24
10004f3c:	18fb      	adds	r3, r7, r3
10004f3e:	781b      	ldrb	r3, [r3, #0]
10004f40:	2b01      	cmp	r3, #1
10004f42:	d867      	bhi.n	10005014 <computer_play+0x2b0>
10004f44:	2323      	movs	r3, #35	; 0x23
10004f46:	18fb      	adds	r3, r7, r3
10004f48:	781b      	ldrb	r3, [r3, #0]
10004f4a:	2b00      	cmp	r3, #0
10004f4c:	d162      	bne.n	10005014 <computer_play+0x2b0>
          {
            // is unityheaps odd? We want that..
            if ((unityheaps & 1) != 0)
10004f4e:	231a      	movs	r3, #26
10004f50:	18fb      	adds	r3, r7, r3
10004f52:	781b      	ldrb	r3, [r3, #0]
10004f54:	2201      	movs	r2, #1
10004f56:	4013      	ands	r3, r2
10004f58:	d013      	beq.n	10004f82 <computer_play+0x21e>
            {
              // make the move permanent
              candidate[i]=temp;
10004f5a:	2308      	movs	r3, #8
10004f5c:	18fa      	adds	r2, r7, r3
10004f5e:	69fb      	ldr	r3, [r7, #28]
10004f60:	18d3      	adds	r3, r2, r3
10004f62:	2218      	movs	r2, #24
10004f64:	18ba      	adds	r2, r7, r2
10004f66:	7812      	ldrb	r2, [r2, #0]
10004f68:	701a      	strb	r2, [r3, #0]
              quality[i]+=10;
10004f6a:	1c3a      	adds	r2, r7, #0
10004f6c:	69fb      	ldr	r3, [r7, #28]
10004f6e:	18d3      	adds	r3, r2, r3
10004f70:	781b      	ldrb	r3, [r3, #0]
10004f72:	330a      	adds	r3, #10
10004f74:	b2d9      	uxtb	r1, r3
10004f76:	1c3a      	adds	r2, r7, #0
10004f78:	69fb      	ldr	r3, [r7, #28]
10004f7a:	18d3      	adds	r3, r2, r3
10004f7c:	1c0a      	adds	r2, r1, #0
10004f7e:	701a      	strb	r2, [r3, #0]
10004f80:	e047      	b.n	10005012 <computer_play+0x2ae>
            } // unityheaps would be even with that move. so take different action.
            else if (temp==1)
10004f82:	2318      	movs	r3, #24
10004f84:	18fb      	adds	r3, r7, r3
10004f86:	781b      	ldrb	r3, [r3, #0]
10004f88:	2b01      	cmp	r3, #1
10004f8a:	d111      	bne.n	10004fb0 <computer_play+0x24c>
            {
              // we can reduce to zero.
              candidate[i]=0;
10004f8c:	2308      	movs	r3, #8
10004f8e:	18fa      	adds	r2, r7, r3
10004f90:	69fb      	ldr	r3, [r7, #28]
10004f92:	18d3      	adds	r3, r2, r3
10004f94:	2200      	movs	r2, #0
10004f96:	701a      	strb	r2, [r3, #0]
              quality[i]+=5; // this move should be good too
10004f98:	1c3a      	adds	r2, r7, #0
10004f9a:	69fb      	ldr	r3, [r7, #28]
10004f9c:	18d3      	adds	r3, r2, r3
10004f9e:	781b      	ldrb	r3, [r3, #0]
10004fa0:	3305      	adds	r3, #5
10004fa2:	b2d9      	uxtb	r1, r3
10004fa4:	1c3a      	adds	r2, r7, #0
10004fa6:	69fb      	ldr	r3, [r7, #28]
10004fa8:	18d3      	adds	r3, r2, r3
10004faa:	1c0a      	adds	r2, r1, #0
10004fac:	701a      	strb	r2, [r3, #0]
10004fae:	e030      	b.n	10005012 <computer_play+0x2ae>
            }
            else
            {
              if (temp==0)
10004fb0:	2318      	movs	r3, #24
10004fb2:	18fb      	adds	r3, r7, r3
10004fb4:	781b      	ldrb	r3, [r3, #0]
10004fb6:	2b00      	cmp	r3, #0
10004fb8:	d117      	bne.n	10004fea <computer_play+0x286>
              {
                if (numsticks[i]>1)
10004fba:	4a39      	ldr	r2, [pc, #228]	; (100050a0 <computer_play+0x33c>)
10004fbc:	69fb      	ldr	r3, [r7, #28]
10004fbe:	18d3      	adds	r3, r2, r3
10004fc0:	781b      	ldrb	r3, [r3, #0]
10004fc2:	2b01      	cmp	r3, #1
10004fc4:	d925      	bls.n	10005012 <computer_play+0x2ae>
                {
                  // we can leave one stick, to make it odd again
                  candidate[i]=1;
10004fc6:	2308      	movs	r3, #8
10004fc8:	18fa      	adds	r2, r7, r3
10004fca:	69fb      	ldr	r3, [r7, #28]
10004fcc:	18d3      	adds	r3, r2, r3
10004fce:	2201      	movs	r2, #1
10004fd0:	701a      	strb	r2, [r3, #0]
                  quality[i]+=9; // this move should be good
10004fd2:	1c3a      	adds	r2, r7, #0
10004fd4:	69fb      	ldr	r3, [r7, #28]
10004fd6:	18d3      	adds	r3, r2, r3
10004fd8:	781b      	ldrb	r3, [r3, #0]
10004fda:	3309      	adds	r3, #9
10004fdc:	b2d9      	uxtb	r1, r3
10004fde:	1c3a      	adds	r2, r7, #0
10004fe0:	69fb      	ldr	r3, [r7, #28]
10004fe2:	18d3      	adds	r3, r2, r3
10004fe4:	1c0a      	adds	r2, r1, #0
10004fe6:	701a      	strb	r2, [r3, #0]
            }
          }
          if ((temp<=1) && (unitychecknotneeded==0))
          {
            // is unityheaps odd? We want that..
            if ((unityheaps & 1) != 0)
10004fe8:	e027      	b.n	1000503a <computer_play+0x2d6>
                }
              }
              else
              {
                // this won't be a nice move to make. But it is a valid move.
                candidate[i]=temp;
10004fea:	2308      	movs	r3, #8
10004fec:	18fa      	adds	r2, r7, r3
10004fee:	69fb      	ldr	r3, [r7, #28]
10004ff0:	18d3      	adds	r3, r2, r3
10004ff2:	2218      	movs	r2, #24
10004ff4:	18ba      	adds	r2, r7, r2
10004ff6:	7812      	ldrb	r2, [r2, #0]
10004ff8:	701a      	strb	r2, [r3, #0]
                quality[i]+=1;
10004ffa:	1c3a      	adds	r2, r7, #0
10004ffc:	69fb      	ldr	r3, [r7, #28]
10004ffe:	18d3      	adds	r3, r2, r3
10005000:	781b      	ldrb	r3, [r3, #0]
10005002:	3301      	adds	r3, #1
10005004:	b2d9      	uxtb	r1, r3
10005006:	1c3a      	adds	r2, r7, #0
10005008:	69fb      	ldr	r3, [r7, #28]
1000500a:	18d3      	adds	r3, r2, r3
1000500c:	1c0a      	adds	r2, r1, #0
1000500e:	701a      	strb	r2, [r3, #0]
            }
          }
          if ((temp<=1) && (unitychecknotneeded==0))
          {
            // is unityheaps odd? We want that..
            if ((unityheaps & 1) != 0)
10005010:	e013      	b.n	1000503a <computer_play+0x2d6>
10005012:	e012      	b.n	1000503a <computer_play+0x2d6>
          }
          else
          {
            // this action won't result in all heaps containing 1
            // it could be a good move.
            candidate[i]=temp;
10005014:	2308      	movs	r3, #8
10005016:	18fa      	adds	r2, r7, r3
10005018:	69fb      	ldr	r3, [r7, #28]
1000501a:	18d3      	adds	r3, r2, r3
1000501c:	2218      	movs	r2, #24
1000501e:	18ba      	adds	r2, r7, r2
10005020:	7812      	ldrb	r2, [r2, #0]
10005022:	701a      	strb	r2, [r3, #0]
            quality[i]+=9;
10005024:	1c3a      	adds	r2, r7, #0
10005026:	69fb      	ldr	r3, [r7, #28]
10005028:	18d3      	adds	r3, r2, r3
1000502a:	781b      	ldrb	r3, [r3, #0]
1000502c:	3309      	adds	r3, #9
1000502e:	b2d9      	uxtb	r1, r3
10005030:	1c3a      	adds	r2, r7, #0
10005032:	69fb      	ldr	r3, [r7, #28]
10005034:	18d3      	adds	r3, r2, r3
10005036:	1c0a      	adds	r2, r1, #0
10005038:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("num_playable_rows=%d\n", num_playable_rows);
    if (num_playable_rows>=1)
    {
      // overall strategy: find some possible moves, and give them a weight
      // and then we'll pick the best of the lot.
      for (i=rows-1; i>=0; i--)
1000503a:	69fb      	ldr	r3, [r7, #28]
1000503c:	3b01      	subs	r3, #1
1000503e:	61fb      	str	r3, [r7, #28]
10005040:	69fb      	ldr	r3, [r7, #28]
10005042:	2b00      	cmp	r3, #0
10005044:	db00      	blt.n	10005048 <computer_play+0x2e4>
10005046:	e723      	b.n	10004e90 <computer_play+0x12c>
        // loop to get another candidate
      } // end of for (i=rows-1; i>=0; i--)
      // ok we have at least one playable move. Find the highest quality move.
      XMC_DEBUG("quality table: %d %d %d %d\n", quality[0], quality[1], quality[2], quality[3]);
      XMC_DEBUG("finding highest quality move\n");
      for (i=0; i<rows; i++)
10005048:	2300      	movs	r3, #0
1000504a:	61fb      	str	r3, [r7, #28]
1000504c:	e016      	b.n	1000507c <computer_play+0x318>
      {
        if (quality[i]>=peak_quality)
1000504e:	1c3a      	adds	r2, r7, #0
10005050:	69fb      	ldr	r3, [r7, #28]
10005052:	18d3      	adds	r3, r2, r3
10005054:	781b      	ldrb	r3, [r3, #0]
10005056:	2225      	movs	r2, #37	; 0x25
10005058:	18ba      	adds	r2, r7, r2
1000505a:	7812      	ldrb	r2, [r2, #0]
1000505c:	429a      	cmp	r2, r3
1000505e:	d80a      	bhi.n	10005076 <computer_play+0x312>
        {
          peak_quality=quality[i];
10005060:	2325      	movs	r3, #37	; 0x25
10005062:	18fb      	adds	r3, r7, r3
10005064:	1c39      	adds	r1, r7, #0
10005066:	69fa      	ldr	r2, [r7, #28]
10005068:	188a      	adds	r2, r1, r2
1000506a:	7812      	ldrb	r2, [r2, #0]
1000506c:	701a      	strb	r2, [r3, #0]
          peak_candidate=i;
1000506e:	2324      	movs	r3, #36	; 0x24
10005070:	18fb      	adds	r3, r7, r3
10005072:	69fa      	ldr	r2, [r7, #28]
10005074:	701a      	strb	r2, [r3, #0]
        // loop to get another candidate
      } // end of for (i=rows-1; i>=0; i--)
      // ok we have at least one playable move. Find the highest quality move.
      XMC_DEBUG("quality table: %d %d %d %d\n", quality[0], quality[1], quality[2], quality[3]);
      XMC_DEBUG("finding highest quality move\n");
      for (i=0; i<rows; i++)
10005076:	69fb      	ldr	r3, [r7, #28]
10005078:	3301      	adds	r3, #1
1000507a:	61fb      	str	r3, [r7, #28]
1000507c:	4b0a      	ldr	r3, [pc, #40]	; (100050a8 <computer_play+0x344>)
1000507e:	781b      	ldrb	r3, [r3, #0]
10005080:	1e1a      	subs	r2, r3, #0
10005082:	69fb      	ldr	r3, [r7, #28]
10005084:	429a      	cmp	r2, r3
10005086:	dce2      	bgt.n	1000504e <computer_play+0x2ea>
          XMC_DEBUG("best so far is candidate %d\n", i);
        }
      }
      // change the quality values to make the computer play weaker
      // depending on level.
      if ((level==1) || (level==2))
10005088:	4b08      	ldr	r3, [pc, #32]	; (100050ac <computer_play+0x348>)
1000508a:	781b      	ldrb	r3, [r3, #0]
1000508c:	2b01      	cmp	r3, #1
1000508e:	d003      	beq.n	10005098 <computer_play+0x334>
10005090:	4b06      	ldr	r3, [pc, #24]	; (100050ac <computer_play+0x348>)
10005092:	781b      	ldrb	r3, [r3, #0]
10005094:	2b02      	cmp	r3, #2
10005096:	d169      	bne.n	1000516c <computer_play+0x408>
      {
        for (i=0; i<rows; i++)
10005098:	2300      	movs	r3, #0
1000509a:	61fb      	str	r3, [r7, #28]
1000509c:	e03c      	b.n	10005118 <computer_play+0x3b4>
1000509e:	46c0      	nop			; (mov r8, r8)
100050a0:	20000700 	.word	0x20000700
100050a4:	200005b4 	.word	0x200005b4
100050a8:	20000591 	.word	0x20000591
100050ac:	20000590 	.word	0x20000590
        {
          if (numsticks[i]>1)
100050b0:	4a56      	ldr	r2, [pc, #344]	; (1000520c <computer_play+0x4a8>)
100050b2:	69fb      	ldr	r3, [r7, #28]
100050b4:	18d3      	adds	r3, r2, r3
100050b6:	781b      	ldrb	r3, [r3, #0]
100050b8:	2b01      	cmp	r3, #1
100050ba:	d92a      	bls.n	10005112 <computer_play+0x3ae>
          {
            if (random_num()>WEAKNESS)
100050bc:	f7ff fcd2 	bl	10004a64 <random_num>
100050c0:	1e03      	subs	r3, r0, #0
100050c2:	2bc8      	cmp	r3, #200	; 0xc8
100050c4:	d925      	bls.n	10005112 <computer_play+0x3ae>
            {
              candidate[i]=numsticks[i]-1;
100050c6:	4a51      	ldr	r2, [pc, #324]	; (1000520c <computer_play+0x4a8>)
100050c8:	69fb      	ldr	r3, [r7, #28]
100050ca:	18d3      	adds	r3, r2, r3
100050cc:	781b      	ldrb	r3, [r3, #0]
100050ce:	3b01      	subs	r3, #1
100050d0:	b2d9      	uxtb	r1, r3
100050d2:	2308      	movs	r3, #8
100050d4:	18fa      	adds	r2, r7, r3
100050d6:	69fb      	ldr	r3, [r7, #28]
100050d8:	18d3      	adds	r3, r2, r3
100050da:	1c0a      	adds	r2, r1, #0
100050dc:	701a      	strb	r2, [r3, #0]
              quality[i]=peak_quality+1;
100050de:	2325      	movs	r3, #37	; 0x25
100050e0:	18fb      	adds	r3, r7, r3
100050e2:	781b      	ldrb	r3, [r3, #0]
100050e4:	3301      	adds	r3, #1
100050e6:	b2d9      	uxtb	r1, r3
100050e8:	1c3a      	adds	r2, r7, #0
100050ea:	69fb      	ldr	r3, [r7, #28]
100050ec:	18d3      	adds	r3, r2, r3
100050ee:	1c0a      	adds	r2, r1, #0
100050f0:	701a      	strb	r2, [r3, #0]
              if (random_num()>128U)
100050f2:	f7ff fcb7 	bl	10004a64 <random_num>
100050f6:	1e03      	subs	r3, r0, #0
100050f8:	2b80      	cmp	r3, #128	; 0x80
100050fa:	d90a      	bls.n	10005112 <computer_play+0x3ae>
              {
                quality[i]++;
100050fc:	1c3a      	adds	r2, r7, #0
100050fe:	69fb      	ldr	r3, [r7, #28]
10005100:	18d3      	adds	r3, r2, r3
10005102:	781b      	ldrb	r3, [r3, #0]
10005104:	3301      	adds	r3, #1
10005106:	b2d9      	uxtb	r1, r3
10005108:	1c3a      	adds	r2, r7, #0
1000510a:	69fb      	ldr	r3, [r7, #28]
1000510c:	18d3      	adds	r3, r2, r3
1000510e:	1c0a      	adds	r2, r1, #0
10005110:	701a      	strb	r2, [r3, #0]
      }
      // change the quality values to make the computer play weaker
      // depending on level.
      if ((level==1) || (level==2))
      {
        for (i=0; i<rows; i++)
10005112:	69fb      	ldr	r3, [r7, #28]
10005114:	3301      	adds	r3, #1
10005116:	61fb      	str	r3, [r7, #28]
10005118:	4b3d      	ldr	r3, [pc, #244]	; (10005210 <computer_play+0x4ac>)
1000511a:	781b      	ldrb	r3, [r3, #0]
1000511c:	1e1a      	subs	r2, r3, #0
1000511e:	69fb      	ldr	r3, [r7, #28]
10005120:	429a      	cmp	r2, r3
10005122:	dcc5      	bgt.n	100050b0 <computer_play+0x34c>
              }
            }
          }
        }
        // now find peak candidate again
        peak_quality=0;
10005124:	2325      	movs	r3, #37	; 0x25
10005126:	18fb      	adds	r3, r7, r3
10005128:	2200      	movs	r2, #0
1000512a:	701a      	strb	r2, [r3, #0]
        for (i=0; i<rows; i++)
1000512c:	2300      	movs	r3, #0
1000512e:	61fb      	str	r3, [r7, #28]
10005130:	e016      	b.n	10005160 <computer_play+0x3fc>
        {
          if (quality[i]>=peak_quality)
10005132:	1c3a      	adds	r2, r7, #0
10005134:	69fb      	ldr	r3, [r7, #28]
10005136:	18d3      	adds	r3, r2, r3
10005138:	781b      	ldrb	r3, [r3, #0]
1000513a:	2225      	movs	r2, #37	; 0x25
1000513c:	18ba      	adds	r2, r7, r2
1000513e:	7812      	ldrb	r2, [r2, #0]
10005140:	429a      	cmp	r2, r3
10005142:	d80a      	bhi.n	1000515a <computer_play+0x3f6>
          {
            peak_quality=quality[i];
10005144:	2325      	movs	r3, #37	; 0x25
10005146:	18fb      	adds	r3, r7, r3
10005148:	1c39      	adds	r1, r7, #0
1000514a:	69fa      	ldr	r2, [r7, #28]
1000514c:	188a      	adds	r2, r1, r2
1000514e:	7812      	ldrb	r2, [r2, #0]
10005150:	701a      	strb	r2, [r3, #0]
            peak_candidate=i;
10005152:	2324      	movs	r3, #36	; 0x24
10005154:	18fb      	adds	r3, r7, r3
10005156:	69fa      	ldr	r2, [r7, #28]
10005158:	701a      	strb	r2, [r3, #0]
            }
          }
        }
        // now find peak candidate again
        peak_quality=0;
        for (i=0; i<rows; i++)
1000515a:	69fb      	ldr	r3, [r7, #28]
1000515c:	3301      	adds	r3, #1
1000515e:	61fb      	str	r3, [r7, #28]
10005160:	4b2b      	ldr	r3, [pc, #172]	; (10005210 <computer_play+0x4ac>)
10005162:	781b      	ldrb	r3, [r3, #0]
10005164:	1e1a      	subs	r2, r3, #0
10005166:	69fb      	ldr	r3, [r7, #28]
10005168:	429a      	cmp	r2, r3
1000516a:	dce2      	bgt.n	10005132 <computer_play+0x3ce>
            XMC_DEBUG("weakened best candidate so far %d\n", i);
          }
        }

      }
      numsticks[peak_candidate]=candidate[peak_candidate];
1000516c:	2324      	movs	r3, #36	; 0x24
1000516e:	18fb      	adds	r3, r7, r3
10005170:	781b      	ldrb	r3, [r3, #0]
10005172:	2224      	movs	r2, #36	; 0x24
10005174:	18ba      	adds	r2, r7, r2
10005176:	7812      	ldrb	r2, [r2, #0]
10005178:	2108      	movs	r1, #8
1000517a:	1879      	adds	r1, r7, r1
1000517c:	5c89      	ldrb	r1, [r1, r2]
1000517e:	4a23      	ldr	r2, [pc, #140]	; (1000520c <computer_play+0x4a8>)
10005180:	54d1      	strb	r1, [r2, r3]
10005182:	e040      	b.n	10005206 <computer_play+0x4a2>
    } // end of if (num_playable_rows>=1)
    else
    {
      // we don't have a playable row in the bitmap!
      // play any row we can..
      for (i=0; i<rows; i++)
10005184:	2300      	movs	r3, #0
10005186:	61fb      	str	r3, [r7, #28]
10005188:	e016      	b.n	100051b8 <computer_play+0x454>
      {
        if (numsticks[i]>0)
1000518a:	4a20      	ldr	r2, [pc, #128]	; (1000520c <computer_play+0x4a8>)
1000518c:	69fb      	ldr	r3, [r7, #28]
1000518e:	18d3      	adds	r3, r2, r3
10005190:	781b      	ldrb	r3, [r3, #0]
10005192:	2b00      	cmp	r3, #0
10005194:	d00d      	beq.n	100051b2 <computer_play+0x44e>
        {
          numsticks[i]--;
10005196:	4a1d      	ldr	r2, [pc, #116]	; (1000520c <computer_play+0x4a8>)
10005198:	69fb      	ldr	r3, [r7, #28]
1000519a:	18d3      	adds	r3, r2, r3
1000519c:	781b      	ldrb	r3, [r3, #0]
1000519e:	3b01      	subs	r3, #1
100051a0:	b2d9      	uxtb	r1, r3
100051a2:	4a1a      	ldr	r2, [pc, #104]	; (1000520c <computer_play+0x4a8>)
100051a4:	69fb      	ldr	r3, [r7, #28]
100051a6:	18d3      	adds	r3, r2, r3
100051a8:	1c0a      	adds	r2, r1, #0
100051aa:	701a      	strb	r2, [r3, #0]
          i=rows;
100051ac:	4b18      	ldr	r3, [pc, #96]	; (10005210 <computer_play+0x4ac>)
100051ae:	781b      	ldrb	r3, [r3, #0]
100051b0:	61fb      	str	r3, [r7, #28]
    } // end of if (num_playable_rows>=1)
    else
    {
      // we don't have a playable row in the bitmap!
      // play any row we can..
      for (i=0; i<rows; i++)
100051b2:	69fb      	ldr	r3, [r7, #28]
100051b4:	3301      	adds	r3, #1
100051b6:	61fb      	str	r3, [r7, #28]
100051b8:	4b15      	ldr	r3, [pc, #84]	; (10005210 <computer_play+0x4ac>)
100051ba:	781b      	ldrb	r3, [r3, #0]
100051bc:	1e1a      	subs	r2, r3, #0
100051be:	69fb      	ldr	r3, [r7, #28]
100051c0:	429a      	cmp	r2, r3
100051c2:	dce2      	bgt.n	1000518a <computer_play+0x426>
100051c4:	e01f      	b.n	10005206 <computer_play+0x4a2>
    }
  } // end of if (x>0)
  else
  {
    // no strategy any more. play any row we can..
    for (i=0; i<rows; i++)
100051c6:	2300      	movs	r3, #0
100051c8:	61fb      	str	r3, [r7, #28]
100051ca:	e016      	b.n	100051fa <computer_play+0x496>
    {
      if (numsticks[i]>0)
100051cc:	4a0f      	ldr	r2, [pc, #60]	; (1000520c <computer_play+0x4a8>)
100051ce:	69fb      	ldr	r3, [r7, #28]
100051d0:	18d3      	adds	r3, r2, r3
100051d2:	781b      	ldrb	r3, [r3, #0]
100051d4:	2b00      	cmp	r3, #0
100051d6:	d00d      	beq.n	100051f4 <computer_play+0x490>
      {
        numsticks[i]--;
100051d8:	4a0c      	ldr	r2, [pc, #48]	; (1000520c <computer_play+0x4a8>)
100051da:	69fb      	ldr	r3, [r7, #28]
100051dc:	18d3      	adds	r3, r2, r3
100051de:	781b      	ldrb	r3, [r3, #0]
100051e0:	3b01      	subs	r3, #1
100051e2:	b2d9      	uxtb	r1, r3
100051e4:	4a09      	ldr	r2, [pc, #36]	; (1000520c <computer_play+0x4a8>)
100051e6:	69fb      	ldr	r3, [r7, #28]
100051e8:	18d3      	adds	r3, r2, r3
100051ea:	1c0a      	adds	r2, r1, #0
100051ec:	701a      	strb	r2, [r3, #0]
        i=rows;
100051ee:	4b08      	ldr	r3, [pc, #32]	; (10005210 <computer_play+0x4ac>)
100051f0:	781b      	ldrb	r3, [r3, #0]
100051f2:	61fb      	str	r3, [r7, #28]
    }
  } // end of if (x>0)
  else
  {
    // no strategy any more. play any row we can..
    for (i=0; i<rows; i++)
100051f4:	69fb      	ldr	r3, [r7, #28]
100051f6:	3301      	adds	r3, #1
100051f8:	61fb      	str	r3, [r7, #28]
100051fa:	4b05      	ldr	r3, [pc, #20]	; (10005210 <computer_play+0x4ac>)
100051fc:	781b      	ldrb	r3, [r3, #0]
100051fe:	1e1a      	subs	r2, r3, #0
10005200:	69fb      	ldr	r3, [r7, #28]
10005202:	429a      	cmp	r2, r3
10005204:	dce2      	bgt.n	100051cc <computer_play+0x468>
        numsticks[i]--;
        i=rows;
      }
    }
  }
}
10005206:	46bd      	mov	sp, r7
10005208:	b00b      	add	sp, #44	; 0x2c
1000520a:	bd90      	pop	{r4, r7, pc}
1000520c:	20000700 	.word	0x20000700
10005210:	20000591 	.word	0x20000591

10005214 <show_status>:

void
show_status(void)
{
10005214:	b580      	push	{r7, lr}
10005216:	af00      	add	r7, sp, #0
#ifdef DO_DEBUG
  char i;
#endif

  plot_ram_rows(numsticks);
10005218:	4b03      	ldr	r3, [pc, #12]	; (10005228 <show_status+0x14>)
1000521a:	1c18      	adds	r0, r3, #0
1000521c:	f000 f93c 	bl	10005498 <plot_ram_rows>
  display_write();
10005220:	f000 f898 	bl	10005354 <display_write>
  {
	  printf("%d   ", numsticks[(unsigned char)i]);
  }
  printf("\n");
#endif
}
10005224:	46bd      	mov	sp, r7
10005226:	bd80      	pop	{r7, pc}
10005228:	20000700 	.word	0x20000700

1000522c <set_led>:
 * used to turn on and off a small LED (LED2) on the microcontroller board
 * just for debug or heartbeat indication purposes
 */
void
set_led(char state)
{
1000522c:	b580      	push	{r7, lr}
1000522e:	b082      	sub	sp, #8
10005230:	af00      	add	r7, sp, #0
10005232:	1c02      	adds	r2, r0, #0
10005234:	1dfb      	adds	r3, r7, #7
10005236:	701a      	strb	r2, [r3, #0]
  switch(state)
10005238:	1dfb      	adds	r3, r7, #7
1000523a:	781b      	ldrb	r3, [r3, #0]
1000523c:	2b00      	cmp	r3, #0
1000523e:	d002      	beq.n	10005246 <set_led+0x1a>
10005240:	2b01      	cmp	r3, #1
10005242:	d005      	beq.n	10005250 <set_led+0x24>
    break;
  case 1:
    DIGITAL_IO_SetOutputHigh(&led2);
    break;
  default:
    break;
10005244:	e009      	b.n	1000525a <set_led+0x2e>
set_led(char state)
{
  switch(state)
  {
  case 0:
    DIGITAL_IO_SetOutputLow(&led2);
10005246:	4b06      	ldr	r3, [pc, #24]	; (10005260 <set_led+0x34>)
10005248:	1c18      	adds	r0, r3, #0
1000524a:	f7ff f955 	bl	100044f8 <DIGITAL_IO_SetOutputLow>
    break;
1000524e:	e004      	b.n	1000525a <set_led+0x2e>
  case 1:
    DIGITAL_IO_SetOutputHigh(&led2);
10005250:	4b03      	ldr	r3, [pc, #12]	; (10005260 <set_led+0x34>)
10005252:	1c18      	adds	r0, r3, #0
10005254:	f7ff f940 	bl	100044d8 <DIGITAL_IO_SetOutputHigh>
    break;
10005258:	46c0      	nop			; (mov r8, r8)
  default:
    break;
  }
}
1000525a:	46bd      	mov	sp, r7
1000525c:	b002      	add	sp, #8
1000525e:	bd80      	pop	{r7, pc}
10005260:	100059e0 	.word	0x100059e0

10005264 <play_tone>:

void
play_tone(char type)
{
10005264:	b580      	push	{r7, lr}
10005266:	b084      	sub	sp, #16
10005268:	af00      	add	r7, sp, #0
1000526a:	1c02      	adds	r2, r0, #0
1000526c:	1dfb      	adds	r3, r7, #7
1000526e:	701a      	strb	r2, [r3, #0]
  unsigned int i;
  PWM_CCU4_Start(&pwm1);
10005270:	4b1e      	ldr	r3, [pc, #120]	; (100052ec <play_tone+0x88>)
10005272:	1c18      	adds	r0, r3, #0
10005274:	f7fd fec4 	bl	10003000 <PWM_CCU4_Start>
  for (i=0; i<50; i++)
10005278:	2300      	movs	r3, #0
1000527a:	60fb      	str	r3, [r7, #12]
1000527c:	e02b      	b.n	100052d6 <play_tone+0x72>
  {
    if (type==0) // falling tone
1000527e:	1dfb      	adds	r3, r7, #7
10005280:	781b      	ldrb	r3, [r3, #0]
10005282:	2b00      	cmp	r3, #0
10005284:	d10c      	bne.n	100052a0 <play_tone+0x3c>
    {
      PWM_CCU4_SetFreq(&pwm1, 500+((50-i)*20));
10005286:	68fb      	ldr	r3, [r7, #12]
10005288:	2214      	movs	r2, #20
1000528a:	4252      	negs	r2, r2
1000528c:	4353      	muls	r3, r2
1000528e:	4a18      	ldr	r2, [pc, #96]	; (100052f0 <play_tone+0x8c>)
10005290:	4694      	mov	ip, r2
10005292:	4463      	add	r3, ip
10005294:	4a15      	ldr	r2, [pc, #84]	; (100052ec <play_tone+0x88>)
10005296:	1c10      	adds	r0, r2, #0
10005298:	1c19      	adds	r1, r3, #0
1000529a:	f7fd ff0f 	bl	100030bc <PWM_CCU4_SetFreq>
1000529e:	e00f      	b.n	100052c0 <play_tone+0x5c>
    }
    else if (type==1) // rising tone
100052a0:	1dfb      	adds	r3, r7, #7
100052a2:	781b      	ldrb	r3, [r3, #0]
100052a4:	2b01      	cmp	r3, #1
100052a6:	d10b      	bne.n	100052c0 <play_tone+0x5c>
    {
      PWM_CCU4_SetFreq(&pwm1, 500+(i*20));
100052a8:	68fa      	ldr	r2, [r7, #12]
100052aa:	1c13      	adds	r3, r2, #0
100052ac:	009b      	lsls	r3, r3, #2
100052ae:	189b      	adds	r3, r3, r2
100052b0:	009b      	lsls	r3, r3, #2
100052b2:	33f5      	adds	r3, #245	; 0xf5
100052b4:	33ff      	adds	r3, #255	; 0xff
100052b6:	4a0d      	ldr	r2, [pc, #52]	; (100052ec <play_tone+0x88>)
100052b8:	1c10      	adds	r0, r2, #0
100052ba:	1c19      	adds	r1, r3, #0
100052bc:	f7fd fefe 	bl	100030bc <PWM_CCU4_SetFreq>
    }
    general_timer=50;
100052c0:	4b0c      	ldr	r3, [pc, #48]	; (100052f4 <play_tone+0x90>)
100052c2:	2232      	movs	r2, #50	; 0x32
100052c4:	601a      	str	r2, [r3, #0]
    while(general_timer);
100052c6:	46c0      	nop			; (mov r8, r8)
100052c8:	4b0a      	ldr	r3, [pc, #40]	; (100052f4 <play_tone+0x90>)
100052ca:	681b      	ldr	r3, [r3, #0]
100052cc:	2b00      	cmp	r3, #0
100052ce:	d1fb      	bne.n	100052c8 <play_tone+0x64>
void
play_tone(char type)
{
  unsigned int i;
  PWM_CCU4_Start(&pwm1);
  for (i=0; i<50; i++)
100052d0:	68fb      	ldr	r3, [r7, #12]
100052d2:	3301      	adds	r3, #1
100052d4:	60fb      	str	r3, [r7, #12]
100052d6:	68fb      	ldr	r3, [r7, #12]
100052d8:	2b31      	cmp	r3, #49	; 0x31
100052da:	d9d0      	bls.n	1000527e <play_tone+0x1a>
      PWM_CCU4_SetFreq(&pwm1, 500+(i*20));
    }
    general_timer=50;
    while(general_timer);
  }
  PWM_CCU4_Stop(&pwm1);
100052dc:	4b03      	ldr	r3, [pc, #12]	; (100052ec <play_tone+0x88>)
100052de:	1c18      	adds	r0, r3, #0
100052e0:	f7fd fec0 	bl	10003064 <PWM_CCU4_Stop>
}
100052e4:	46bd      	mov	sp, r7
100052e6:	b004      	add	sp, #16
100052e8:	bd80      	pop	{r7, pc}
100052ea:	46c0      	nop			; (mov r8, r8)
100052ec:	20000520 	.word	0x20000520
100052f0:	000005dc 	.word	0x000005dc
100052f4:	200005c0 	.word	0x200005c0

100052f8 <display_init>:
/* display_init
 * initializes the display chip
 */
void
display_init(void)
{
100052f8:	b590      	push	{r4, r7, lr}
100052fa:	b085      	sub	sp, #20
100052fc:	af02      	add	r7, sp, #8
  unsigned char i;
  for (i=0; i<3; i++)
100052fe:	1dfb      	adds	r3, r7, #7
10005300:	2200      	movs	r2, #0
10005302:	701a      	strb	r2, [r3, #0]
10005304:	e01a      	b.n	1000533c <display_init+0x44>
  {
    I2C_MASTER_Transmit(&i2c_bus, true, led_address, (uint8_t*)(&display_init_data[i]), 1, true);
10005306:	1dfb      	adds	r3, r7, #7
10005308:	781a      	ldrb	r2, [r3, #0]
1000530a:	4b10      	ldr	r3, [pc, #64]	; (1000534c <display_init+0x54>)
1000530c:	18d4      	adds	r4, r2, r3
1000530e:	4a10      	ldr	r2, [pc, #64]	; (10005350 <display_init+0x58>)
10005310:	2301      	movs	r3, #1
10005312:	9300      	str	r3, [sp, #0]
10005314:	2301      	movs	r3, #1
10005316:	9301      	str	r3, [sp, #4]
10005318:	1c10      	adds	r0, r2, #0
1000531a:	2101      	movs	r1, #1
1000531c:	22e0      	movs	r2, #224	; 0xe0
1000531e:	1c23      	adds	r3, r4, #0
10005320:	f7fe f916 	bl	10003550 <I2C_MASTER_Transmit>
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
10005324:	46c0      	nop			; (mov r8, r8)
10005326:	4b0a      	ldr	r3, [pc, #40]	; (10005350 <display_init+0x58>)
10005328:	1c18      	adds	r0, r3, #0
1000532a:	f7ff f8c7 	bl	100044bc <I2C_MASTER_IsTxBusy>
1000532e:	1e03      	subs	r3, r0, #0
10005330:	d1f9      	bne.n	10005326 <display_init+0x2e>
 */
void
display_init(void)
{
  unsigned char i;
  for (i=0; i<3; i++)
10005332:	1dfb      	adds	r3, r7, #7
10005334:	781a      	ldrb	r2, [r3, #0]
10005336:	1dfb      	adds	r3, r7, #7
10005338:	3201      	adds	r2, #1
1000533a:	701a      	strb	r2, [r3, #0]
1000533c:	1dfb      	adds	r3, r7, #7
1000533e:	781b      	ldrb	r3, [r3, #0]
10005340:	2b02      	cmp	r3, #2
10005342:	d9e0      	bls.n	10005306 <display_init+0xe>
  {
    I2C_MASTER_Transmit(&i2c_bus, true, led_address, (uint8_t*)(&display_init_data[i]), 1, true);
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
  }
}
10005344:	46bd      	mov	sp, r7
10005346:	b003      	add	sp, #12
10005348:	bd90      	pop	{r4, r7, pc}
1000534a:	46c0      	nop			; (mov r8, r8)
1000534c:	100059fc 	.word	0x100059fc
10005350:	20000574 	.word	0x20000574

10005354 <display_write>:
/* display_write
 * sends the display ram data to the display
 */
void
display_write(void)
{
10005354:	b580      	push	{r7, lr}
10005356:	b082      	sub	sp, #8
10005358:	af00      	add	r7, sp, #0
  unsigned char i;

  I2C_MASTER_SendStart(&i2c_bus, led_address, XMC_I2C_CH_CMD_WRITE);
1000535a:	4b26      	ldr	r3, [pc, #152]	; (100053f4 <display_write+0xa0>)
1000535c:	1c18      	adds	r0, r3, #0
1000535e:	21e0      	movs	r1, #224	; 0xe0
10005360:	2200      	movs	r2, #0
10005362:	f7ff f895 	bl	10004490 <I2C_MASTER_SendStart>
  //while(I2C_MASTER_GetFlagStatus(&i2c_bus, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U);
  //I2C_MASTER_ClearFlag(&i2c_bus, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

  I2C_MASTER_TransmitByte(&i2c_bus, 0x00); // select display address 0x00
10005366:	4b23      	ldr	r3, [pc, #140]	; (100053f4 <display_write+0xa0>)
10005368:	1c18      	adds	r0, r3, #0
1000536a:	2100      	movs	r1, #0
1000536c:	f7ff f872 	bl	10004454 <I2C_MASTER_TransmitByte>
  while(I2C_MASTER_IsTxBusy(&i2c_bus));
10005370:	46c0      	nop			; (mov r8, r8)
10005372:	4b20      	ldr	r3, [pc, #128]	; (100053f4 <display_write+0xa0>)
10005374:	1c18      	adds	r0, r3, #0
10005376:	f7ff f8a1 	bl	100044bc <I2C_MASTER_IsTxBusy>
1000537a:	1e03      	subs	r3, r0, #0
1000537c:	d1f9      	bne.n	10005372 <display_write+0x1e>

  // now write out 128 bits, of which 64 correspond to the LEDs on an 8x8 module
  for (i=0; i<8; i++)
1000537e:	1dfb      	adds	r3, r7, #7
10005380:	2200      	movs	r2, #0
10005382:	701a      	strb	r2, [r3, #0]
10005384:	e022      	b.n	100053cc <display_write+0x78>
  {
    I2C_MASTER_TransmitByte(&i2c_bus, display_ram[i] & 0xff);
10005386:	1dfb      	adds	r3, r7, #7
10005388:	781a      	ldrb	r2, [r3, #0]
1000538a:	4b1b      	ldr	r3, [pc, #108]	; (100053f8 <display_write+0xa4>)
1000538c:	0052      	lsls	r2, r2, #1
1000538e:	5ad3      	ldrh	r3, [r2, r3]
10005390:	b2db      	uxtb	r3, r3
10005392:	4a18      	ldr	r2, [pc, #96]	; (100053f4 <display_write+0xa0>)
10005394:	1c10      	adds	r0, r2, #0
10005396:	1c19      	adds	r1, r3, #0
10005398:	f7ff f85c 	bl	10004454 <I2C_MASTER_TransmitByte>
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
1000539c:	46c0      	nop			; (mov r8, r8)
1000539e:	4b15      	ldr	r3, [pc, #84]	; (100053f4 <display_write+0xa0>)
100053a0:	1c18      	adds	r0, r3, #0
100053a2:	f7ff f88b 	bl	100044bc <I2C_MASTER_IsTxBusy>
100053a6:	1e03      	subs	r3, r0, #0
100053a8:	d1f9      	bne.n	1000539e <display_write+0x4a>
    I2C_MASTER_TransmitByte(&i2c_bus, 0); // display IC has 16x8 bits RAM but display is 8x8 bits
100053aa:	4b12      	ldr	r3, [pc, #72]	; (100053f4 <display_write+0xa0>)
100053ac:	1c18      	adds	r0, r3, #0
100053ae:	2100      	movs	r1, #0
100053b0:	f7ff f850 	bl	10004454 <I2C_MASTER_TransmitByte>
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
100053b4:	46c0      	nop			; (mov r8, r8)
100053b6:	4b0f      	ldr	r3, [pc, #60]	; (100053f4 <display_write+0xa0>)
100053b8:	1c18      	adds	r0, r3, #0
100053ba:	f7ff f87f 	bl	100044bc <I2C_MASTER_IsTxBusy>
100053be:	1e03      	subs	r3, r0, #0
100053c0:	d1f9      	bne.n	100053b6 <display_write+0x62>

  I2C_MASTER_TransmitByte(&i2c_bus, 0x00); // select display address 0x00
  while(I2C_MASTER_IsTxBusy(&i2c_bus));

  // now write out 128 bits, of which 64 correspond to the LEDs on an 8x8 module
  for (i=0; i<8; i++)
100053c2:	1dfb      	adds	r3, r7, #7
100053c4:	781a      	ldrb	r2, [r3, #0]
100053c6:	1dfb      	adds	r3, r7, #7
100053c8:	3201      	adds	r2, #1
100053ca:	701a      	strb	r2, [r3, #0]
100053cc:	1dfb      	adds	r3, r7, #7
100053ce:	781b      	ldrb	r3, [r3, #0]
100053d0:	2b07      	cmp	r3, #7
100053d2:	d9d8      	bls.n	10005386 <display_write+0x32>
    I2C_MASTER_TransmitByte(&i2c_bus, display_ram[i] & 0xff);
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
    I2C_MASTER_TransmitByte(&i2c_bus, 0); // display IC has 16x8 bits RAM but display is 8x8 bits
    while(I2C_MASTER_IsTxBusy(&i2c_bus));
  }
  I2C_MASTER_SendStop(&i2c_bus);
100053d4:	4b07      	ldr	r3, [pc, #28]	; (100053f4 <display_write+0xa0>)
100053d6:	1c18      	adds	r0, r3, #0
100053d8:	f7ff f84e 	bl	10004478 <I2C_MASTER_SendStop>

  display_update_timer=10;
100053dc:	4b07      	ldr	r3, [pc, #28]	; (100053fc <display_write+0xa8>)
100053de:	220a      	movs	r2, #10
100053e0:	601a      	str	r2, [r3, #0]
  while(display_update_timer);
100053e2:	46c0      	nop			; (mov r8, r8)
100053e4:	4b05      	ldr	r3, [pc, #20]	; (100053fc <display_write+0xa8>)
100053e6:	681b      	ldr	r3, [r3, #0]
100053e8:	2b00      	cmp	r3, #0
100053ea:	d1fb      	bne.n	100053e4 <display_write+0x90>

}
100053ec:	46bd      	mov	sp, r7
100053ee:	b002      	add	sp, #8
100053f0:	bd80      	pop	{r7, pc}
100053f2:	46c0      	nop			; (mov r8, r8)
100053f4:	20000574 	.word	0x20000574
100053f8:	20000710 	.word	0x20000710
100053fc:	200005c4 	.word	0x200005c4

10005400 <display_ram_blank>:
 * sets the display ram to all blank.
 * Doesn't update to the display, call display_write to do that.
 */
void
display_ram_blank(void)
{
10005400:	b580      	push	{r7, lr}
10005402:	b082      	sub	sp, #8
10005404:	af00      	add	r7, sp, #0
  unsigned char i;
  for (i=0; i<8; i++)
10005406:	1dfb      	adds	r3, r7, #7
10005408:	2200      	movs	r2, #0
1000540a:	701a      	strb	r2, [r3, #0]
1000540c:	e00a      	b.n	10005424 <display_ram_blank+0x24>
  {
    display_ram[i]=0;
1000540e:	1dfb      	adds	r3, r7, #7
10005410:	781a      	ldrb	r2, [r3, #0]
10005412:	4b08      	ldr	r3, [pc, #32]	; (10005434 <display_ram_blank+0x34>)
10005414:	0052      	lsls	r2, r2, #1
10005416:	2100      	movs	r1, #0
10005418:	52d1      	strh	r1, [r2, r3]
 */
void
display_ram_blank(void)
{
  unsigned char i;
  for (i=0; i<8; i++)
1000541a:	1dfb      	adds	r3, r7, #7
1000541c:	781a      	ldrb	r2, [r3, #0]
1000541e:	1dfb      	adds	r3, r7, #7
10005420:	3201      	adds	r2, #1
10005422:	701a      	strb	r2, [r3, #0]
10005424:	1dfb      	adds	r3, r7, #7
10005426:	781b      	ldrb	r3, [r3, #0]
10005428:	2b07      	cmp	r3, #7
1000542a:	d9f0      	bls.n	1000540e <display_ram_blank+0xe>
  {
    display_ram[i]=0;
  }
}
1000542c:	46bd      	mov	sp, r7
1000542e:	b002      	add	sp, #8
10005430:	bd80      	pop	{r7, pc}
10005432:	46c0      	nop			; (mov r8, r8)
10005434:	20000710 	.word	0x20000710

10005438 <plot_ram_pixel>:
 * sets a pixel in the display ram.
 * Doesn't update the display, call display_write to do that.
 */
void
plot_ram_pixel(int x, int y)
{
10005438:	b580      	push	{r7, lr}
1000543a:	b082      	sub	sp, #8
1000543c:	af00      	add	r7, sp, #0
1000543e:	6078      	str	r0, [r7, #4]
10005440:	6039      	str	r1, [r7, #0]
  switch(ORIENTATION) // for future use if the display orientation ever changes
  {
  case 0:
    x=8-x-1;
10005442:	687b      	ldr	r3, [r7, #4]
10005444:	2207      	movs	r2, #7
10005446:	1ad3      	subs	r3, r2, r3
10005448:	607b      	str	r3, [r7, #4]
    break;
1000544a:	46c0      	nop			; (mov r8, r8)
  default:
    break;
  }
  x = x+7; // fixes an unusual mapping in the 8x8 display matrix
1000544c:	687b      	ldr	r3, [r7, #4]
1000544e:	3307      	adds	r3, #7
10005450:	607b      	str	r3, [r7, #4]
  x = x%8; //
10005452:	687b      	ldr	r3, [r7, #4]
10005454:	4a0e      	ldr	r2, [pc, #56]	; (10005490 <plot_ram_pixel+0x58>)
10005456:	4013      	ands	r3, r2
10005458:	d504      	bpl.n	10005464 <plot_ram_pixel+0x2c>
1000545a:	3b01      	subs	r3, #1
1000545c:	2208      	movs	r2, #8
1000545e:	4252      	negs	r2, r2
10005460:	4313      	orrs	r3, r2
10005462:	3301      	adds	r3, #1
10005464:	607b      	str	r3, [r7, #4]

  display_ram[y] |= 1<<x; // place the pixel into the local display ram
10005466:	4b0b      	ldr	r3, [pc, #44]	; (10005494 <plot_ram_pixel+0x5c>)
10005468:	683a      	ldr	r2, [r7, #0]
1000546a:	0052      	lsls	r2, r2, #1
1000546c:	5ad3      	ldrh	r3, [r2, r3]
1000546e:	b299      	uxth	r1, r3
10005470:	2201      	movs	r2, #1
10005472:	687b      	ldr	r3, [r7, #4]
10005474:	409a      	lsls	r2, r3
10005476:	1c13      	adds	r3, r2, #0
10005478:	b29b      	uxth	r3, r3
1000547a:	1c0a      	adds	r2, r1, #0
1000547c:	4313      	orrs	r3, r2
1000547e:	b29b      	uxth	r3, r3
10005480:	b299      	uxth	r1, r3
10005482:	4b04      	ldr	r3, [pc, #16]	; (10005494 <plot_ram_pixel+0x5c>)
10005484:	683a      	ldr	r2, [r7, #0]
10005486:	0052      	lsls	r2, r2, #1
10005488:	52d1      	strh	r1, [r2, r3]
}
1000548a:	46bd      	mov	sp, r7
1000548c:	b002      	add	sp, #8
1000548e:	bd80      	pop	{r7, pc}
10005490:	80000007 	.word	0x80000007
10005494:	20000710 	.word	0x20000710

10005498 <plot_ram_rows>:
 * puts each row content into the local display ram. Use display_write to
 * then send it to the display module.
 */
void
plot_ram_rows(unsigned char* rows_arr)
{
10005498:	b580      	push	{r7, lr}
1000549a:	b084      	sub	sp, #16
1000549c:	af00      	add	r7, sp, #0
1000549e:	6078      	str	r0, [r7, #4]
  unsigned char i, j;
  display_ram_blank();
100054a0:	f7ff ffae 	bl	10005400 <display_ram_blank>
  for (i=0; i<rows; i++)
100054a4:	230f      	movs	r3, #15
100054a6:	18fb      	adds	r3, r7, r3
100054a8:	2200      	movs	r2, #0
100054aa:	701a      	strb	r2, [r3, #0]
100054ac:	e030      	b.n	10005510 <plot_ram_rows+0x78>
  {
    if (rows_arr[i]>0)
100054ae:	230f      	movs	r3, #15
100054b0:	18fb      	adds	r3, r7, r3
100054b2:	781b      	ldrb	r3, [r3, #0]
100054b4:	687a      	ldr	r2, [r7, #4]
100054b6:	18d3      	adds	r3, r2, r3
100054b8:	781b      	ldrb	r3, [r3, #0]
100054ba:	2b00      	cmp	r3, #0
100054bc:	d021      	beq.n	10005502 <plot_ram_rows+0x6a>
    {
      for (j=0; j<rows_arr[i]; j++)
100054be:	230e      	movs	r3, #14
100054c0:	18fb      	adds	r3, r7, r3
100054c2:	2200      	movs	r2, #0
100054c4:	701a      	strb	r2, [r3, #0]
100054c6:	e011      	b.n	100054ec <plot_ram_rows+0x54>
      {
        plot_ram_pixel((int)i*2, (int)j);
100054c8:	230f      	movs	r3, #15
100054ca:	18fb      	adds	r3, r7, r3
100054cc:	781b      	ldrb	r3, [r3, #0]
100054ce:	005a      	lsls	r2, r3, #1
100054d0:	230e      	movs	r3, #14
100054d2:	18fb      	adds	r3, r7, r3
100054d4:	781b      	ldrb	r3, [r3, #0]
100054d6:	1c10      	adds	r0, r2, #0
100054d8:	1c19      	adds	r1, r3, #0
100054da:	f7ff ffad 	bl	10005438 <plot_ram_pixel>
  display_ram_blank();
  for (i=0; i<rows; i++)
  {
    if (rows_arr[i]>0)
    {
      for (j=0; j<rows_arr[i]; j++)
100054de:	230e      	movs	r3, #14
100054e0:	18fb      	adds	r3, r7, r3
100054e2:	781a      	ldrb	r2, [r3, #0]
100054e4:	230e      	movs	r3, #14
100054e6:	18fb      	adds	r3, r7, r3
100054e8:	3201      	adds	r2, #1
100054ea:	701a      	strb	r2, [r3, #0]
100054ec:	230f      	movs	r3, #15
100054ee:	18fb      	adds	r3, r7, r3
100054f0:	781b      	ldrb	r3, [r3, #0]
100054f2:	687a      	ldr	r2, [r7, #4]
100054f4:	18d3      	adds	r3, r2, r3
100054f6:	781b      	ldrb	r3, [r3, #0]
100054f8:	220e      	movs	r2, #14
100054fa:	18ba      	adds	r2, r7, r2
100054fc:	7812      	ldrb	r2, [r2, #0]
100054fe:	429a      	cmp	r2, r3
10005500:	d3e2      	bcc.n	100054c8 <plot_ram_rows+0x30>
void
plot_ram_rows(unsigned char* rows_arr)
{
  unsigned char i, j;
  display_ram_blank();
  for (i=0; i<rows; i++)
10005502:	230f      	movs	r3, #15
10005504:	18fb      	adds	r3, r7, r3
10005506:	781a      	ldrb	r2, [r3, #0]
10005508:	230f      	movs	r3, #15
1000550a:	18fb      	adds	r3, r7, r3
1000550c:	3201      	adds	r2, #1
1000550e:	701a      	strb	r2, [r3, #0]
10005510:	4b04      	ldr	r3, [pc, #16]	; (10005524 <plot_ram_rows+0x8c>)
10005512:	781b      	ldrb	r3, [r3, #0]
10005514:	220f      	movs	r2, #15
10005516:	18ba      	adds	r2, r7, r2
10005518:	7812      	ldrb	r2, [r2, #0]
1000551a:	429a      	cmp	r2, r3
1000551c:	d3c7      	bcc.n	100054ae <plot_ram_rows+0x16>
      {
        plot_ram_pixel((int)i*2, (int)j);
      }
    }
  }
}
1000551e:	46bd      	mov	sp, r7
10005520:	b004      	add	sp, #16
10005522:	bd80      	pop	{r7, pc}
10005524:	20000591 	.word	0x20000591

10005528 <scroll_text>:
 * If set to zero, it will leave the final
 * stick at the bottom of the display.
 */
void
scroll_text(char* text, char len, char all)
{
10005528:	b580      	push	{r7, lr}
1000552a:	b088      	sub	sp, #32
1000552c:	af00      	add	r7, sp, #0
1000552e:	6078      	str	r0, [r7, #4]
10005530:	1c08      	adds	r0, r1, #0
10005532:	1c11      	adds	r1, r2, #0
10005534:	1cfb      	adds	r3, r7, #3
10005536:	1c02      	adds	r2, r0, #0
10005538:	701a      	strb	r2, [r3, #0]
1000553a:	1cbb      	adds	r3, r7, #2
1000553c:	1c0a      	adds	r2, r1, #0
1000553e:	701a      	strb	r2, [r3, #0]
  char first=1;
10005540:	231f      	movs	r3, #31
10005542:	18fb      	adds	r3, r7, r3
10005544:	2201      	movs	r2, #1
10005546:	701a      	strb	r2, [r3, #0]
  char i, xmov, y, startx;
  char a, b; // two partial characters can be scrolled on the 8-wide display since each character is 5 bits wide
  unsigned int idx_a, idx_b;
  unsigned short int ab_slice; // this variable stores a bitmap of a row, for two characters
  for (i=0; i<len-1; i++)
10005548:	231e      	movs	r3, #30
1000554a:	18fb      	adds	r3, r7, r3
1000554c:	2200      	movs	r2, #0
1000554e:	701a      	strb	r2, [r3, #0]
10005550:	e0ed      	b.n	1000572e <scroll_text+0x206>
  {
    // this algorithm revolves around reducing the problem to scrolling only
    // two characters. At the appropriate point in the animation, the for loop
    // is used to update the a and b variables to make a become the previous b, and
    // and the next character gets placed in b.
    a=text[(unsigned char)i];
10005552:	231e      	movs	r3, #30
10005554:	18fb      	adds	r3, r7, r3
10005556:	781b      	ldrb	r3, [r3, #0]
10005558:	687a      	ldr	r2, [r7, #4]
1000555a:	18d2      	adds	r2, r2, r3
1000555c:	2317      	movs	r3, #23
1000555e:	18fb      	adds	r3, r7, r3
10005560:	7812      	ldrb	r2, [r2, #0]
10005562:	701a      	strb	r2, [r3, #0]
    b=text[(unsigned char)(i+1)];
10005564:	231e      	movs	r3, #30
10005566:	18fb      	adds	r3, r7, r3
10005568:	781b      	ldrb	r3, [r3, #0]
1000556a:	3301      	adds	r3, #1
1000556c:	b2db      	uxtb	r3, r3
1000556e:	1c1a      	adds	r2, r3, #0
10005570:	687b      	ldr	r3, [r7, #4]
10005572:	189a      	adds	r2, r3, r2
10005574:	2316      	movs	r3, #22
10005576:	18fb      	adds	r3, r7, r3
10005578:	7812      	ldrb	r2, [r2, #0]
1000557a:	701a      	strb	r2, [r3, #0]
    idx_a=(unsigned int)(a-' '); // get an index into the alphabet bitmap
1000557c:	2317      	movs	r3, #23
1000557e:	18fb      	adds	r3, r7, r3
10005580:	781b      	ldrb	r3, [r3, #0]
10005582:	3b20      	subs	r3, #32
10005584:	613b      	str	r3, [r7, #16]
    idx_a=idx_a*7;               //
10005586:	693a      	ldr	r2, [r7, #16]
10005588:	1c13      	adds	r3, r2, #0
1000558a:	00db      	lsls	r3, r3, #3
1000558c:	1a9b      	subs	r3, r3, r2
1000558e:	613b      	str	r3, [r7, #16]

    idx_b=(unsigned int)(b-' '); // get an index into the alphabet bitmap
10005590:	2316      	movs	r3, #22
10005592:	18fb      	adds	r3, r7, r3
10005594:	781b      	ldrb	r3, [r3, #0]
10005596:	3b20      	subs	r3, #32
10005598:	60fb      	str	r3, [r7, #12]
    idx_b=idx_b*7;               //
1000559a:	68fa      	ldr	r2, [r7, #12]
1000559c:	1c13      	adds	r3, r2, #0
1000559e:	00db      	lsls	r3, r3, #3
100055a0:	1a9b      	subs	r3, r3, r2
100055a2:	60fb      	str	r3, [r7, #12]

    if (all)
100055a4:	1cbb      	adds	r3, r7, #2
100055a6:	781b      	ldrb	r3, [r3, #0]
100055a8:	2b00      	cmp	r3, #0
100055aa:	d002      	beq.n	100055b2 <scroll_text+0x8a>
    {
      display_ram[0]=0; // bottom row is blank
100055ac:	4b66      	ldr	r3, [pc, #408]	; (10005748 <scroll_text+0x220>)
100055ae:	2200      	movs	r2, #0
100055b0:	801a      	strh	r2, [r3, #0]
    }
    if (first)
100055b2:	231f      	movs	r3, #31
100055b4:	18fb      	adds	r3, r7, r3
100055b6:	781b      	ldrb	r3, [r3, #0]
100055b8:	2b00      	cmp	r3, #0
100055ba:	d004      	beq.n	100055c6 <scroll_text+0x9e>
      startx=0;
100055bc:	231b      	movs	r3, #27
100055be:	18fb      	adds	r3, r7, r3
100055c0:	2200      	movs	r2, #0
100055c2:	701a      	strb	r2, [r3, #0]
100055c4:	e003      	b.n	100055ce <scroll_text+0xa6>
    else
      startx=6;         // after the very first character, subsequent characters are placed at the correct point in the animation
100055c6:	231b      	movs	r3, #27
100055c8:	18fb      	adds	r3, r7, r3
100055ca:	2206      	movs	r2, #6
100055cc:	701a      	strb	r2, [r3, #0]
    for (xmov=startx; xmov<11; xmov++) // step through to scroll two characters
100055ce:	231d      	movs	r3, #29
100055d0:	18fb      	adds	r3, r7, r3
100055d2:	221b      	movs	r2, #27
100055d4:	18ba      	adds	r2, r7, r2
100055d6:	7812      	ldrb	r2, [r2, #0]
100055d8:	701a      	strb	r2, [r3, #0]
100055da:	e097      	b.n	1000570c <scroll_text+0x1e4>
    {
      for (y=0; y<7; y++)
100055dc:	231c      	movs	r3, #28
100055de:	18fb      	adds	r3, r7, r3
100055e0:	2200      	movs	r2, #0
100055e2:	701a      	strb	r2, [r3, #0]
100055e4:	e07b      	b.n	100056de <scroll_text+0x1b6>
      {
        // the left byte of ab_slice will ultimately get displayed.
        // the left character (a) is put into ab_slice so that only the leftmost part of the character will appear in the rightmost part of the display
        ab_slice=((unsigned short int)(alpha_bitmap[idx_a+y]))<<(xmov+4);
100055e6:	231c      	movs	r3, #28
100055e8:	18fb      	adds	r3, r7, r3
100055ea:	781a      	ldrb	r2, [r3, #0]
100055ec:	693b      	ldr	r3, [r7, #16]
100055ee:	18d3      	adds	r3, r2, r3
100055f0:	4a56      	ldr	r2, [pc, #344]	; (1000574c <scroll_text+0x224>)
100055f2:	5cd3      	ldrb	r3, [r2, r3]
100055f4:	1c1a      	adds	r2, r3, #0
100055f6:	231d      	movs	r3, #29
100055f8:	18fb      	adds	r3, r7, r3
100055fa:	781b      	ldrb	r3, [r3, #0]
100055fc:	3304      	adds	r3, #4
100055fe:	409a      	lsls	r2, r3
10005600:	2318      	movs	r3, #24
10005602:	18fb      	adds	r3, r7, r3
10005604:	801a      	strh	r2, [r3, #0]
        if (xmov>5)
10005606:	231d      	movs	r3, #29
10005608:	18fb      	adds	r3, r7, r3
1000560a:	781b      	ldrb	r3, [r3, #0]
1000560c:	2b05      	cmp	r3, #5
1000560e:	d916      	bls.n	1000563e <scroll_text+0x116>
        {
          // the next character (b) needs to start showing on the display.
          // // the b character is butted next to a, with a space of a single bit
          ab_slice |= (((unsigned short int)((alpha_bitmap[idx_b+y])))<<(xmov-2));
10005610:	231c      	movs	r3, #28
10005612:	18fb      	adds	r3, r7, r3
10005614:	781a      	ldrb	r2, [r3, #0]
10005616:	68fb      	ldr	r3, [r7, #12]
10005618:	18d3      	adds	r3, r2, r3
1000561a:	4a4c      	ldr	r2, [pc, #304]	; (1000574c <scroll_text+0x224>)
1000561c:	5cd3      	ldrb	r3, [r2, r3]
1000561e:	1c1a      	adds	r2, r3, #0
10005620:	231d      	movs	r3, #29
10005622:	18fb      	adds	r3, r7, r3
10005624:	781b      	ldrb	r3, [r3, #0]
10005626:	3b02      	subs	r3, #2
10005628:	409a      	lsls	r2, r3
1000562a:	1c13      	adds	r3, r2, #0
1000562c:	b29a      	uxth	r2, r3
1000562e:	2318      	movs	r3, #24
10005630:	18fb      	adds	r3, r7, r3
10005632:	881b      	ldrh	r3, [r3, #0]
10005634:	4313      	orrs	r3, r2
10005636:	b29a      	uxth	r2, r3
10005638:	2318      	movs	r3, #24
1000563a:	18fb      	adds	r3, r7, r3
1000563c:	801a      	strh	r2, [r3, #0]
        }
        // now shift it all to the right, so that the part to be displayed is in the
        // lower 8 bits
        display_ram[y+1]=(((unsigned short int)(ab_slice))>>8);
1000563e:	231c      	movs	r3, #28
10005640:	18fb      	adds	r3, r7, r3
10005642:	781b      	ldrb	r3, [r3, #0]
10005644:	1c5a      	adds	r2, r3, #1
10005646:	2318      	movs	r3, #24
10005648:	18fb      	adds	r3, r7, r3
1000564a:	881b      	ldrh	r3, [r3, #0]
1000564c:	0a1b      	lsrs	r3, r3, #8
1000564e:	b299      	uxth	r1, r3
10005650:	4b3d      	ldr	r3, [pc, #244]	; (10005748 <scroll_text+0x220>)
10005652:	0052      	lsls	r2, r2, #1
10005654:	52d1      	strh	r1, [r2, r3]
        // the 8x8 display module has weird mapping. we need to fix in software
        if (display_ram[y+1] & 0x01)
10005656:	231c      	movs	r3, #28
10005658:	18fb      	adds	r3, r7, r3
1000565a:	781b      	ldrb	r3, [r3, #0]
1000565c:	1c5a      	adds	r2, r3, #1
1000565e:	4b3a      	ldr	r3, [pc, #232]	; (10005748 <scroll_text+0x220>)
10005660:	0052      	lsls	r2, r2, #1
10005662:	5ad3      	ldrh	r3, [r2, r3]
10005664:	1c1a      	adds	r2, r3, #0
10005666:	2301      	movs	r3, #1
10005668:	4013      	ands	r3, r2
1000566a:	d021      	beq.n	100056b0 <scroll_text+0x188>
        {
          display_ram[y+1]=display_ram[y+1]>>1;
1000566c:	231c      	movs	r3, #28
1000566e:	18fb      	adds	r3, r7, r3
10005670:	781b      	ldrb	r3, [r3, #0]
10005672:	1c5a      	adds	r2, r3, #1
10005674:	231c      	movs	r3, #28
10005676:	18fb      	adds	r3, r7, r3
10005678:	781b      	ldrb	r3, [r3, #0]
1000567a:	1c59      	adds	r1, r3, #1
1000567c:	4b32      	ldr	r3, [pc, #200]	; (10005748 <scroll_text+0x220>)
1000567e:	0049      	lsls	r1, r1, #1
10005680:	5acb      	ldrh	r3, [r1, r3]
10005682:	085b      	lsrs	r3, r3, #1
10005684:	b299      	uxth	r1, r3
10005686:	4b30      	ldr	r3, [pc, #192]	; (10005748 <scroll_text+0x220>)
10005688:	0052      	lsls	r2, r2, #1
1000568a:	52d1      	strh	r1, [r2, r3]
          display_ram[y+1]|=0x80;
1000568c:	231c      	movs	r3, #28
1000568e:	18fb      	adds	r3, r7, r3
10005690:	781b      	ldrb	r3, [r3, #0]
10005692:	1c5a      	adds	r2, r3, #1
10005694:	231c      	movs	r3, #28
10005696:	18fb      	adds	r3, r7, r3
10005698:	781b      	ldrb	r3, [r3, #0]
1000569a:	1c59      	adds	r1, r3, #1
1000569c:	4b2a      	ldr	r3, [pc, #168]	; (10005748 <scroll_text+0x220>)
1000569e:	0049      	lsls	r1, r1, #1
100056a0:	5acb      	ldrh	r3, [r1, r3]
100056a2:	2180      	movs	r1, #128	; 0x80
100056a4:	430b      	orrs	r3, r1
100056a6:	b299      	uxth	r1, r3
100056a8:	4b27      	ldr	r3, [pc, #156]	; (10005748 <scroll_text+0x220>)
100056aa:	0052      	lsls	r2, r2, #1
100056ac:	52d1      	strh	r1, [r2, r3]
100056ae:	e00f      	b.n	100056d0 <scroll_text+0x1a8>
        }
        else
        {
          display_ram[y+1]=display_ram[y+1]>>1;
100056b0:	231c      	movs	r3, #28
100056b2:	18fb      	adds	r3, r7, r3
100056b4:	781b      	ldrb	r3, [r3, #0]
100056b6:	1c5a      	adds	r2, r3, #1
100056b8:	231c      	movs	r3, #28
100056ba:	18fb      	adds	r3, r7, r3
100056bc:	781b      	ldrb	r3, [r3, #0]
100056be:	1c59      	adds	r1, r3, #1
100056c0:	4b21      	ldr	r3, [pc, #132]	; (10005748 <scroll_text+0x220>)
100056c2:	0049      	lsls	r1, r1, #1
100056c4:	5acb      	ldrh	r3, [r1, r3]
100056c6:	085b      	lsrs	r3, r3, #1
100056c8:	b299      	uxth	r1, r3
100056ca:	4b1f      	ldr	r3, [pc, #124]	; (10005748 <scroll_text+0x220>)
100056cc:	0052      	lsls	r2, r2, #1
100056ce:	52d1      	strh	r1, [r2, r3]
      startx=0;
    else
      startx=6;         // after the very first character, subsequent characters are placed at the correct point in the animation
    for (xmov=startx; xmov<11; xmov++) // step through to scroll two characters
    {
      for (y=0; y<7; y++)
100056d0:	231c      	movs	r3, #28
100056d2:	18fb      	adds	r3, r7, r3
100056d4:	781a      	ldrb	r2, [r3, #0]
100056d6:	231c      	movs	r3, #28
100056d8:	18fb      	adds	r3, r7, r3
100056da:	3201      	adds	r2, #1
100056dc:	701a      	strb	r2, [r3, #0]
100056de:	231c      	movs	r3, #28
100056e0:	18fb      	adds	r3, r7, r3
100056e2:	781b      	ldrb	r3, [r3, #0]
100056e4:	2b06      	cmp	r3, #6
100056e6:	d800      	bhi.n	100056ea <scroll_text+0x1c2>
100056e8:	e77d      	b.n	100055e6 <scroll_text+0xbe>
        {
          display_ram[y+1]=display_ram[y+1]>>1;
        }
      }
      // display the ram
      display_write();
100056ea:	f7ff fe33 	bl	10005354 <display_write>
      display_update_timer=70; // 70msec scrolling delay
100056ee:	4b18      	ldr	r3, [pc, #96]	; (10005750 <scroll_text+0x228>)
100056f0:	2246      	movs	r2, #70	; 0x46
100056f2:	601a      	str	r2, [r3, #0]
      while(display_update_timer);
100056f4:	46c0      	nop			; (mov r8, r8)
100056f6:	4b16      	ldr	r3, [pc, #88]	; (10005750 <scroll_text+0x228>)
100056f8:	681b      	ldr	r3, [r3, #0]
100056fa:	2b00      	cmp	r3, #0
100056fc:	d1fb      	bne.n	100056f6 <scroll_text+0x1ce>
    }
    if (first)
      startx=0;
    else
      startx=6;         // after the very first character, subsequent characters are placed at the correct point in the animation
    for (xmov=startx; xmov<11; xmov++) // step through to scroll two characters
100056fe:	231d      	movs	r3, #29
10005700:	18fb      	adds	r3, r7, r3
10005702:	781a      	ldrb	r2, [r3, #0]
10005704:	231d      	movs	r3, #29
10005706:	18fb      	adds	r3, r7, r3
10005708:	3201      	adds	r2, #1
1000570a:	701a      	strb	r2, [r3, #0]
1000570c:	231d      	movs	r3, #29
1000570e:	18fb      	adds	r3, r7, r3
10005710:	781b      	ldrb	r3, [r3, #0]
10005712:	2b0a      	cmp	r3, #10
10005714:	d800      	bhi.n	10005718 <scroll_text+0x1f0>
10005716:	e761      	b.n	100055dc <scroll_text+0xb4>
      // display the ram
      display_write();
      display_update_timer=70; // 70msec scrolling delay
      while(display_update_timer);
    }
    first=0;
10005718:	231f      	movs	r3, #31
1000571a:	18fb      	adds	r3, r7, r3
1000571c:	2200      	movs	r2, #0
1000571e:	701a      	strb	r2, [r3, #0]
  char first=1;
  char i, xmov, y, startx;
  char a, b; // two partial characters can be scrolled on the 8-wide display since each character is 5 bits wide
  unsigned int idx_a, idx_b;
  unsigned short int ab_slice; // this variable stores a bitmap of a row, for two characters
  for (i=0; i<len-1; i++)
10005720:	231e      	movs	r3, #30
10005722:	18fb      	adds	r3, r7, r3
10005724:	781a      	ldrb	r2, [r3, #0]
10005726:	231e      	movs	r3, #30
10005728:	18fb      	adds	r3, r7, r3
1000572a:	3201      	adds	r2, #1
1000572c:	701a      	strb	r2, [r3, #0]
1000572e:	231e      	movs	r3, #30
10005730:	18fb      	adds	r3, r7, r3
10005732:	781a      	ldrb	r2, [r3, #0]
10005734:	1cfb      	adds	r3, r7, #3
10005736:	781b      	ldrb	r3, [r3, #0]
10005738:	3b01      	subs	r3, #1
1000573a:	429a      	cmp	r2, r3
1000573c:	da00      	bge.n	10005740 <scroll_text+0x218>
1000573e:	e708      	b.n	10005552 <scroll_text+0x2a>
      display_update_timer=70; // 70msec scrolling delay
      while(display_update_timer);
    }
    first=0;
  }
}
10005740:	46bd      	mov	sp, r7
10005742:	b008      	add	sp, #32
10005744:	bd80      	pop	{r7, pc}
10005746:	46c0      	nop			; (mov r8, r8)
10005748:	20000710 	.word	0x20000710
1000574c:	10005a34 	.word	0x10005a34
10005750:	200005c4 	.word	0x200005c4

10005754 <__aeabi_uidiv>:
10005754:	2200      	movs	r2, #0
10005756:	0843      	lsrs	r3, r0, #1
10005758:	428b      	cmp	r3, r1
1000575a:	d374      	bcc.n	10005846 <__aeabi_uidiv+0xf2>
1000575c:	0903      	lsrs	r3, r0, #4
1000575e:	428b      	cmp	r3, r1
10005760:	d35f      	bcc.n	10005822 <__aeabi_uidiv+0xce>
10005762:	0a03      	lsrs	r3, r0, #8
10005764:	428b      	cmp	r3, r1
10005766:	d344      	bcc.n	100057f2 <__aeabi_uidiv+0x9e>
10005768:	0b03      	lsrs	r3, r0, #12
1000576a:	428b      	cmp	r3, r1
1000576c:	d328      	bcc.n	100057c0 <__aeabi_uidiv+0x6c>
1000576e:	0c03      	lsrs	r3, r0, #16
10005770:	428b      	cmp	r3, r1
10005772:	d30d      	bcc.n	10005790 <__aeabi_uidiv+0x3c>
10005774:	22ff      	movs	r2, #255	; 0xff
10005776:	0209      	lsls	r1, r1, #8
10005778:	ba12      	rev	r2, r2
1000577a:	0c03      	lsrs	r3, r0, #16
1000577c:	428b      	cmp	r3, r1
1000577e:	d302      	bcc.n	10005786 <__aeabi_uidiv+0x32>
10005780:	1212      	asrs	r2, r2, #8
10005782:	0209      	lsls	r1, r1, #8
10005784:	d065      	beq.n	10005852 <__aeabi_uidiv+0xfe>
10005786:	0b03      	lsrs	r3, r0, #12
10005788:	428b      	cmp	r3, r1
1000578a:	d319      	bcc.n	100057c0 <__aeabi_uidiv+0x6c>
1000578c:	e000      	b.n	10005790 <__aeabi_uidiv+0x3c>
1000578e:	0a09      	lsrs	r1, r1, #8
10005790:	0bc3      	lsrs	r3, r0, #15
10005792:	428b      	cmp	r3, r1
10005794:	d301      	bcc.n	1000579a <__aeabi_uidiv+0x46>
10005796:	03cb      	lsls	r3, r1, #15
10005798:	1ac0      	subs	r0, r0, r3
1000579a:	4152      	adcs	r2, r2
1000579c:	0b83      	lsrs	r3, r0, #14
1000579e:	428b      	cmp	r3, r1
100057a0:	d301      	bcc.n	100057a6 <__aeabi_uidiv+0x52>
100057a2:	038b      	lsls	r3, r1, #14
100057a4:	1ac0      	subs	r0, r0, r3
100057a6:	4152      	adcs	r2, r2
100057a8:	0b43      	lsrs	r3, r0, #13
100057aa:	428b      	cmp	r3, r1
100057ac:	d301      	bcc.n	100057b2 <__aeabi_uidiv+0x5e>
100057ae:	034b      	lsls	r3, r1, #13
100057b0:	1ac0      	subs	r0, r0, r3
100057b2:	4152      	adcs	r2, r2
100057b4:	0b03      	lsrs	r3, r0, #12
100057b6:	428b      	cmp	r3, r1
100057b8:	d301      	bcc.n	100057be <__aeabi_uidiv+0x6a>
100057ba:	030b      	lsls	r3, r1, #12
100057bc:	1ac0      	subs	r0, r0, r3
100057be:	4152      	adcs	r2, r2
100057c0:	0ac3      	lsrs	r3, r0, #11
100057c2:	428b      	cmp	r3, r1
100057c4:	d301      	bcc.n	100057ca <__aeabi_uidiv+0x76>
100057c6:	02cb      	lsls	r3, r1, #11
100057c8:	1ac0      	subs	r0, r0, r3
100057ca:	4152      	adcs	r2, r2
100057cc:	0a83      	lsrs	r3, r0, #10
100057ce:	428b      	cmp	r3, r1
100057d0:	d301      	bcc.n	100057d6 <__aeabi_uidiv+0x82>
100057d2:	028b      	lsls	r3, r1, #10
100057d4:	1ac0      	subs	r0, r0, r3
100057d6:	4152      	adcs	r2, r2
100057d8:	0a43      	lsrs	r3, r0, #9
100057da:	428b      	cmp	r3, r1
100057dc:	d301      	bcc.n	100057e2 <__aeabi_uidiv+0x8e>
100057de:	024b      	lsls	r3, r1, #9
100057e0:	1ac0      	subs	r0, r0, r3
100057e2:	4152      	adcs	r2, r2
100057e4:	0a03      	lsrs	r3, r0, #8
100057e6:	428b      	cmp	r3, r1
100057e8:	d301      	bcc.n	100057ee <__aeabi_uidiv+0x9a>
100057ea:	020b      	lsls	r3, r1, #8
100057ec:	1ac0      	subs	r0, r0, r3
100057ee:	4152      	adcs	r2, r2
100057f0:	d2cd      	bcs.n	1000578e <__aeabi_uidiv+0x3a>
100057f2:	09c3      	lsrs	r3, r0, #7
100057f4:	428b      	cmp	r3, r1
100057f6:	d301      	bcc.n	100057fc <__aeabi_uidiv+0xa8>
100057f8:	01cb      	lsls	r3, r1, #7
100057fa:	1ac0      	subs	r0, r0, r3
100057fc:	4152      	adcs	r2, r2
100057fe:	0983      	lsrs	r3, r0, #6
10005800:	428b      	cmp	r3, r1
10005802:	d301      	bcc.n	10005808 <__aeabi_uidiv+0xb4>
10005804:	018b      	lsls	r3, r1, #6
10005806:	1ac0      	subs	r0, r0, r3
10005808:	4152      	adcs	r2, r2
1000580a:	0943      	lsrs	r3, r0, #5
1000580c:	428b      	cmp	r3, r1
1000580e:	d301      	bcc.n	10005814 <__aeabi_uidiv+0xc0>
10005810:	014b      	lsls	r3, r1, #5
10005812:	1ac0      	subs	r0, r0, r3
10005814:	4152      	adcs	r2, r2
10005816:	0903      	lsrs	r3, r0, #4
10005818:	428b      	cmp	r3, r1
1000581a:	d301      	bcc.n	10005820 <__aeabi_uidiv+0xcc>
1000581c:	010b      	lsls	r3, r1, #4
1000581e:	1ac0      	subs	r0, r0, r3
10005820:	4152      	adcs	r2, r2
10005822:	08c3      	lsrs	r3, r0, #3
10005824:	428b      	cmp	r3, r1
10005826:	d301      	bcc.n	1000582c <__aeabi_uidiv+0xd8>
10005828:	00cb      	lsls	r3, r1, #3
1000582a:	1ac0      	subs	r0, r0, r3
1000582c:	4152      	adcs	r2, r2
1000582e:	0883      	lsrs	r3, r0, #2
10005830:	428b      	cmp	r3, r1
10005832:	d301      	bcc.n	10005838 <__aeabi_uidiv+0xe4>
10005834:	008b      	lsls	r3, r1, #2
10005836:	1ac0      	subs	r0, r0, r3
10005838:	4152      	adcs	r2, r2
1000583a:	0843      	lsrs	r3, r0, #1
1000583c:	428b      	cmp	r3, r1
1000583e:	d301      	bcc.n	10005844 <__aeabi_uidiv+0xf0>
10005840:	004b      	lsls	r3, r1, #1
10005842:	1ac0      	subs	r0, r0, r3
10005844:	4152      	adcs	r2, r2
10005846:	1a41      	subs	r1, r0, r1
10005848:	d200      	bcs.n	1000584c <__aeabi_uidiv+0xf8>
1000584a:	4601      	mov	r1, r0
1000584c:	4152      	adcs	r2, r2
1000584e:	4610      	mov	r0, r2
10005850:	4770      	bx	lr
10005852:	e7ff      	b.n	10005854 <__aeabi_uidiv+0x100>
10005854:	b501      	push	{r0, lr}
10005856:	2000      	movs	r0, #0
10005858:	f000 f80c 	bl	10005874 <__aeabi_idiv0>
1000585c:	bd02      	pop	{r1, pc}
1000585e:	46c0      	nop			; (mov r8, r8)

10005860 <__aeabi_uidivmod>:
10005860:	2900      	cmp	r1, #0
10005862:	d0f7      	beq.n	10005854 <__aeabi_uidiv+0x100>
10005864:	b503      	push	{r0, r1, lr}
10005866:	f7ff ff75 	bl	10005754 <__aeabi_uidiv>
1000586a:	bc0e      	pop	{r1, r2, r3}
1000586c:	4342      	muls	r2, r0
1000586e:	1a89      	subs	r1, r1, r2
10005870:	4718      	bx	r3
10005872:	46c0      	nop			; (mov r8, r8)

10005874 <__aeabi_idiv0>:
10005874:	4770      	bx	lr
10005876:	46c0      	nop			; (mov r8, r8)

10005878 <__libc_init_array>:
10005878:	4b0e      	ldr	r3, [pc, #56]	; (100058b4 <__libc_init_array+0x3c>)
1000587a:	b570      	push	{r4, r5, r6, lr}
1000587c:	2500      	movs	r5, #0
1000587e:	1c1e      	adds	r6, r3, #0
10005880:	4c0d      	ldr	r4, [pc, #52]	; (100058b8 <__libc_init_array+0x40>)
10005882:	1ae4      	subs	r4, r4, r3
10005884:	10a4      	asrs	r4, r4, #2
10005886:	42a5      	cmp	r5, r4
10005888:	d004      	beq.n	10005894 <__libc_init_array+0x1c>
1000588a:	00ab      	lsls	r3, r5, #2
1000588c:	58f3      	ldr	r3, [r6, r3]
1000588e:	4798      	blx	r3
10005890:	3501      	adds	r5, #1
10005892:	e7f8      	b.n	10005886 <__libc_init_array+0xe>
10005894:	f7fc fd76 	bl	10002384 <_init>
10005898:	4b08      	ldr	r3, [pc, #32]	; (100058bc <__libc_init_array+0x44>)
1000589a:	2500      	movs	r5, #0
1000589c:	1c1e      	adds	r6, r3, #0
1000589e:	4c08      	ldr	r4, [pc, #32]	; (100058c0 <__libc_init_array+0x48>)
100058a0:	1ae4      	subs	r4, r4, r3
100058a2:	10a4      	asrs	r4, r4, #2
100058a4:	42a5      	cmp	r5, r4
100058a6:	d004      	beq.n	100058b2 <__libc_init_array+0x3a>
100058a8:	00ab      	lsls	r3, r5, #2
100058aa:	58f3      	ldr	r3, [r6, r3]
100058ac:	4798      	blx	r3
100058ae:	3501      	adds	r5, #1
100058b0:	e7f8      	b.n	100058a4 <__libc_init_array+0x2c>
100058b2:	bd70      	pop	{r4, r5, r6, pc}
100058b4:	20000598 	.word	0x20000598
100058b8:	20000598 	.word	0x20000598
100058bc:	20000598 	.word	0x20000598
100058c0:	20000598 	.word	0x20000598
100058c4:	10001b0a 	.word	0x10001b0a
100058c8:	10001b0a 	.word	0x10001b0a
100058cc:	10001b14 	.word	0x10001b14
100058d0:	10001b14 	.word	0x10001b14
100058d4:	10001b36 	.word	0x10001b36
100058d8:	10001b36 	.word	0x10001b36
100058dc:	10001b36 	.word	0x10001b36
100058e0:	10001b36 	.word	0x10001b36
100058e4:	10001b1e 	.word	0x10001b1e
100058e8:	10001b2a 	.word	0x10001b2a

100058ec <pwm1_timer_handle>:
100058ec:	00000000 00000001                       ........

100058f4 <pwm1_event0_config>:
100058f4:	00010000                                ....

100058f8 <pwm1_event1_config>:
100058f8:	00010000                                ....

100058fc <pwm1_event2_config>:
100058fc:	00010000                                ....

10005900 <pwm1_ch1_out0_config>:
10005900:	000000a0 00010000                       ........

10005908 <pwm1_config_handle>:
10005908:	fd8b0000 00007ec6 00000000 00000000     .....~..........
10005918:	00000000 100058f4 100058f8 100058fc     .....X...X...X..
	...
10005934:	01000000 00000000 04000000 100058ec     .............X..
10005944:	00000001 40040000 00000005 10005900     .......@.....Y..
10005954:	20000580                                ... 

10005958 <i2c_bus_channel_config>:
10005958:	000186a0 00000000                       ........

10005960 <i2c_bus_config>:
10005960:	10005958 10003fe1 00000000 00000000     XY...?..........
	...
1000597c:	04040000                                ....

10005980 <button1>:
10005980:	40040000 00000010 00000000 00000006     ...@............

10005990 <button2>:
10005990:	40040000 00000010 00000000 00000007     ...@............

100059a0 <button3>:
100059a0:	40040000 00000010 00000000 00000008     ...@............

100059b0 <button4>:
100059b0:	40040000 00000010 00000000 00000009     ...@............

100059c0 <button5>:
100059c0:	40040200 00000010 00000000 00000000     ...@............

100059d0 <button_computer>:
100059d0:	40040200 00000010 00000000 00000006     ...@............

100059e0 <led2>:
100059e0:	40040100 00000080 00010000 00000001     ...@............
100059f0:	00000100 00010000 00000000              ............

100059fc <display_init_data>:
100059fc:	00ef8121 4c4c4548 0020204f 20554f59     !...HELLO  .YOU 
10005a0c:	204e4957 00000020 45534f4c 00202052     WIN  ...LOSER  .
10005a1c:	10004be4 10004bca 10004baa 10004b8a     .K...K...K...K..
10005a2c:	10004b3e 10004af2                       >K...J..

10005a34 <alpha_bitmap>:
10005a34:	00000000 04000000 04040400 00000404     ................
10005a44:	0a0a0000 1f0a0a0a 0a0a1f0a 0e051e04     ................
10005a54:	03040f14 02040813 120d1819 12140815     ................
10005a64:	0000000c 04040000 08080302 08020408     ................
10005a74:	02020204 04000804 04150e15 04040000     ................
10005a84:	0004041f 000c0408 00000000 001f0000     ................
10005a94:	0c0c0000 00000000 08100000 00010204     ................
10005aa4:	1111110e 0e0e1111 04040404 101f040c     ................
10005ab4:	11010608 01110e0e 0e110106 121f0202     ................
10005ac4:	0e02060a 1e010111 110e1f10 08101e11     ................
10005ad4:	08080806 1f010204 0e11110e 0c0e1111     ................
10005ae4:	110f0102 0c000e11 0c0c000c 0c040800     ................
10005af4:	000c0c00 10080402 00020408 1f001f00     ................
10005b04:	04080000 04020102 04000408 0e110102     ................
10005b14:	0d15150e 110e1101 11111f11 091e040a     ................
10005b24:	09090e09 10110e1e 0e111010 0909091e     ................
10005b34:	1f1e0909 101e1010 10101f10 10101e10     ................
10005b44:	11110f1f 0e111013 1f111111 0e111111     ................
10005b54:	04040404 120c0e04 02020202 14121107     ................
10005b64:	11121418 1010101f 11101010 15151111     ................
10005b74:	1111111b 11191513 11110e11 0e111111     ................
10005b84:	1e101010 0d1e1111 11111512 12110e11     ................
10005b94:	11111e14 01110e1e 0e11100e 04040404     ................
10005ba4:	0e1f0404 11111111 0a041111 11111111     ................
10005bb4:	15150a11 11111115 040a1111 0411110a     ................
10005bc4:	110a0404 101f1111 01020408 0000001f     ................

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100027f9 	.word	0x100027f9
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10004139 	.word	0x10004139
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10004125 	.word	0x10004125
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	10001099 	.word	0x10001099
